import "strings"
import "types"

_modules = {
	"root": {
		"data": {
			"aws_availability_zones": {
				"available": {
					"config": {
						"state": "available",
					},
					"provisioners": null,
					"references": {
						"state": [],
					},
				},
			},
		},
		"modules": {
			"app_security_group": {
				"config": {
					"description": "Security group for web-servers with HTTP ports open within VPC",
					"name":        "web-sg-project-alpha-dev",
					"tags": {
						"environment": "development",
						"project":     "project-alpha",
					},
				},
				"references": {
					"description": [],
					"ingress_cidr_blocks": [
						"module.vpc.public_subnets_cidr_blocks",
						"module.vpc",
					],
					"name": [],
					"tags": [],
					"vpc_id": [
						"module.vpc.vpc_id",
						"module.vpc",
					],
				},
				"source":  "terraform-aws-modules/security-group/aws//modules/web",
				"version": "3.17.0",
			},
			"ec2_instances": {
				"config": {
					"tags": {
						"environment": "development",
						"project":     "project-alpha",
					},
				},
				"references": {
					"instance_count": [
						"var.instance_count",
					],
					"instance_type": [
						"var.instance_type",
					],
					"security_group_ids": [
						"module.app_security_group.this_security_group_id",
						"module.app_security_group",
					],
					"subnet_ids": [
						"module.vpc.private_subnets",
						"module.vpc",
					],
					"tags": [],
				},
				"source":  "./modules/aws-instance",
				"version": "",
			},
			"elb_http": {
				"config": {
					"health_check": {
						"healthy_threshold":   3,
						"interval":            10,
						"target":              "HTTP:80/index.html",
						"timeout":             5,
						"unhealthy_threshold": 10,
					},
					"internal": false,
					"listener": [
						{
							"instance_port":     "80",
							"instance_protocol": "HTTP",
							"lb_port":           "80",
							"lb_protocol":       "HTTP",
						},
					],
					"tags": {
						"environment": "development",
						"project":     "project-alpha",
					},
				},
				"references": {
					"health_check": [],
					"instances": [
						"module.ec2_instances.instance_ids",
						"module.ec2_instances",
					],
					"internal": [],
					"listener": [],
					"name": [
						"random_string.lb_id.result",
						"random_string.lb_id",
					],
					"number_of_instances": [
						"module.ec2_instances.instance_ids",
						"module.ec2_instances",
					],
					"security_groups": [
						"module.lb_security_group.this_security_group_id",
						"module.lb_security_group",
					],
					"subnets": [
						"module.vpc.public_subnets",
						"module.vpc",
					],
					"tags": [],
				},
				"source":  "terraform-aws-modules/elb/aws",
				"version": "2.4.0",
			},
			"lb_security_group": {
				"config": {
					"description": "Security group for load balancer with HTTP ports open within VPC",
					"ingress_cidr_blocks": [
						"10.0.0.0/16",
					],
					"ingress_with_cidr_blocks": [
						{
							"cidr_blocks": "10.0.0.0/16",
							"description": "SSH restricted to internal network",
							"from_port":   22,
							"protocol":    "tcp",
							"to_port":     22,
						},
					],
					"name": "lb-sg-project-alpha-dev",
					"tags": {
						"environment": "development",
						"project":     "project-alpha",
					},
				},
				"references": {
					"description":              [],
					"ingress_cidr_blocks":      [],
					"ingress_with_cidr_blocks": [],
					"name": [],
					"tags": [],
					"vpc_id": [
						"module.vpc.vpc_id",
						"module.vpc",
					],
				},
				"source":  "terraform-aws-modules/security-group/aws//modules/web",
				"version": "3.17.0",
			},
			"vpc": {
				"config": {
					"cidr":               "10.0.0.0/16",
					"enable_nat_gateway": true,
					"enable_vpn_gateway": false,
					"private_subnets": [
						"10.0.101.0/24",
						"10.0.102.0/24",
					],
					"public_subnets": [
						"10.0.1.0/24",
						"10.0.2.0/24",
					],
					"tags": {
						"environment": "development",
						"project":     "project-alpha",
					},
				},
				"references": {
					"azs": [
						"data.aws_availability_zones.available.names",
						"data.aws_availability_zones.available",
					],
					"cidr":               [],
					"enable_nat_gateway": [],
					"enable_vpn_gateway": [],
					"private_subnets":    [],
					"public_subnets":     [],
					"tags":               [],
				},
				"source":  "terraform-aws-modules/vpc/aws",
				"version": "2.64.0",
			},
		},
		"outputs": {
			"public_dns_name": {
				"depends_on":  [],
				"description": "Public DNS names of the load balancer for this project",
				"references": [
					"module.elb_http.this_elb_dns_name",
					"module.elb_http",
				],
				"sensitive": false,
				"value":     undefined,
			},
		},
		"providers": {
			"aws": {
				"alias": {
					"": {
						"config": {
							"region": "us-west-1",
						},
						"references": {
							"region": [],
						},
						"version": "",
					},
				},
				"config": {
					"region": "us-west-1",
				},
				"references": {
					"region": [],
				},
				"version": "",
			},
			"random": {
				"alias": {
					"": {
						"config":     {},
						"references": {},
						"version":    "",
					},
				},
				"config":     {},
				"references": {},
				"version":    "",
			},
		},
		"resources": {
			"aws_ebs_volume": {
				"unencrypted": {
					"config": {
						"availability_zone": "us-west-1b",
						"encrypted":         true,
						"size":              8,
					},
					"provisioners": null,
					"references": {
						"availability_zone": [],
						"encrypted":         [],
						"size":              [],
					},
				},
			},
			"random_string": {
				"lb_id": {
					"config": {
						"length":  3,
						"special": false,
					},
					"provisioners": null,
					"references": {
						"length":  [],
						"special": [],
					},
				},
			},
		},
		"variables": {
			"instance_count": {
				"default":     null,
				"description": "Number of EC2 instances to create",
			},
			"instance_type": {
				"default":     null,
				"description": "EC2 instance type",
			},
		},
	},

	"module.app_security_group": {
		"data": {},
		"modules": {
			"sg": {
				"config": {},
				"references": {
					"computed_egress_rules": [
						"var.auto_computed_egress_rules",
						"var.computed_egress_rules",
					],
					"computed_egress_with_cidr_blocks": [
						"var.computed_egress_with_cidr_blocks",
					],
					"computed_egress_with_ipv6_cidr_blocks": [
						"var.computed_egress_with_ipv6_cidr_blocks",
					],
					"computed_egress_with_self": [
						"var.auto_computed_egress_with_self",
						"var.computed_egress_with_self",
					],
					"computed_egress_with_source_security_group_id": [
						"var.computed_egress_with_source_security_group_id",
					],
					"computed_ingress_rules": [
						"var.auto_computed_ingress_rules",
						"var.computed_ingress_rules",
					],
					"computed_ingress_with_cidr_blocks": [
						"var.computed_ingress_with_cidr_blocks",
					],
					"computed_ingress_with_ipv6_cidr_blocks": [
						"var.computed_ingress_with_ipv6_cidr_blocks",
					],
					"computed_ingress_with_self": [
						"var.auto_computed_ingress_with_self",
						"var.computed_ingress_with_self",
					],
					"computed_ingress_with_source_security_group_id": [
						"var.computed_ingress_with_source_security_group_id",
					],
					"create": [
						"var.create",
					],
					"description": [
						"var.description",
					],
					"egress_cidr_blocks": [
						"var.egress_cidr_blocks",
					],
					"egress_ipv6_cidr_blocks": [
						"var.egress_ipv6_cidr_blocks",
					],
					"egress_prefix_list_ids": [
						"var.egress_prefix_list_ids",
					],
					"egress_rules": [
						"var.auto_egress_rules",
						"var.egress_rules",
					],
					"egress_with_cidr_blocks": [
						"var.egress_with_cidr_blocks",
					],
					"egress_with_ipv6_cidr_blocks": [
						"var.egress_with_ipv6_cidr_blocks",
					],
					"egress_with_self": [
						"var.auto_egress_with_self",
						"var.egress_with_self",
					],
					"egress_with_source_security_group_id": [
						"var.egress_with_source_security_group_id",
					],
					"ingress_cidr_blocks": [
						"var.ingress_cidr_blocks",
					],
					"ingress_ipv6_cidr_blocks": [
						"var.ingress_ipv6_cidr_blocks",
					],
					"ingress_prefix_list_ids": [
						"var.ingress_prefix_list_ids",
					],
					"ingress_rules": [
						"var.auto_ingress_rules",
						"var.ingress_rules",
					],
					"ingress_with_cidr_blocks": [
						"var.ingress_with_cidr_blocks",
					],
					"ingress_with_ipv6_cidr_blocks": [
						"var.ingress_with_ipv6_cidr_blocks",
					],
					"ingress_with_self": [
						"var.auto_ingress_with_self",
						"var.ingress_with_self",
					],
					"ingress_with_source_security_group_id": [
						"var.ingress_with_source_security_group_id",
					],
					"name": [
						"var.name",
					],
					"number_of_computed_egress_rules": [
						"var.auto_number_of_computed_egress_rules",
						"var.number_of_computed_egress_rules",
					],
					"number_of_computed_egress_with_cidr_blocks": [
						"var.number_of_computed_egress_with_cidr_blocks",
					],
					"number_of_computed_egress_with_ipv6_cidr_blocks": [
						"var.number_of_computed_egress_with_ipv6_cidr_blocks",
					],
					"number_of_computed_egress_with_self": [
						"var.auto_number_of_computed_egress_with_self",
						"var.number_of_computed_egress_with_self",
					],
					"number_of_computed_egress_with_source_security_group_id": [
						"var.number_of_computed_egress_with_source_security_group_id",
					],
					"number_of_computed_ingress_rules": [
						"var.auto_number_of_computed_ingress_rules",
						"var.number_of_computed_ingress_rules",
					],
					"number_of_computed_ingress_with_cidr_blocks": [
						"var.number_of_computed_ingress_with_cidr_blocks",
					],
					"number_of_computed_ingress_with_ipv6_cidr_blocks": [
						"var.number_of_computed_ingress_with_ipv6_cidr_blocks",
					],
					"number_of_computed_ingress_with_self": [
						"var.auto_number_of_computed_ingress_with_self",
						"var.number_of_computed_ingress_with_self",
					],
					"number_of_computed_ingress_with_source_security_group_id": [
						"var.number_of_computed_ingress_with_source_security_group_id",
					],
					"revoke_rules_on_delete": [
						"var.revoke_rules_on_delete",
					],
					"tags": [
						"var.tags",
					],
					"use_name_prefix": [
						"var.use_name_prefix",
					],
					"vpc_id": [
						"var.vpc_id",
					],
				},
				"source":  "../../",
				"version": "",
			},
		},
		"outputs": {
			"this_security_group_description": {
				"depends_on":  [],
				"description": "The description of the security group",
				"references": [
					"module.sg.this_security_group_description",
					"module.sg",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_security_group_id": {
				"depends_on":  [],
				"description": "The ID of the security group",
				"references": [
					"module.sg.this_security_group_id",
					"module.sg",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_security_group_name": {
				"depends_on":  [],
				"description": "The name of the security group",
				"references": [
					"module.sg.this_security_group_name",
					"module.sg",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_security_group_owner_id": {
				"depends_on":  [],
				"description": "The owner ID",
				"references": [
					"module.sg.this_security_group_owner_id",
					"module.sg",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_security_group_vpc_id": {
				"depends_on":  [],
				"description": "The VPC ID",
				"references": [
					"module.sg.this_security_group_vpc_id",
					"module.sg",
				],
				"sensitive": false,
				"value":     undefined,
			},
		},
		"providers": {},
		"resources": {},
		"variables": {
			"auto_computed_egress_rules": {
				"default":     [],
				"description": "List of computed egress rules to add automatically",
			},
			"auto_computed_egress_with_self": {
				"default":     [],
				"description": "List of maps defining computed egress rules with self to add automatically",
			},
			"auto_computed_ingress_rules": {
				"default":     [],
				"description": "List of ingress rules to add automatically",
			},
			"auto_computed_ingress_with_self": {
				"default":     [],
				"description": "List of maps defining computed ingress rules with self to add automatically",
			},
			"auto_egress_rules": {
				"default": [
					"all-all",
				],
				"description": "List of egress rules to add automatically",
			},
			"auto_egress_with_self": {
				"default":     [],
				"description": "List of maps defining egress rules with self to add automatically",
			},
			"auto_ingress_rules": {
				"default": [
					"http-80-tcp",
					"http-8080-tcp",
					"https-443-tcp",
					"web-jmx-tcp",
				],
				"description": "List of ingress rules to add automatically",
			},
			"auto_ingress_with_self": {
				"default": [
					{
						"rule": "all-all",
					},
				],
				"description": "List of maps defining ingress rules with self to add automatically",
			},
			"auto_number_of_computed_egress_rules": {
				"default":     0,
				"description": "Number of computed egress rules to create by name",
			},
			"auto_number_of_computed_egress_with_self": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'self' is defined",
			},
			"auto_number_of_computed_ingress_rules": {
				"default":     0,
				"description": "Number of computed ingress rules to create by name",
			},
			"auto_number_of_computed_ingress_with_self": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'self' is defined",
			},
			"computed_egress_cidr_blocks": {
				"default": [
					"0.0.0.0/0",
				],
				"description": "List of IPv4 CIDR ranges to use on all computed egress rules",
			},
			"computed_egress_ipv6_cidr_blocks": {
				"default": [
					"::/0",
				],
				"description": "List of IPv6 CIDR ranges to use on all computed egress rules",
			},
			"computed_egress_prefix_list_ids": {
				"default":     [],
				"description": "List of prefix list IDs (for allowing access to VPC endpoints) to use on all computed egress rules",
			},
			"computed_egress_rules": {
				"default":     [],
				"description": "List of computed egress rules to create by name",
			},
			"computed_egress_with_cidr_blocks": {
				"default":     [],
				"description": "List of computed egress rules to create where 'cidr_blocks' is used",
			},
			"computed_egress_with_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of computed egress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"computed_egress_with_self": {
				"default":     [],
				"description": "List of computed egress rules to create where 'self' is defined",
			},
			"computed_egress_with_source_security_group_id": {
				"default":     [],
				"description": "List of computed egress rules to create where 'source_security_group_id' is used",
			},
			"computed_ingress_cidr_blocks": {
				"default":     [],
				"description": "List of IPv4 CIDR ranges to use on all computed ingress rules",
			},
			"computed_ingress_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of IPv6 CIDR ranges to use on all computed ingress rules",
			},
			"computed_ingress_prefix_list_ids": {
				"default":     [],
				"description": "List of prefix list IDs (for allowing access to VPC endpoints) to use on all computed ingress rules",
			},
			"computed_ingress_rules": {
				"default":     [],
				"description": "List of computed ingress rules to create by name",
			},
			"computed_ingress_with_cidr_blocks": {
				"default":     [],
				"description": "List of computed ingress rules to create where 'cidr_blocks' is used",
			},
			"computed_ingress_with_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of computed ingress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"computed_ingress_with_self": {
				"default":     [],
				"description": "List of computed ingress rules to create where 'self' is defined",
			},
			"computed_ingress_with_source_security_group_id": {
				"default":     [],
				"description": "List of computed ingress rules to create where 'source_security_group_id' is used",
			},
			"create": {
				"default":     true,
				"description": "Whether to create security group and all rules",
			},
			"description": {
				"default":     "Security Group managed by Terraform",
				"description": "Description of security group",
			},
			"egress_cidr_blocks": {
				"default": [
					"0.0.0.0/0",
				],
				"description": "List of IPv4 CIDR ranges to use on all egress rules",
			},
			"egress_ipv6_cidr_blocks": {
				"default": [
					"::/0",
				],
				"description": "List of IPv6 CIDR ranges to use on all egress rules",
			},
			"egress_prefix_list_ids": {
				"default":     [],
				"description": "List of prefix list IDs (for allowing access to VPC endpoints) to use on all egress rules",
			},
			"egress_rules": {
				"default":     [],
				"description": "List of egress rules to create by name",
			},
			"egress_with_cidr_blocks": {
				"default":     [],
				"description": "List of egress rules to create where 'cidr_blocks' is used",
			},
			"egress_with_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of egress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"egress_with_self": {
				"default":     [],
				"description": "List of egress rules to create where 'self' is defined",
			},
			"egress_with_source_security_group_id": {
				"default":     [],
				"description": "List of egress rules to create where 'source_security_group_id' is used",
			},
			"ingress_cidr_blocks": {
				"default":     [],
				"description": "List of IPv4 CIDR ranges to use on all ingress rules",
			},
			"ingress_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of IPv6 CIDR ranges to use on all ingress rules",
			},
			"ingress_prefix_list_ids": {
				"default":     [],
				"description": "List of prefix list IDs (for allowing access to VPC endpoints) to use on all ingress rules",
			},
			"ingress_rules": {
				"default":     [],
				"description": "List of ingress rules to create by name",
			},
			"ingress_with_cidr_blocks": {
				"default":     [],
				"description": "List of ingress rules to create where 'cidr_blocks' is used",
			},
			"ingress_with_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of ingress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"ingress_with_self": {
				"default":     [],
				"description": "List of ingress rules to create where 'self' is defined",
			},
			"ingress_with_source_security_group_id": {
				"default":     [],
				"description": "List of ingress rules to create where 'source_security_group_id' is used",
			},
			"name": {
				"default":     null,
				"description": "Name of security group",
			},
			"number_of_computed_egress_cidr_blocks": {
				"default":     0,
				"description": "Number of IPv4 CIDR ranges to use on all computed egress rules",
			},
			"number_of_computed_egress_ipv6_cidr_blocks": {
				"default":     0,
				"description": "Number of IPv6 CIDR ranges to use on all computed egress rules",
			},
			"number_of_computed_egress_prefix_list_ids": {
				"default":     0,
				"description": "Number of prefix list IDs (for allowing access to VPC endpoints) to use on all computed egress rules",
			},
			"number_of_computed_egress_rules": {
				"default":     0,
				"description": "Number of computed egress rules to create by name",
			},
			"number_of_computed_egress_with_cidr_blocks": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'cidr_blocks' is used",
			},
			"number_of_computed_egress_with_ipv6_cidr_blocks": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"number_of_computed_egress_with_self": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'self' is defined",
			},
			"number_of_computed_egress_with_source_security_group_id": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'source_security_group_id' is used",
			},
			"number_of_computed_ingress_cidr_blocks": {
				"default":     0,
				"description": "Number of IPv4 CIDR ranges to use on all computed ingress rules",
			},
			"number_of_computed_ingress_ipv6_cidr_blocks": {
				"default":     0,
				"description": "Number of IPv6 CIDR ranges to use on all computed ingress rules",
			},
			"number_of_computed_ingress_prefix_list_ids": {
				"default":     0,
				"description": "Number of prefix list IDs (for allowing access to VPC endpoints) to use on all computed ingress rules",
			},
			"number_of_computed_ingress_rules": {
				"default":     0,
				"description": "Number of computed ingress rules to create by name",
			},
			"number_of_computed_ingress_with_cidr_blocks": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'cidr_blocks' is used",
			},
			"number_of_computed_ingress_with_ipv6_cidr_blocks": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"number_of_computed_ingress_with_self": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'self' is defined",
			},
			"number_of_computed_ingress_with_source_security_group_id": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'source_security_group_id' is used",
			},
			"revoke_rules_on_delete": {
				"default":     false,
				"description": "Instruct Terraform to revoke all of the Security Groups attached ingress and egress rules before deleting the rule itself. Enable for EMR.",
			},
			"tags": {
				"default":     {},
				"description": "A mapping of tags to assign to security group",
			},
			"use_name_prefix": {
				"default":     true,
				"description": "Whether to use name_prefix or fixed name. Should be true to able to update security group name after initial creation",
			},
			"vpc_id": {
				"default":     null,
				"description": "ID of the VPC where to create security group",
			},
		},
	},

	"module.app_security_group.module.sg": {
		"data":    {},
		"modules": {},
		"outputs": {
			"this_security_group_description": {
				"depends_on":  [],
				"description": "The description of the security group",
				"references": [
					"aws_security_group.this",
					"aws_security_group.this_name_prefix",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_security_group_id": {
				"depends_on":  [],
				"description": "The ID of the security group",
				"references": [
					"aws_security_group.this",
					"aws_security_group.this_name_prefix",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_security_group_name": {
				"depends_on":  [],
				"description": "The name of the security group",
				"references": [
					"aws_security_group.this",
					"aws_security_group.this_name_prefix",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_security_group_owner_id": {
				"depends_on":  [],
				"description": "The owner ID",
				"references": [
					"aws_security_group.this",
					"aws_security_group.this_name_prefix",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_security_group_vpc_id": {
				"depends_on":  [],
				"description": "The VPC ID",
				"references": [
					"aws_security_group.this",
					"aws_security_group.this_name_prefix",
				],
				"sensitive": false,
				"value":     undefined,
			},
		},
		"providers": {},
		"resources": {
			"aws_security_group": {
				"this": {
					"config":       {},
					"provisioners": null,
					"references": {
						"description": [
							"var.description",
						],
						"name": [
							"var.name",
						],
						"revoke_rules_on_delete": [
							"var.revoke_rules_on_delete",
						],
						"tags": [
							"var.name",
							"var.tags",
						],
						"vpc_id": [
							"var.vpc_id",
						],
					},
				},
				"this_name_prefix": {
					"config":       {},
					"provisioners": null,
					"references": {
						"description": [
							"var.description",
						],
						"name_prefix": [
							"var.name",
						],
						"revoke_rules_on_delete": [
							"var.revoke_rules_on_delete",
						],
						"tags": [
							"var.name",
							"var.tags",
						],
						"vpc_id": [
							"var.vpc_id",
						],
					},
				},
			},
			"aws_security_group_rule": {
				"computed_egress_rules": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"cidr_blocks": [
							"var.egress_cidr_blocks",
						],
						"description": [
							"var.rules",
							"var.computed_egress_rules",
							"count.index",
						],
						"from_port": [
							"var.rules",
							"var.computed_egress_rules",
							"count.index",
						],
						"ipv6_cidr_blocks": [
							"var.egress_ipv6_cidr_blocks",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.rules",
							"var.computed_egress_rules",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.rules",
							"var.computed_egress_rules",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_egress_with_cidr_blocks": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"cidr_blocks": [
							"var.computed_egress_with_cidr_blocks",
							"count.index",
							"var.egress_cidr_blocks",
						],
						"description": [
							"var.computed_egress_with_cidr_blocks",
							"count.index",
						],
						"from_port": [
							"var.computed_egress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_egress_with_cidr_blocks",
							"count.index",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.computed_egress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_egress_with_cidr_blocks",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.computed_egress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_egress_with_cidr_blocks",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_egress_with_ipv6_cidr_blocks": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.computed_egress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"from_port": [
							"var.computed_egress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_egress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"ipv6_cidr_blocks": [
							"var.computed_egress_with_ipv6_cidr_blocks",
							"count.index",
							"var.egress_ipv6_cidr_blocks",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.computed_egress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_egress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.computed_egress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_egress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_egress_with_self": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.computed_egress_with_self",
							"count.index",
						],
						"from_port": [
							"var.computed_egress_with_self",
							"count.index",
							"var.rules",
							"var.computed_egress_with_self",
							"count.index",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.computed_egress_with_self",
							"count.index",
							"var.rules",
							"var.computed_egress_with_self",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"self": [
							"var.computed_egress_with_self",
							"count.index",
						],
						"to_port": [
							"var.computed_egress_with_self",
							"count.index",
							"var.rules",
							"var.computed_egress_with_self",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_egress_with_source_security_group_id": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.computed_egress_with_source_security_group_id",
							"count.index",
						],
						"from_port": [
							"var.computed_egress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.computed_egress_with_source_security_group_id",
							"count.index",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.computed_egress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.computed_egress_with_source_security_group_id",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"source_security_group_id": [
							"var.computed_egress_with_source_security_group_id",
							"count.index",
						],
						"to_port": [
							"var.computed_egress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.computed_egress_with_source_security_group_id",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_ingress_rules": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"cidr_blocks": [
							"var.ingress_cidr_blocks",
						],
						"description": [
							"var.rules",
							"var.computed_ingress_rules",
							"count.index",
						],
						"from_port": [
							"var.rules",
							"var.computed_ingress_rules",
							"count.index",
						],
						"ipv6_cidr_blocks": [
							"var.ingress_ipv6_cidr_blocks",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.rules",
							"var.computed_ingress_rules",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.rules",
							"var.computed_ingress_rules",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_ingress_with_cidr_blocks": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"cidr_blocks": [
							"var.computed_ingress_with_cidr_blocks",
							"count.index",
							"var.ingress_cidr_blocks",
						],
						"description": [
							"var.computed_ingress_with_cidr_blocks",
							"count.index",
						],
						"from_port": [
							"var.computed_ingress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_cidr_blocks",
							"count.index",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.computed_ingress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_cidr_blocks",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.computed_ingress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_cidr_blocks",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_ingress_with_ipv6_cidr_blocks": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.computed_ingress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"from_port": [
							"var.computed_ingress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"ipv6_cidr_blocks": [
							"var.computed_ingress_with_ipv6_cidr_blocks",
							"count.index",
							"var.ingress_ipv6_cidr_blocks",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.computed_ingress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.computed_ingress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_ingress_with_self": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.computed_ingress_with_self",
							"count.index",
						],
						"from_port": [
							"var.computed_ingress_with_self",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_self",
							"count.index",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.computed_ingress_with_self",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_self",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"self": [
							"var.computed_ingress_with_self",
							"count.index",
						],
						"to_port": [
							"var.computed_ingress_with_self",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_self",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_ingress_with_source_security_group_id": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.computed_ingress_with_source_security_group_id",
							"count.index",
						],
						"from_port": [
							"var.computed_ingress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_source_security_group_id",
							"count.index",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.computed_ingress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_source_security_group_id",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"source_security_group_id": [
							"var.computed_ingress_with_source_security_group_id",
							"count.index",
						],
						"to_port": [
							"var.computed_ingress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_source_security_group_id",
							"count.index",
						],
						"type": [],
					},
				},
				"egress_rules": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"cidr_blocks": [
							"var.egress_cidr_blocks",
						],
						"description": [
							"var.rules",
							"var.egress_rules",
							"count.index",
						],
						"from_port": [
							"var.rules",
							"var.egress_rules",
							"count.index",
						],
						"ipv6_cidr_blocks": [
							"var.egress_ipv6_cidr_blocks",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.rules",
							"var.egress_rules",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.rules",
							"var.egress_rules",
							"count.index",
						],
						"type": [],
					},
				},
				"egress_with_cidr_blocks": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"cidr_blocks": [
							"var.egress_with_cidr_blocks",
							"count.index",
							"var.egress_cidr_blocks",
						],
						"description": [
							"var.egress_with_cidr_blocks",
							"count.index",
						],
						"from_port": [
							"var.egress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.egress_with_cidr_blocks",
							"count.index",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.egress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.egress_with_cidr_blocks",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.egress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.egress_with_cidr_blocks",
							"count.index",
						],
						"type": [],
					},
				},
				"egress_with_ipv6_cidr_blocks": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.egress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"from_port": [
							"var.egress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.egress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"ipv6_cidr_blocks": [
							"var.egress_with_ipv6_cidr_blocks",
							"count.index",
							"var.egress_ipv6_cidr_blocks",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.egress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.egress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.egress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.egress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"type": [],
					},
				},
				"egress_with_self": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.egress_with_self",
							"count.index",
						],
						"from_port": [
							"var.egress_with_self",
							"count.index",
							"var.rules",
							"var.egress_with_self",
							"count.index",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.egress_with_self",
							"count.index",
							"var.rules",
							"var.egress_with_self",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"self": [
							"var.egress_with_self",
							"count.index",
						],
						"to_port": [
							"var.egress_with_self",
							"count.index",
							"var.rules",
							"var.egress_with_self",
							"count.index",
						],
						"type": [],
					},
				},
				"egress_with_source_security_group_id": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.egress_with_source_security_group_id",
							"count.index",
						],
						"from_port": [
							"var.egress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.egress_with_source_security_group_id",
							"count.index",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.egress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.egress_with_source_security_group_id",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"source_security_group_id": [
							"var.egress_with_source_security_group_id",
							"count.index",
						],
						"to_port": [
							"var.egress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.egress_with_source_security_group_id",
							"count.index",
						],
						"type": [],
					},
				},
				"ingress_rules": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"cidr_blocks": [
							"var.ingress_cidr_blocks",
						],
						"description": [
							"var.rules",
							"var.ingress_rules",
							"count.index",
						],
						"from_port": [
							"var.rules",
							"var.ingress_rules",
							"count.index",
						],
						"ipv6_cidr_blocks": [
							"var.ingress_ipv6_cidr_blocks",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.rules",
							"var.ingress_rules",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.rules",
							"var.ingress_rules",
							"count.index",
						],
						"type": [],
					},
				},
				"ingress_with_cidr_blocks": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"cidr_blocks": [
							"var.ingress_with_cidr_blocks",
							"count.index",
							"var.ingress_cidr_blocks",
						],
						"description": [
							"var.ingress_with_cidr_blocks",
							"count.index",
						],
						"from_port": [
							"var.ingress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.ingress_with_cidr_blocks",
							"count.index",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.ingress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.ingress_with_cidr_blocks",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.ingress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.ingress_with_cidr_blocks",
							"count.index",
						],
						"type": [],
					},
				},
				"ingress_with_ipv6_cidr_blocks": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.ingress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"from_port": [
							"var.ingress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.ingress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"ipv6_cidr_blocks": [
							"var.ingress_with_ipv6_cidr_blocks",
							"count.index",
							"var.ingress_ipv6_cidr_blocks",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.ingress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.ingress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.ingress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.ingress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"type": [],
					},
				},
				"ingress_with_self": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.ingress_with_self",
							"count.index",
						],
						"from_port": [
							"var.ingress_with_self",
							"count.index",
							"var.rules",
							"var.ingress_with_self",
							"count.index",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.ingress_with_self",
							"count.index",
							"var.rules",
							"var.ingress_with_self",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"self": [
							"var.ingress_with_self",
							"count.index",
						],
						"to_port": [
							"var.ingress_with_self",
							"count.index",
							"var.rules",
							"var.ingress_with_self",
							"count.index",
						],
						"type": [],
					},
				},
				"ingress_with_source_security_group_id": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.ingress_with_source_security_group_id",
							"count.index",
						],
						"from_port": [
							"var.ingress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.ingress_with_source_security_group_id",
							"count.index",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.ingress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.ingress_with_source_security_group_id",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"source_security_group_id": [
							"var.ingress_with_source_security_group_id",
							"count.index",
						],
						"to_port": [
							"var.ingress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.ingress_with_source_security_group_id",
							"count.index",
						],
						"type": [],
					},
				},
			},
		},
		"variables": {
			"auto_groups": {
				"default": {
					"activemq": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"activemq-5671-tcp",
							"activemq-8883-tcp",
							"activemq-61614-tcp",
							"activemq-61617-tcp",
							"activemq-61619-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"alertmanager": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"alertmanager-9093-tcp",
							"alertmanager-9094-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"carbon-relay-ng": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"carbon-line-in-tcp",
							"carbon-line-in-udp",
							"carbon-pickle-tcp",
							"carbon-pickle-udp",
							"carbon-gui-udp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"cassandra": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"cassandra-clients-tcp",
							"cassandra-thrift-clients-tcp",
							"cassandra-jmx-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"consul": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"consul-tcp",
							"consul-cli-rpc-tcp",
							"consul-webui-tcp",
							"consul-dns-tcp",
							"consul-dns-udp",
							"consul-serf-lan-tcp",
							"consul-serf-lan-udp",
							"consul-serf-wan-tcp",
							"consul-serf-wan-udp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"docker-swarm": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"docker-swarm-mngmt-tcp",
							"docker-swarm-node-tcp",
							"docker-swarm-node-udp",
							"docker-swarm-overlay-udp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"elasticsearch": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"elasticsearch-rest-tcp",
							"elasticsearch-java-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"grafana": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"grafana-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"graphite-statsd": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"graphite-webui",
							"graphite-2003-tcp",
							"graphite-2004-tcp",
							"graphite-2023-tcp",
							"graphite-2024-tcp",
							"graphite-8080-tcp",
							"graphite-8125-tcp",
							"graphite-8125-udp",
							"graphite-8126-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"http-80": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"http-80-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"http-8080": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"http-8080-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"https-443": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"https-443-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"https-8443": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"https-8443-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"ipsec-4500": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"ipsec-4500-udp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"ipsec-500": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"ipsec-500-udp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"kafka": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"kafka-broker-tcp",
							"kafka-broker-tls-tcp",
							"kafka-jmx-exporter-tcp",
							"kafka-node-exporter-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"kibana": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"kibana-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"kubernetes-api": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"kubernetes-api-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"ldap": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"ldap-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"ldaps": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"ldaps-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"logstash": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"logstash-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"memcached": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"memcached-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"minio": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"minio-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"mongodb": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"mongodb-27017-tcp",
							"mongodb-27018-tcp",
							"mongodb-27019-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"mssql": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"mssql-tcp",
							"mssql-udp",
							"mssql-analytics-tcp",
							"mssql-broker-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"mysql": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"mysql-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"nfs": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"nfs-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"nomad": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"nomad-http-tcp",
							"nomad-rpc-tcp",
							"nomad-serf-tcp",
							"nomad-serf-udp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"ntp": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"ntp-udp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"openvpn": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"openvpn-udp",
							"openvpn-tcp",
							"openvpn-https-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"oracle-db": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"oracle-db-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"postgresql": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"postgresql-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"prometheus": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"prometheus-http-tcp",
							"prometheus-pushgateway-http-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"puppet": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"puppet-tcp",
							"puppetdb-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"rabbitmq": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"rabbitmq-4369-tcp",
							"rabbitmq-5671-tcp",
							"rabbitmq-5672-tcp",
							"rabbitmq-15672-tcp",
							"rabbitmq-25672-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"rdp": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"rdp-tcp",
							"rdp-udp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"redis": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"redis-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"redshift": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"redshift-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"solr": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"solr-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"splunk": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"splunk-indexer-tcp",
							"splunk-clients-tcp",
							"splunk-splunkd-tcp",
							"splunk-hec-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"squid": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"squid-proxy-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"ssh": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"ssh-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"storm": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"storm-nimbus-tcp",
							"storm-ui-tcp",
							"storm-supervisor-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"web": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"http-80-tcp",
							"http-8080-tcp",
							"https-443-tcp",
							"web-jmx-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"winrm": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"winrm-http-tcp",
							"winrm-https-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"zipkin": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"zipkin-admin-tcp",
							"zipkin-admin-query-tcp",
							"zipkin-admin-web-tcp",
							"zipkin-query-tcp",
							"zipkin-web-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"zookeeper": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"zookeeper-2181-tcp",
							"zookeeper-2888-tcp",
							"zookeeper-3888-tcp",
							"zookeeper-jmx-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
				},
				"description": "Map of groups of security group rules to use to generate modules (see update_groups.sh)",
			},
			"computed_egress_rules": {
				"default":     [],
				"description": "List of computed egress rules to create by name",
			},
			"computed_egress_with_cidr_blocks": {
				"default":     [],
				"description": "List of computed egress rules to create where 'cidr_blocks' is used",
			},
			"computed_egress_with_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of computed egress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"computed_egress_with_self": {
				"default":     [],
				"description": "List of computed egress rules to create where 'self' is defined",
			},
			"computed_egress_with_source_security_group_id": {
				"default":     [],
				"description": "List of computed egress rules to create where 'source_security_group_id' is used",
			},
			"computed_ingress_rules": {
				"default":     [],
				"description": "List of computed ingress rules to create by name",
			},
			"computed_ingress_with_cidr_blocks": {
				"default":     [],
				"description": "List of computed ingress rules to create where 'cidr_blocks' is used",
			},
			"computed_ingress_with_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of computed ingress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"computed_ingress_with_self": {
				"default":     [],
				"description": "List of computed ingress rules to create where 'self' is defined",
			},
			"computed_ingress_with_source_security_group_id": {
				"default":     [],
				"description": "List of computed ingress rules to create where 'source_security_group_id' is used",
			},
			"create": {
				"default":     true,
				"description": "Whether to create security group and all rules",
			},
			"description": {
				"default":     "Security Group managed by Terraform",
				"description": "Description of security group",
			},
			"egress_cidr_blocks": {
				"default": [
					"0.0.0.0/0",
				],
				"description": "List of IPv4 CIDR ranges to use on all egress rules",
			},
			"egress_ipv6_cidr_blocks": {
				"default": [
					"::/0",
				],
				"description": "List of IPv6 CIDR ranges to use on all egress rules",
			},
			"egress_prefix_list_ids": {
				"default":     [],
				"description": "List of prefix list IDs (for allowing access to VPC endpoints) to use on all egress rules",
			},
			"egress_rules": {
				"default":     [],
				"description": "List of egress rules to create by name",
			},
			"egress_with_cidr_blocks": {
				"default":     [],
				"description": "List of egress rules to create where 'cidr_blocks' is used",
			},
			"egress_with_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of egress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"egress_with_self": {
				"default":     [],
				"description": "List of egress rules to create where 'self' is defined",
			},
			"egress_with_source_security_group_id": {
				"default":     [],
				"description": "List of egress rules to create where 'source_security_group_id' is used",
			},
			"ingress_cidr_blocks": {
				"default":     [],
				"description": "List of IPv4 CIDR ranges to use on all ingress rules",
			},
			"ingress_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of IPv6 CIDR ranges to use on all ingress rules",
			},
			"ingress_prefix_list_ids": {
				"default":     [],
				"description": "List of prefix list IDs (for allowing access to VPC endpoints) to use on all ingress rules",
			},
			"ingress_rules": {
				"default":     [],
				"description": "List of ingress rules to create by name",
			},
			"ingress_with_cidr_blocks": {
				"default":     [],
				"description": "List of ingress rules to create where 'cidr_blocks' is used",
			},
			"ingress_with_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of ingress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"ingress_with_self": {
				"default":     [],
				"description": "List of ingress rules to create where 'self' is defined",
			},
			"ingress_with_source_security_group_id": {
				"default":     [],
				"description": "List of ingress rules to create where 'source_security_group_id' is used",
			},
			"name": {
				"default":     null,
				"description": "Name of security group",
			},
			"number_of_computed_egress_rules": {
				"default":     0,
				"description": "Number of computed egress rules to create by name",
			},
			"number_of_computed_egress_with_cidr_blocks": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'cidr_blocks' is used",
			},
			"number_of_computed_egress_with_ipv6_cidr_blocks": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"number_of_computed_egress_with_self": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'self' is defined",
			},
			"number_of_computed_egress_with_source_security_group_id": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'source_security_group_id' is used",
			},
			"number_of_computed_ingress_rules": {
				"default":     0,
				"description": "Number of computed ingress rules to create by name",
			},
			"number_of_computed_ingress_with_cidr_blocks": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'cidr_blocks' is used",
			},
			"number_of_computed_ingress_with_ipv6_cidr_blocks": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"number_of_computed_ingress_with_self": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'self' is defined",
			},
			"number_of_computed_ingress_with_source_security_group_id": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'source_security_group_id' is used",
			},
			"revoke_rules_on_delete": {
				"default":     false,
				"description": "Instruct Terraform to revoke all of the Security Groups attached ingress and egress rules before deleting the rule itself. Enable for EMR.",
			},
			"rules": {
				"default": {
					"_": [
						"",
						"",
						"",
					],
					"activemq-5671-tcp": [
						"5671",
						"5671",
						"tcp",
						"ActiveMQ AMQP",
					],
					"activemq-61614-tcp": [
						"61614",
						"61614",
						"tcp",
						"ActiveMQ STOMP",
					],
					"activemq-61617-tcp": [
						"61617",
						"61617",
						"tcp",
						"ActiveMQ OpenWire",
					],
					"activemq-61619-tcp": [
						"61619",
						"61619",
						"tcp",
						"ActiveMQ WebSocket",
					],
					"activemq-8883-tcp": [
						"8883",
						"8883",
						"tcp",
						"ActiveMQ MQTT",
					],
					"alertmanager-9093-tcp": [
						"9093",
						"9093",
						"tcp",
						"Alert Manager",
					],
					"alertmanager-9094-tcp": [
						"9094",
						"9094",
						"tcp",
						"Alert Manager Cluster",
					],
					"all-all": [
						"-1",
						"-1",
						"-1",
						"All protocols",
					],
					"all-icmp": [
						"-1",
						"-1",
						"icmp",
						"All IPV4 ICMP",
					],
					"all-ipv6-icmp": [
						"-1",
						"-1",
						"58",
						"All IPV6 ICMP",
					],
					"all-tcp": [
						"0",
						"65535",
						"tcp",
						"All TCP ports",
					],
					"all-udp": [
						"0",
						"65535",
						"udp",
						"All UDP ports",
					],
					"carbon-admin-tcp": [
						"2004",
						"2004",
						"tcp",
						"Carbon admin",
					],
					"carbon-gui-udp": [
						"8081",
						"8081",
						"tcp",
						"Carbon GUI",
					],
					"carbon-line-in-tcp": [
						"2003",
						"2003",
						"tcp",
						"Carbon line-in",
					],
					"carbon-line-in-udp": [
						"2003",
						"2003",
						"udp",
						"Carbon line-in",
					],
					"carbon-pickle-tcp": [
						"2013",
						"2013",
						"tcp",
						"Carbon pickle",
					],
					"carbon-pickle-udp": [
						"2013",
						"2013",
						"udp",
						"Carbon pickle",
					],
					"cassandra-clients-tcp": [
						"9042",
						"9042",
						"tcp",
						"Cassandra clients",
					],
					"cassandra-jmx-tcp": [
						"7199",
						"7199",
						"tcp",
						"JMX",
					],
					"cassandra-thrift-clients-tcp": [
						"9160",
						"9160",
						"tcp",
						"Cassandra Thrift clients",
					],
					"consul-cli-rpc-tcp": [
						"8400",
						"8400",
						"tcp",
						"Consul CLI RPC",
					],
					"consul-dns-tcp": [
						"8600",
						"8600",
						"tcp",
						"Consul DNS",
					],
					"consul-dns-udp": [
						"8600",
						"8600",
						"udp",
						"Consul DNS",
					],
					"consul-serf-lan-tcp": [
						"8301",
						"8301",
						"tcp",
						"Serf LAN",
					],
					"consul-serf-lan-udp": [
						"8301",
						"8301",
						"udp",
						"Serf LAN",
					],
					"consul-serf-wan-tcp": [
						"8302",
						"8302",
						"tcp",
						"Serf WAN",
					],
					"consul-serf-wan-udp": [
						"8302",
						"8302",
						"udp",
						"Serf WAN",
					],
					"consul-tcp": [
						"8300",
						"8300",
						"tcp",
						"Consul server",
					],
					"consul-webui-tcp": [
						"8500",
						"8500",
						"tcp",
						"Consul web UI",
					],
					"dns-tcp": [
						"53",
						"53",
						"tcp",
						"DNS",
					],
					"dns-udp": [
						"53",
						"53",
						"udp",
						"DNS",
					],
					"docker-swarm-mngmt-tcp": [
						"2377",
						"2377",
						"tcp",
						"Docker Swarm cluster management",
					],
					"docker-swarm-node-tcp": [
						"7946",
						"7946",
						"tcp",
						"Docker Swarm node",
					],
					"docker-swarm-node-udp": [
						"7946",
						"7946",
						"udp",
						"Docker Swarm node",
					],
					"docker-swarm-overlay-udp": [
						"4789",
						"4789",
						"udp",
						"Docker Swarm Overlay Network Traffic",
					],
					"elasticsearch-java-tcp": [
						"9300",
						"9300",
						"tcp",
						"Elasticsearch Java interface",
					],
					"elasticsearch-rest-tcp": [
						"9200",
						"9200",
						"tcp",
						"Elasticsearch REST interface",
					],
					"grafana-tcp": [
						"3000",
						"3000",
						"tcp",
						"Grafana Dashboard",
					],
					"graphite-2003-tcp": [
						"2003",
						"2003",
						"tcp",
						"Carbon receiver plain text",
					],
					"graphite-2004-tcp": [
						"2004",
						"2004",
						"tcp",
						"Carbon receiver pickle",
					],
					"graphite-2023-tcp": [
						"2023",
						"2023",
						"tcp",
						"Carbon aggregator plaintext",
					],
					"graphite-2024-tcp": [
						"2024",
						"2024",
						"tcp",
						"Carbon aggregator pickle",
					],
					"graphite-8080-tcp": [
						"8080",
						"8080",
						"tcp",
						"Graphite gunicorn port",
					],
					"graphite-8125-tcp": [
						"8125",
						"8125",
						"tcp",
						"Statsd TCP",
					],
					"graphite-8125-udp": [
						"8125",
						"8125",
						"udp",
						"Statsd UDP default",
					],
					"graphite-8126-tcp": [
						"8126",
						"8126",
						"tcp",
						"Statsd admin",
					],
					"graphite-webui": [
						"80",
						"80",
						"tcp",
						"Graphite admin interface",
					],
					"http-80-tcp": [
						"80",
						"80",
						"tcp",
						"HTTP",
					],
					"http-8080-tcp": [
						"8080",
						"8080",
						"tcp",
						"HTTP",
					],
					"https-443-tcp": [
						"443",
						"443",
						"tcp",
						"HTTPS",
					],
					"https-8443-tcp": [
						"8443",
						"8443",
						"tcp",
						"HTTPS",
					],
					"ipsec-4500-udp": [
						"4500",
						"4500",
						"udp",
						"IPSEC NAT-T",
					],
					"ipsec-500-udp": [
						"500",
						"500",
						"udp",
						"IPSEC ISAKMP",
					],
					"kafka-broker-tcp": [
						"9092",
						"9092",
						"tcp",
						"Kafka broker 0.8.2+",
					],
					"kafka-broker-tls-tcp": [
						"9094",
						"9094",
						"tcp",
						"Kafka TLS enabled broker 0.8.2+",
					],
					"kafka-jmx-exporter-tcp": [
						"11001",
						"11001",
						"tcp",
						"Kafka JMX Exporter",
					],
					"kafka-node-exporter-tcp": [
						"11002",
						"11002",
						"tcp",
						"Kafka Node Exporter",
					],
					"kibana-tcp": [
						"5601",
						"5601",
						"tcp",
						"Kibana Web Interface",
					],
					"kubernetes-api-tcp": [
						"6443",
						"6443",
						"tcp",
						"Kubernetes API Server",
					],
					"ldap-tcp": [
						"389",
						"389",
						"tcp",
						"LDAP",
					],
					"ldaps-tcp": [
						"636",
						"636",
						"tcp",
						"LDAPS",
					],
					"logstash-tcp": [
						"5044",
						"5044",
						"tcp",
						"Logstash",
					],
					"memcached-tcp": [
						"11211",
						"11211",
						"tcp",
						"Memcached",
					],
					"minio-tcp": [
						"9000",
						"9000",
						"tcp",
						"MinIO",
					],
					"mongodb-27017-tcp": [
						"27017",
						"27017",
						"tcp",
						"MongoDB",
					],
					"mongodb-27018-tcp": [
						"27018",
						"27018",
						"tcp",
						"MongoDB shard",
					],
					"mongodb-27019-tcp": [
						"27019",
						"27019",
						"tcp",
						"MongoDB config server",
					],
					"mssql-analytics-tcp": [
						"2383",
						"2383",
						"tcp",
						"MSSQL Analytics",
					],
					"mssql-broker-tcp": [
						"4022",
						"4022",
						"tcp",
						"MSSQL Broker",
					],
					"mssql-tcp": [
						"1433",
						"1433",
						"tcp",
						"MSSQL Server",
					],
					"mssql-udp": [
						"1434",
						"1434",
						"udp",
						"MSSQL Browser",
					],
					"mysql-tcp": [
						"3306",
						"3306",
						"tcp",
						"MySQL/Aurora",
					],
					"nfs-tcp": [
						"2049",
						"2049",
						"tcp",
						"NFS/EFS",
					],
					"nomad-http-tcp": [
						"4646",
						"4646",
						"tcp",
						"Nomad HTTP",
					],
					"nomad-rpc-tcp": [
						"4647",
						"4647",
						"tcp",
						"Nomad RPC",
					],
					"nomad-serf-tcp": [
						"4648",
						"4648",
						"tcp",
						"Serf",
					],
					"nomad-serf-udp": [
						"4648",
						"4648",
						"udp",
						"Serf",
					],
					"ntp-udp": [
						"123",
						"123",
						"udp",
						"NTP",
					],
					"openvpn-https-tcp": [
						"443",
						"443",
						"tcp",
						"OpenVPN",
					],
					"openvpn-tcp": [
						"943",
						"943",
						"tcp",
						"OpenVPN",
					],
					"openvpn-udp": [
						"1194",
						"1194",
						"udp",
						"OpenVPN",
					],
					"oracle-db-tcp": [
						"1521",
						"1521",
						"tcp",
						"Oracle",
					],
					"postgresql-tcp": [
						"5432",
						"5432",
						"tcp",
						"PostgreSQL",
					],
					"prometheus-http-tcp": [
						"9090",
						"9090",
						"tcp",
						"Prometheus",
					],
					"prometheus-pushgateway-http-tcp": [
						"9091",
						"9091",
						"tcp",
						"Prometheus Pushgateway",
					],
					"puppet-tcp": [
						"8140",
						"8140",
						"tcp",
						"Puppet",
					],
					"puppetdb-tcp": [
						"8081",
						"8081",
						"tcp",
						"PuppetDB",
					],
					"rabbitmq-15672-tcp": [
						"15672",
						"15672",
						"tcp",
						"RabbitMQ",
					],
					"rabbitmq-25672-tcp": [
						"25672",
						"25672",
						"tcp",
						"RabbitMQ",
					],
					"rabbitmq-4369-tcp": [
						"4369",
						"4369",
						"tcp",
						"RabbitMQ epmd",
					],
					"rabbitmq-5671-tcp": [
						"5671",
						"5671",
						"tcp",
						"RabbitMQ",
					],
					"rabbitmq-5672-tcp": [
						"5672",
						"5672",
						"tcp",
						"RabbitMQ",
					],
					"rdp-tcp": [
						"3389",
						"3389",
						"tcp",
						"Remote Desktop",
					],
					"rdp-udp": [
						"3389",
						"3389",
						"udp",
						"Remote Desktop",
					],
					"redis-tcp": [
						"6379",
						"6379",
						"tcp",
						"Redis",
					],
					"redshift-tcp": [
						"5439",
						"5439",
						"tcp",
						"Redshift",
					],
					"solr-tcp": [
						"8983",
						"8987",
						"tcp",
						"Solr",
					],
					"splunk-hec-tcp": [
						"8088",
						"8088",
						"tcp",
						"Splunk HEC",
					],
					"splunk-indexer-tcp": [
						"9997",
						"9997",
						"tcp",
						"Splunk indexer",
					],
					"splunk-splunkd-tcp": [
						"8089",
						"8089",
						"tcp",
						"Splunkd",
					],
					"splunk-web-tcp": [
						"8000",
						"8000",
						"tcp",
						"Splunk Web",
					],
					"squid-proxy-tcp": [
						"3128",
						"3128",
						"tcp",
						"Squid default proxy",
					],
					"ssh-tcp": [
						"22",
						"22",
						"tcp",
						"SSH",
					],
					"storm-nimbus-tcp": [
						"6627",
						"6627",
						"tcp",
						"Nimbus",
					],
					"storm-supervisor-tcp": [
						"6700",
						"6703",
						"tcp",
						"Supervisor",
					],
					"storm-ui-tcp": [
						"8080",
						"8080",
						"tcp",
						"Storm UI",
					],
					"web-jmx-tcp": [
						"1099",
						"1099",
						"tcp",
						"JMX",
					],
					"winrm-http-tcp": [
						"5985",
						"5985",
						"tcp",
						"WinRM HTTP",
					],
					"winrm-https-tcp": [
						"5986",
						"5986",
						"tcp",
						"WinRM HTTPS",
					],
					"zipkin-admin-query-tcp": [
						"9901",
						"9901",
						"tcp",
						"Zipkin Admin port query",
					],
					"zipkin-admin-tcp": [
						"9990",
						"9990",
						"tcp",
						"Zipkin Admin port collector",
					],
					"zipkin-admin-web-tcp": [
						"9991",
						"9991",
						"tcp",
						"Zipkin Admin port web",
					],
					"zipkin-query-tcp": [
						"9411",
						"9411",
						"tcp",
						"Zipkin query port",
					],
					"zipkin-web-tcp": [
						"8080",
						"8080",
						"tcp",
						"Zipkin web port",
					],
					"zookeeper-2181-tcp": [
						"2181",
						"2181",
						"tcp",
						"Zookeeper",
					],
					"zookeeper-2888-tcp": [
						"2888",
						"2888",
						"tcp",
						"Zookeeper",
					],
					"zookeeper-3888-tcp": [
						"3888",
						"3888",
						"tcp",
						"Zookeeper",
					],
					"zookeeper-jmx-tcp": [
						"7199",
						"7199",
						"tcp",
						"JMX",
					],
				},
				"description": "Map of known security group rules (define as 'name' = ['from port', 'to port', 'protocol', 'description'])",
			},
			"tags": {
				"default":     {},
				"description": "A mapping of tags to assign to security group",
			},
			"use_name_prefix": {
				"default":     true,
				"description": "Whether to use name_prefix or fixed name. Should be true to able to update security group name after initial creation",
			},
			"vpc_id": {
				"default":     null,
				"description": "ID of the VPC where to create security group",
			},
		},
	},

	"module.ec2_instances": {
		"data": {
			"aws_ami": {
				"amazon_linux": {
					"config": {
						"filter": [
							{
								"name": "name",
								"values": [
									"amzn2-ami-hvm-*-x86_64-gp2",
								],
							},
						],
						"most_recent": true,
						"owners": [
							"amazon",
						],
					},
					"provisioners": null,
					"references": {
						"filter": [
							{
								"name":   [],
								"values": [],
							},
						],
						"most_recent": [],
						"owners":      [],
					},
				},
			},
		},
		"modules": {},
		"outputs": {
			"instance_ids": {
				"depends_on":  [],
				"description": "IDs of EC2 instances",
				"references": [
					"aws_instance.app",
				],
				"sensitive": false,
				"value":     undefined,
			},
		},
		"providers": {},
		"resources": {
			"aws_instance": {
				"app": {
					"config": {
						"user_data": "#!/bin/bash\nsudo yum update -y\nsudo yum install httpd -y\nsudo systemctl enable httpd\nsudo systemctl start httpd\necho \"<html><body><div>Hello, world!</div></body></html>\" > /var/www/html/index.html\n",
					},
					"provisioners": null,
					"references": {
						"ami": [
							"data.aws_ami.amazon_linux.id",
							"data.aws_ami.amazon_linux",
						],
						"instance_type": [
							"var.instance_type",
						],
						"subnet_id": [
							"var.subnet_ids",
							"count.index",
							"var.subnet_ids",
						],
						"tags": [
							"var.tags",
						],
						"user_data": [],
						"vpc_security_group_ids": [
							"var.security_group_ids",
						],
					},
				},
			},
		},
		"variables": {
			"instance_count": {
				"default":     null,
				"description": "Number of EC2 instances to deploy",
			},
			"instance_type": {
				"default":     null,
				"description": "Type of EC2 instance to use",
			},
			"security_group_ids": {
				"default":     null,
				"description": "Security group IDs for EC2 instances",
			},
			"subnet_ids": {
				"default":     null,
				"description": "Subnet IDs for EC2 instances",
			},
			"tags": {
				"default":     {},
				"description": "Tags for instances",
			},
		},
	},

	"module.elb_http": {
		"data": {},
		"modules": {
			"elb": {
				"config": {},
				"references": {
					"access_logs": [
						"var.access_logs",
					],
					"connection_draining": [
						"var.connection_draining",
					],
					"connection_draining_timeout": [
						"var.connection_draining_timeout",
					],
					"create_elb": [
						"var.create_elb",
					],
					"cross_zone_load_balancing": [
						"var.cross_zone_load_balancing",
					],
					"health_check": [
						"var.health_check",
					],
					"idle_timeout": [
						"var.idle_timeout",
					],
					"internal": [
						"var.internal",
					],
					"listener": [
						"var.listener",
					],
					"name": [
						"var.name",
					],
					"name_prefix": [
						"var.name_prefix",
					],
					"security_groups": [
						"var.security_groups",
					],
					"subnets": [
						"var.subnets",
					],
					"tags": [
						"var.tags",
						"var.name",
					],
				},
				"source":  "./modules/elb",
				"version": "",
			},
			"elb_attachment": {
				"config": {},
				"references": {
					"create_attachment": [
						"var.create_elb",
					],
					"elb": [
						"module.elb.this_elb_id",
						"module.elb",
					],
					"instances": [
						"var.instances",
					],
					"number_of_instances": [
						"var.number_of_instances",
					],
				},
				"source":  "./modules/elb_attachment",
				"version": "",
			},
		},
		"outputs": {
			"this_elb_arn": {
				"depends_on":  [],
				"description": "The ARN of the ELB",
				"references": [
					"module.elb.this_elb_arn",
					"module.elb",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_elb_dns_name": {
				"depends_on":  [],
				"description": "The DNS name of the ELB",
				"references": [
					"module.elb.this_elb_dns_name",
					"module.elb",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_elb_id": {
				"depends_on":  [],
				"description": "The name of the ELB",
				"references": [
					"module.elb.this_elb_id",
					"module.elb",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_elb_instances": {
				"depends_on":  [],
				"description": "The list of instances in the ELB",
				"references": [
					"module.elb.this_elb_instances",
					"module.elb",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_elb_name": {
				"depends_on":  [],
				"description": "The name of the ELB",
				"references": [
					"module.elb.this_elb_name",
					"module.elb",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_elb_source_security_group_id": {
				"depends_on":  [],
				"description": "The ID of the security group that you can use as part of your inbound rules for your load balancer's back-end application instances",
				"references": [
					"module.elb.this_elb_source_security_group_id",
					"module.elb",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_elb_zone_id": {
				"depends_on":  [],
				"description": "The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)",
				"references": [
					"module.elb.this_elb_zone_id",
					"module.elb",
				],
				"sensitive": false,
				"value":     undefined,
			},
		},
		"providers": {},
		"resources": {},
		"variables": {
			"access_logs": {
				"default":     {},
				"description": "An access logs block",
			},
			"connection_draining": {
				"default":     false,
				"description": "Boolean to enable connection draining",
			},
			"connection_draining_timeout": {
				"default":     300,
				"description": "The time in seconds to allow for connections to drain",
			},
			"create_elb": {
				"default":     true,
				"description": "Create the elb or not",
			},
			"cross_zone_load_balancing": {
				"default":     true,
				"description": "Enable cross-zone load balancing",
			},
			"health_check": {
				"default":     null,
				"description": "A health check block",
			},
			"idle_timeout": {
				"default":     60,
				"description": "The time in seconds that the connection is allowed to be idle",
			},
			"instances": {
				"default":     [],
				"description": "List of instances ID to place in the ELB pool",
			},
			"internal": {
				"default":     false,
				"description": "If true, ELB will be an internal ELB",
			},
			"listener": {
				"default":     null,
				"description": "A list of listener blocks",
			},
			"name": {
				"default":     null,
				"description": "The name of the ELB",
			},
			"name_prefix": {
				"default":     null,
				"description": "The prefix name of the ELB",
			},
			"number_of_instances": {
				"default":     0,
				"description": "Number of instances to attach to ELB",
			},
			"security_groups": {
				"default":     null,
				"description": "A list of security group IDs to assign to the ELB",
			},
			"subnets": {
				"default":     null,
				"description": "A list of subnet IDs to attach to the ELB",
			},
			"tags": {
				"default":     {},
				"description": "A mapping of tags to assign to the resource",
			},
		},
	},

	"module.elb_http.module.elb": {
		"data":    {},
		"modules": {},
		"outputs": {
			"this_elb_arn": {
				"depends_on":  [],
				"description": "The ARN of the ELB",
				"references": [
					"aws_elb.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_elb_dns_name": {
				"depends_on":  [],
				"description": "The DNS name of the ELB",
				"references": [
					"aws_elb.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_elb_id": {
				"depends_on":  [],
				"description": "The name of the ELB",
				"references": [
					"aws_elb.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_elb_instances": {
				"depends_on":  [],
				"description": "The list of instances in the ELB",
				"references": [
					"aws_elb.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_elb_name": {
				"depends_on":  [],
				"description": "The name of the ELB",
				"references": [
					"aws_elb.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_elb_source_security_group": {
				"depends_on":  [],
				"description": "The name of the security group that you can use as part of your inbound rules for your load balancer's back-end application instances. Use this for Classic or Default VPC only.",
				"references": [
					"aws_elb.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_elb_source_security_group_id": {
				"depends_on":  [],
				"description": "The ID of the security group that you can use as part of your inbound rules for your load balancer's back-end application instances. Only available on ELBs launched in a VPC.",
				"references": [
					"aws_elb.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_elb_zone_id": {
				"depends_on":  [],
				"description": "The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)",
				"references": [
					"aws_elb.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
		},
		"providers": {
			"aws": {
				"alias": {
					"": {
						"config":     {},
						"references": {},
						"version":    "",
					},
				},
				"config":     {},
				"references": {},
				"version":    "",
			},
		},
		"resources": {
			"aws_elb": {
				"this": {
					"config": {
						"health_check": [
							{},
						],
					},
					"provisioners": null,
					"references": {
						"connection_draining": [
							"var.connection_draining",
						],
						"connection_draining_timeout": [
							"var.connection_draining_timeout",
						],
						"cross_zone_load_balancing": [
							"var.cross_zone_load_balancing",
						],
						"health_check": [
							{
								"healthy_threshold": [
									"var.health_check",
								],
								"interval": [
									"var.health_check",
								],
								"target": [
									"var.health_check",
								],
								"timeout": [
									"var.health_check",
								],
								"unhealthy_threshold": [
									"var.health_check",
								],
							},
						],
						"idle_timeout": [
							"var.idle_timeout",
						],
						"internal": [
							"var.internal",
						],
						"name": [
							"var.name",
						],
						"name_prefix": [
							"var.name_prefix",
						],
						"security_groups": [
							"var.security_groups",
						],
						"subnets": [
							"var.subnets",
						],
						"tags": [
							"var.tags",
							"var.name",
						],
					},
				},
			},
		},
		"variables": {
			"access_logs": {
				"default":     {},
				"description": "An access logs block",
			},
			"connection_draining": {
				"default":     false,
				"description": "Boolean to enable connection draining",
			},
			"connection_draining_timeout": {
				"default":     300,
				"description": "The time in seconds to allow for connections to drain",
			},
			"create_elb": {
				"default":     true,
				"description": "Create the elb or not",
			},
			"cross_zone_load_balancing": {
				"default":     true,
				"description": "Enable cross-zone load balancing",
			},
			"health_check": {
				"default":     null,
				"description": "A health check block",
			},
			"idle_timeout": {
				"default":     60,
				"description": "The time in seconds that the connection is allowed to be idle",
			},
			"internal": {
				"default":     null,
				"description": "If true, ELB will be an internal ELB",
			},
			"listener": {
				"default":     null,
				"description": "A list of listener blocks",
			},
			"name": {
				"default":     null,
				"description": "The name of the ELB",
			},
			"name_prefix": {
				"default":     null,
				"description": "The prefix name of the ELB",
			},
			"security_groups": {
				"default":     null,
				"description": "A list of security group IDs to assign to the ELB",
			},
			"subnets": {
				"default":     null,
				"description": "A list of subnet IDs to attach to the ELB",
			},
			"tags": {
				"default":     {},
				"description": "A mapping of tags to assign to the resource",
			},
		},
	},

	"module.elb_http.module.elb_attachment": {
		"data":    {},
		"modules": {},
		"outputs": {},
		"providers": {
			"aws": {
				"alias": {
					"": {
						"config":     {},
						"references": {},
						"version":    "",
					},
				},
				"config":     {},
				"references": {},
				"version":    "",
			},
		},
		"resources": {
			"aws_elb_attachment": {
				"this": {
					"config":       {},
					"provisioners": null,
					"references": {
						"elb": [
							"var.elb",
						],
						"instance": [
							"var.instances",
							"count.index",
						],
					},
				},
			},
		},
		"variables": {
			"create_attachment": {
				"default":     true,
				"description": "Create the elb attachment or not",
			},
			"elb": {
				"default":     null,
				"description": "The name of the ELB",
			},
			"instances": {
				"default":     null,
				"description": "List of instances ID to place in the ELB pool",
			},
			"number_of_instances": {
				"default":     null,
				"description": "Number of instances ID to place in the ELB pool",
			},
		},
	},

	"module.lb_security_group": {
		"data": {},
		"modules": {
			"sg": {
				"config": {},
				"references": {
					"computed_egress_rules": [
						"var.auto_computed_egress_rules",
						"var.computed_egress_rules",
					],
					"computed_egress_with_cidr_blocks": [
						"var.computed_egress_with_cidr_blocks",
					],
					"computed_egress_with_ipv6_cidr_blocks": [
						"var.computed_egress_with_ipv6_cidr_blocks",
					],
					"computed_egress_with_self": [
						"var.auto_computed_egress_with_self",
						"var.computed_egress_with_self",
					],
					"computed_egress_with_source_security_group_id": [
						"var.computed_egress_with_source_security_group_id",
					],
					"computed_ingress_rules": [
						"var.auto_computed_ingress_rules",
						"var.computed_ingress_rules",
					],
					"computed_ingress_with_cidr_blocks": [
						"var.computed_ingress_with_cidr_blocks",
					],
					"computed_ingress_with_ipv6_cidr_blocks": [
						"var.computed_ingress_with_ipv6_cidr_blocks",
					],
					"computed_ingress_with_self": [
						"var.auto_computed_ingress_with_self",
						"var.computed_ingress_with_self",
					],
					"computed_ingress_with_source_security_group_id": [
						"var.computed_ingress_with_source_security_group_id",
					],
					"create": [
						"var.create",
					],
					"description": [
						"var.description",
					],
					"egress_cidr_blocks": [
						"var.egress_cidr_blocks",
					],
					"egress_ipv6_cidr_blocks": [
						"var.egress_ipv6_cidr_blocks",
					],
					"egress_prefix_list_ids": [
						"var.egress_prefix_list_ids",
					],
					"egress_rules": [
						"var.auto_egress_rules",
						"var.egress_rules",
					],
					"egress_with_cidr_blocks": [
						"var.egress_with_cidr_blocks",
					],
					"egress_with_ipv6_cidr_blocks": [
						"var.egress_with_ipv6_cidr_blocks",
					],
					"egress_with_self": [
						"var.auto_egress_with_self",
						"var.egress_with_self",
					],
					"egress_with_source_security_group_id": [
						"var.egress_with_source_security_group_id",
					],
					"ingress_cidr_blocks": [
						"var.ingress_cidr_blocks",
					],
					"ingress_ipv6_cidr_blocks": [
						"var.ingress_ipv6_cidr_blocks",
					],
					"ingress_prefix_list_ids": [
						"var.ingress_prefix_list_ids",
					],
					"ingress_rules": [
						"var.auto_ingress_rules",
						"var.ingress_rules",
					],
					"ingress_with_cidr_blocks": [
						"var.ingress_with_cidr_blocks",
					],
					"ingress_with_ipv6_cidr_blocks": [
						"var.ingress_with_ipv6_cidr_blocks",
					],
					"ingress_with_self": [
						"var.auto_ingress_with_self",
						"var.ingress_with_self",
					],
					"ingress_with_source_security_group_id": [
						"var.ingress_with_source_security_group_id",
					],
					"name": [
						"var.name",
					],
					"number_of_computed_egress_rules": [
						"var.auto_number_of_computed_egress_rules",
						"var.number_of_computed_egress_rules",
					],
					"number_of_computed_egress_with_cidr_blocks": [
						"var.number_of_computed_egress_with_cidr_blocks",
					],
					"number_of_computed_egress_with_ipv6_cidr_blocks": [
						"var.number_of_computed_egress_with_ipv6_cidr_blocks",
					],
					"number_of_computed_egress_with_self": [
						"var.auto_number_of_computed_egress_with_self",
						"var.number_of_computed_egress_with_self",
					],
					"number_of_computed_egress_with_source_security_group_id": [
						"var.number_of_computed_egress_with_source_security_group_id",
					],
					"number_of_computed_ingress_rules": [
						"var.auto_number_of_computed_ingress_rules",
						"var.number_of_computed_ingress_rules",
					],
					"number_of_computed_ingress_with_cidr_blocks": [
						"var.number_of_computed_ingress_with_cidr_blocks",
					],
					"number_of_computed_ingress_with_ipv6_cidr_blocks": [
						"var.number_of_computed_ingress_with_ipv6_cidr_blocks",
					],
					"number_of_computed_ingress_with_self": [
						"var.auto_number_of_computed_ingress_with_self",
						"var.number_of_computed_ingress_with_self",
					],
					"number_of_computed_ingress_with_source_security_group_id": [
						"var.number_of_computed_ingress_with_source_security_group_id",
					],
					"revoke_rules_on_delete": [
						"var.revoke_rules_on_delete",
					],
					"tags": [
						"var.tags",
					],
					"use_name_prefix": [
						"var.use_name_prefix",
					],
					"vpc_id": [
						"var.vpc_id",
					],
				},
				"source":  "../../",
				"version": "",
			},
		},
		"outputs": {
			"this_security_group_description": {
				"depends_on":  [],
				"description": "The description of the security group",
				"references": [
					"module.sg.this_security_group_description",
					"module.sg",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_security_group_id": {
				"depends_on":  [],
				"description": "The ID of the security group",
				"references": [
					"module.sg.this_security_group_id",
					"module.sg",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_security_group_name": {
				"depends_on":  [],
				"description": "The name of the security group",
				"references": [
					"module.sg.this_security_group_name",
					"module.sg",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_security_group_owner_id": {
				"depends_on":  [],
				"description": "The owner ID",
				"references": [
					"module.sg.this_security_group_owner_id",
					"module.sg",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_security_group_vpc_id": {
				"depends_on":  [],
				"description": "The VPC ID",
				"references": [
					"module.sg.this_security_group_vpc_id",
					"module.sg",
				],
				"sensitive": false,
				"value":     undefined,
			},
		},
		"providers": {},
		"resources": {},
		"variables": {
			"auto_computed_egress_rules": {
				"default":     [],
				"description": "List of computed egress rules to add automatically",
			},
			"auto_computed_egress_with_self": {
				"default":     [],
				"description": "List of maps defining computed egress rules with self to add automatically",
			},
			"auto_computed_ingress_rules": {
				"default":     [],
				"description": "List of ingress rules to add automatically",
			},
			"auto_computed_ingress_with_self": {
				"default":     [],
				"description": "List of maps defining computed ingress rules with self to add automatically",
			},
			"auto_egress_rules": {
				"default": [
					"all-all",
				],
				"description": "List of egress rules to add automatically",
			},
			"auto_egress_with_self": {
				"default":     [],
				"description": "List of maps defining egress rules with self to add automatically",
			},
			"auto_ingress_rules": {
				"default": [
					"http-80-tcp",
					"http-8080-tcp",
					"https-443-tcp",
					"web-jmx-tcp",
				],
				"description": "List of ingress rules to add automatically",
			},
			"auto_ingress_with_self": {
				"default": [
					{
						"rule": "all-all",
					},
				],
				"description": "List of maps defining ingress rules with self to add automatically",
			},
			"auto_number_of_computed_egress_rules": {
				"default":     0,
				"description": "Number of computed egress rules to create by name",
			},
			"auto_number_of_computed_egress_with_self": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'self' is defined",
			},
			"auto_number_of_computed_ingress_rules": {
				"default":     0,
				"description": "Number of computed ingress rules to create by name",
			},
			"auto_number_of_computed_ingress_with_self": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'self' is defined",
			},
			"computed_egress_cidr_blocks": {
				"default": [
					"0.0.0.0/0",
				],
				"description": "List of IPv4 CIDR ranges to use on all computed egress rules",
			},
			"computed_egress_ipv6_cidr_blocks": {
				"default": [
					"::/0",
				],
				"description": "List of IPv6 CIDR ranges to use on all computed egress rules",
			},
			"computed_egress_prefix_list_ids": {
				"default":     [],
				"description": "List of prefix list IDs (for allowing access to VPC endpoints) to use on all computed egress rules",
			},
			"computed_egress_rules": {
				"default":     [],
				"description": "List of computed egress rules to create by name",
			},
			"computed_egress_with_cidr_blocks": {
				"default":     [],
				"description": "List of computed egress rules to create where 'cidr_blocks' is used",
			},
			"computed_egress_with_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of computed egress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"computed_egress_with_self": {
				"default":     [],
				"description": "List of computed egress rules to create where 'self' is defined",
			},
			"computed_egress_with_source_security_group_id": {
				"default":     [],
				"description": "List of computed egress rules to create where 'source_security_group_id' is used",
			},
			"computed_ingress_cidr_blocks": {
				"default":     [],
				"description": "List of IPv4 CIDR ranges to use on all computed ingress rules",
			},
			"computed_ingress_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of IPv6 CIDR ranges to use on all computed ingress rules",
			},
			"computed_ingress_prefix_list_ids": {
				"default":     [],
				"description": "List of prefix list IDs (for allowing access to VPC endpoints) to use on all computed ingress rules",
			},
			"computed_ingress_rules": {
				"default":     [],
				"description": "List of computed ingress rules to create by name",
			},
			"computed_ingress_with_cidr_blocks": {
				"default":     [],
				"description": "List of computed ingress rules to create where 'cidr_blocks' is used",
			},
			"computed_ingress_with_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of computed ingress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"computed_ingress_with_self": {
				"default":     [],
				"description": "List of computed ingress rules to create where 'self' is defined",
			},
			"computed_ingress_with_source_security_group_id": {
				"default":     [],
				"description": "List of computed ingress rules to create where 'source_security_group_id' is used",
			},
			"create": {
				"default":     true,
				"description": "Whether to create security group and all rules",
			},
			"description": {
				"default":     "Security Group managed by Terraform",
				"description": "Description of security group",
			},
			"egress_cidr_blocks": {
				"default": [
					"0.0.0.0/0",
				],
				"description": "List of IPv4 CIDR ranges to use on all egress rules",
			},
			"egress_ipv6_cidr_blocks": {
				"default": [
					"::/0",
				],
				"description": "List of IPv6 CIDR ranges to use on all egress rules",
			},
			"egress_prefix_list_ids": {
				"default":     [],
				"description": "List of prefix list IDs (for allowing access to VPC endpoints) to use on all egress rules",
			},
			"egress_rules": {
				"default":     [],
				"description": "List of egress rules to create by name",
			},
			"egress_with_cidr_blocks": {
				"default":     [],
				"description": "List of egress rules to create where 'cidr_blocks' is used",
			},
			"egress_with_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of egress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"egress_with_self": {
				"default":     [],
				"description": "List of egress rules to create where 'self' is defined",
			},
			"egress_with_source_security_group_id": {
				"default":     [],
				"description": "List of egress rules to create where 'source_security_group_id' is used",
			},
			"ingress_cidr_blocks": {
				"default":     [],
				"description": "List of IPv4 CIDR ranges to use on all ingress rules",
			},
			"ingress_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of IPv6 CIDR ranges to use on all ingress rules",
			},
			"ingress_prefix_list_ids": {
				"default":     [],
				"description": "List of prefix list IDs (for allowing access to VPC endpoints) to use on all ingress rules",
			},
			"ingress_rules": {
				"default":     [],
				"description": "List of ingress rules to create by name",
			},
			"ingress_with_cidr_blocks": {
				"default":     [],
				"description": "List of ingress rules to create where 'cidr_blocks' is used",
			},
			"ingress_with_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of ingress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"ingress_with_self": {
				"default":     [],
				"description": "List of ingress rules to create where 'self' is defined",
			},
			"ingress_with_source_security_group_id": {
				"default":     [],
				"description": "List of ingress rules to create where 'source_security_group_id' is used",
			},
			"name": {
				"default":     null,
				"description": "Name of security group",
			},
			"number_of_computed_egress_cidr_blocks": {
				"default":     0,
				"description": "Number of IPv4 CIDR ranges to use on all computed egress rules",
			},
			"number_of_computed_egress_ipv6_cidr_blocks": {
				"default":     0,
				"description": "Number of IPv6 CIDR ranges to use on all computed egress rules",
			},
			"number_of_computed_egress_prefix_list_ids": {
				"default":     0,
				"description": "Number of prefix list IDs (for allowing access to VPC endpoints) to use on all computed egress rules",
			},
			"number_of_computed_egress_rules": {
				"default":     0,
				"description": "Number of computed egress rules to create by name",
			},
			"number_of_computed_egress_with_cidr_blocks": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'cidr_blocks' is used",
			},
			"number_of_computed_egress_with_ipv6_cidr_blocks": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"number_of_computed_egress_with_self": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'self' is defined",
			},
			"number_of_computed_egress_with_source_security_group_id": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'source_security_group_id' is used",
			},
			"number_of_computed_ingress_cidr_blocks": {
				"default":     0,
				"description": "Number of IPv4 CIDR ranges to use on all computed ingress rules",
			},
			"number_of_computed_ingress_ipv6_cidr_blocks": {
				"default":     0,
				"description": "Number of IPv6 CIDR ranges to use on all computed ingress rules",
			},
			"number_of_computed_ingress_prefix_list_ids": {
				"default":     0,
				"description": "Number of prefix list IDs (for allowing access to VPC endpoints) to use on all computed ingress rules",
			},
			"number_of_computed_ingress_rules": {
				"default":     0,
				"description": "Number of computed ingress rules to create by name",
			},
			"number_of_computed_ingress_with_cidr_blocks": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'cidr_blocks' is used",
			},
			"number_of_computed_ingress_with_ipv6_cidr_blocks": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"number_of_computed_ingress_with_self": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'self' is defined",
			},
			"number_of_computed_ingress_with_source_security_group_id": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'source_security_group_id' is used",
			},
			"revoke_rules_on_delete": {
				"default":     false,
				"description": "Instruct Terraform to revoke all of the Security Groups attached ingress and egress rules before deleting the rule itself. Enable for EMR.",
			},
			"tags": {
				"default":     {},
				"description": "A mapping of tags to assign to security group",
			},
			"use_name_prefix": {
				"default":     true,
				"description": "Whether to use name_prefix or fixed name. Should be true to able to update security group name after initial creation",
			},
			"vpc_id": {
				"default":     null,
				"description": "ID of the VPC where to create security group",
			},
		},
	},

	"module.lb_security_group.module.sg": {
		"data":    {},
		"modules": {},
		"outputs": {
			"this_security_group_description": {
				"depends_on":  [],
				"description": "The description of the security group",
				"references": [
					"aws_security_group.this",
					"aws_security_group.this_name_prefix",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_security_group_id": {
				"depends_on":  [],
				"description": "The ID of the security group",
				"references": [
					"aws_security_group.this",
					"aws_security_group.this_name_prefix",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_security_group_name": {
				"depends_on":  [],
				"description": "The name of the security group",
				"references": [
					"aws_security_group.this",
					"aws_security_group.this_name_prefix",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_security_group_owner_id": {
				"depends_on":  [],
				"description": "The owner ID",
				"references": [
					"aws_security_group.this",
					"aws_security_group.this_name_prefix",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_security_group_vpc_id": {
				"depends_on":  [],
				"description": "The VPC ID",
				"references": [
					"aws_security_group.this",
					"aws_security_group.this_name_prefix",
				],
				"sensitive": false,
				"value":     undefined,
			},
		},
		"providers": {},
		"resources": {
			"aws_security_group": {
				"this": {
					"config":       {},
					"provisioners": null,
					"references": {
						"description": [
							"var.description",
						],
						"name": [
							"var.name",
						],
						"revoke_rules_on_delete": [
							"var.revoke_rules_on_delete",
						],
						"tags": [
							"var.name",
							"var.tags",
						],
						"vpc_id": [
							"var.vpc_id",
						],
					},
				},
				"this_name_prefix": {
					"config":       {},
					"provisioners": null,
					"references": {
						"description": [
							"var.description",
						],
						"name_prefix": [
							"var.name",
						],
						"revoke_rules_on_delete": [
							"var.revoke_rules_on_delete",
						],
						"tags": [
							"var.name",
							"var.tags",
						],
						"vpc_id": [
							"var.vpc_id",
						],
					},
				},
			},
			"aws_security_group_rule": {
				"computed_egress_rules": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"cidr_blocks": [
							"var.egress_cidr_blocks",
						],
						"description": [
							"var.rules",
							"var.computed_egress_rules",
							"count.index",
						],
						"from_port": [
							"var.rules",
							"var.computed_egress_rules",
							"count.index",
						],
						"ipv6_cidr_blocks": [
							"var.egress_ipv6_cidr_blocks",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.rules",
							"var.computed_egress_rules",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.rules",
							"var.computed_egress_rules",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_egress_with_cidr_blocks": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"cidr_blocks": [
							"var.computed_egress_with_cidr_blocks",
							"count.index",
							"var.egress_cidr_blocks",
						],
						"description": [
							"var.computed_egress_with_cidr_blocks",
							"count.index",
						],
						"from_port": [
							"var.computed_egress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_egress_with_cidr_blocks",
							"count.index",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.computed_egress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_egress_with_cidr_blocks",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.computed_egress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_egress_with_cidr_blocks",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_egress_with_ipv6_cidr_blocks": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.computed_egress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"from_port": [
							"var.computed_egress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_egress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"ipv6_cidr_blocks": [
							"var.computed_egress_with_ipv6_cidr_blocks",
							"count.index",
							"var.egress_ipv6_cidr_blocks",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.computed_egress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_egress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.computed_egress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_egress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_egress_with_self": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.computed_egress_with_self",
							"count.index",
						],
						"from_port": [
							"var.computed_egress_with_self",
							"count.index",
							"var.rules",
							"var.computed_egress_with_self",
							"count.index",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.computed_egress_with_self",
							"count.index",
							"var.rules",
							"var.computed_egress_with_self",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"self": [
							"var.computed_egress_with_self",
							"count.index",
						],
						"to_port": [
							"var.computed_egress_with_self",
							"count.index",
							"var.rules",
							"var.computed_egress_with_self",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_egress_with_source_security_group_id": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.computed_egress_with_source_security_group_id",
							"count.index",
						],
						"from_port": [
							"var.computed_egress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.computed_egress_with_source_security_group_id",
							"count.index",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.computed_egress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.computed_egress_with_source_security_group_id",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"source_security_group_id": [
							"var.computed_egress_with_source_security_group_id",
							"count.index",
						],
						"to_port": [
							"var.computed_egress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.computed_egress_with_source_security_group_id",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_ingress_rules": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"cidr_blocks": [
							"var.ingress_cidr_blocks",
						],
						"description": [
							"var.rules",
							"var.computed_ingress_rules",
							"count.index",
						],
						"from_port": [
							"var.rules",
							"var.computed_ingress_rules",
							"count.index",
						],
						"ipv6_cidr_blocks": [
							"var.ingress_ipv6_cidr_blocks",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.rules",
							"var.computed_ingress_rules",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.rules",
							"var.computed_ingress_rules",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_ingress_with_cidr_blocks": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"cidr_blocks": [
							"var.computed_ingress_with_cidr_blocks",
							"count.index",
							"var.ingress_cidr_blocks",
						],
						"description": [
							"var.computed_ingress_with_cidr_blocks",
							"count.index",
						],
						"from_port": [
							"var.computed_ingress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_cidr_blocks",
							"count.index",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.computed_ingress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_cidr_blocks",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.computed_ingress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_cidr_blocks",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_ingress_with_ipv6_cidr_blocks": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.computed_ingress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"from_port": [
							"var.computed_ingress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"ipv6_cidr_blocks": [
							"var.computed_ingress_with_ipv6_cidr_blocks",
							"count.index",
							"var.ingress_ipv6_cidr_blocks",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.computed_ingress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.computed_ingress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_ingress_with_self": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.computed_ingress_with_self",
							"count.index",
						],
						"from_port": [
							"var.computed_ingress_with_self",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_self",
							"count.index",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.computed_ingress_with_self",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_self",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"self": [
							"var.computed_ingress_with_self",
							"count.index",
						],
						"to_port": [
							"var.computed_ingress_with_self",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_self",
							"count.index",
						],
						"type": [],
					},
				},
				"computed_ingress_with_source_security_group_id": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.computed_ingress_with_source_security_group_id",
							"count.index",
						],
						"from_port": [
							"var.computed_ingress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_source_security_group_id",
							"count.index",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.computed_ingress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_source_security_group_id",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"source_security_group_id": [
							"var.computed_ingress_with_source_security_group_id",
							"count.index",
						],
						"to_port": [
							"var.computed_ingress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.computed_ingress_with_source_security_group_id",
							"count.index",
						],
						"type": [],
					},
				},
				"egress_rules": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"cidr_blocks": [
							"var.egress_cidr_blocks",
						],
						"description": [
							"var.rules",
							"var.egress_rules",
							"count.index",
						],
						"from_port": [
							"var.rules",
							"var.egress_rules",
							"count.index",
						],
						"ipv6_cidr_blocks": [
							"var.egress_ipv6_cidr_blocks",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.rules",
							"var.egress_rules",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.rules",
							"var.egress_rules",
							"count.index",
						],
						"type": [],
					},
				},
				"egress_with_cidr_blocks": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"cidr_blocks": [
							"var.egress_with_cidr_blocks",
							"count.index",
							"var.egress_cidr_blocks",
						],
						"description": [
							"var.egress_with_cidr_blocks",
							"count.index",
						],
						"from_port": [
							"var.egress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.egress_with_cidr_blocks",
							"count.index",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.egress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.egress_with_cidr_blocks",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.egress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.egress_with_cidr_blocks",
							"count.index",
						],
						"type": [],
					},
				},
				"egress_with_ipv6_cidr_blocks": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.egress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"from_port": [
							"var.egress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.egress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"ipv6_cidr_blocks": [
							"var.egress_with_ipv6_cidr_blocks",
							"count.index",
							"var.egress_ipv6_cidr_blocks",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.egress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.egress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.egress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.egress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"type": [],
					},
				},
				"egress_with_self": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.egress_with_self",
							"count.index",
						],
						"from_port": [
							"var.egress_with_self",
							"count.index",
							"var.rules",
							"var.egress_with_self",
							"count.index",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.egress_with_self",
							"count.index",
							"var.rules",
							"var.egress_with_self",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"self": [
							"var.egress_with_self",
							"count.index",
						],
						"to_port": [
							"var.egress_with_self",
							"count.index",
							"var.rules",
							"var.egress_with_self",
							"count.index",
						],
						"type": [],
					},
				},
				"egress_with_source_security_group_id": {
					"config": {
						"type": "egress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.egress_with_source_security_group_id",
							"count.index",
						],
						"from_port": [
							"var.egress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.egress_with_source_security_group_id",
							"count.index",
						],
						"prefix_list_ids": [
							"var.egress_prefix_list_ids",
						],
						"protocol": [
							"var.egress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.egress_with_source_security_group_id",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"source_security_group_id": [
							"var.egress_with_source_security_group_id",
							"count.index",
						],
						"to_port": [
							"var.egress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.egress_with_source_security_group_id",
							"count.index",
						],
						"type": [],
					},
				},
				"ingress_rules": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"cidr_blocks": [
							"var.ingress_cidr_blocks",
						],
						"description": [
							"var.rules",
							"var.ingress_rules",
							"count.index",
						],
						"from_port": [
							"var.rules",
							"var.ingress_rules",
							"count.index",
						],
						"ipv6_cidr_blocks": [
							"var.ingress_ipv6_cidr_blocks",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.rules",
							"var.ingress_rules",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.rules",
							"var.ingress_rules",
							"count.index",
						],
						"type": [],
					},
				},
				"ingress_with_cidr_blocks": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"cidr_blocks": [
							"var.ingress_with_cidr_blocks",
							"count.index",
							"var.ingress_cidr_blocks",
						],
						"description": [
							"var.ingress_with_cidr_blocks",
							"count.index",
						],
						"from_port": [
							"var.ingress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.ingress_with_cidr_blocks",
							"count.index",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.ingress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.ingress_with_cidr_blocks",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.ingress_with_cidr_blocks",
							"count.index",
							"var.rules",
							"var.ingress_with_cidr_blocks",
							"count.index",
						],
						"type": [],
					},
				},
				"ingress_with_ipv6_cidr_blocks": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.ingress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"from_port": [
							"var.ingress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.ingress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"ipv6_cidr_blocks": [
							"var.ingress_with_ipv6_cidr_blocks",
							"count.index",
							"var.ingress_ipv6_cidr_blocks",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.ingress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.ingress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"to_port": [
							"var.ingress_with_ipv6_cidr_blocks",
							"count.index",
							"var.rules",
							"var.ingress_with_ipv6_cidr_blocks",
							"count.index",
						],
						"type": [],
					},
				},
				"ingress_with_self": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.ingress_with_self",
							"count.index",
						],
						"from_port": [
							"var.ingress_with_self",
							"count.index",
							"var.rules",
							"var.ingress_with_self",
							"count.index",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.ingress_with_self",
							"count.index",
							"var.rules",
							"var.ingress_with_self",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"self": [
							"var.ingress_with_self",
							"count.index",
						],
						"to_port": [
							"var.ingress_with_self",
							"count.index",
							"var.rules",
							"var.ingress_with_self",
							"count.index",
						],
						"type": [],
					},
				},
				"ingress_with_source_security_group_id": {
					"config": {
						"type": "ingress",
					},
					"provisioners": null,
					"references": {
						"description": [
							"var.ingress_with_source_security_group_id",
							"count.index",
						],
						"from_port": [
							"var.ingress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.ingress_with_source_security_group_id",
							"count.index",
						],
						"prefix_list_ids": [
							"var.ingress_prefix_list_ids",
						],
						"protocol": [
							"var.ingress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.ingress_with_source_security_group_id",
							"count.index",
						],
						"security_group_id": [
							"local.this_sg_id",
						],
						"source_security_group_id": [
							"var.ingress_with_source_security_group_id",
							"count.index",
						],
						"to_port": [
							"var.ingress_with_source_security_group_id",
							"count.index",
							"var.rules",
							"var.ingress_with_source_security_group_id",
							"count.index",
						],
						"type": [],
					},
				},
			},
		},
		"variables": {
			"auto_groups": {
				"default": {
					"activemq": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"activemq-5671-tcp",
							"activemq-8883-tcp",
							"activemq-61614-tcp",
							"activemq-61617-tcp",
							"activemq-61619-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"alertmanager": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"alertmanager-9093-tcp",
							"alertmanager-9094-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"carbon-relay-ng": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"carbon-line-in-tcp",
							"carbon-line-in-udp",
							"carbon-pickle-tcp",
							"carbon-pickle-udp",
							"carbon-gui-udp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"cassandra": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"cassandra-clients-tcp",
							"cassandra-thrift-clients-tcp",
							"cassandra-jmx-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"consul": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"consul-tcp",
							"consul-cli-rpc-tcp",
							"consul-webui-tcp",
							"consul-dns-tcp",
							"consul-dns-udp",
							"consul-serf-lan-tcp",
							"consul-serf-lan-udp",
							"consul-serf-wan-tcp",
							"consul-serf-wan-udp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"docker-swarm": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"docker-swarm-mngmt-tcp",
							"docker-swarm-node-tcp",
							"docker-swarm-node-udp",
							"docker-swarm-overlay-udp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"elasticsearch": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"elasticsearch-rest-tcp",
							"elasticsearch-java-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"grafana": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"grafana-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"graphite-statsd": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"graphite-webui",
							"graphite-2003-tcp",
							"graphite-2004-tcp",
							"graphite-2023-tcp",
							"graphite-2024-tcp",
							"graphite-8080-tcp",
							"graphite-8125-tcp",
							"graphite-8125-udp",
							"graphite-8126-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"http-80": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"http-80-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"http-8080": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"http-8080-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"https-443": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"https-443-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"https-8443": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"https-8443-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"ipsec-4500": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"ipsec-4500-udp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"ipsec-500": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"ipsec-500-udp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"kafka": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"kafka-broker-tcp",
							"kafka-broker-tls-tcp",
							"kafka-jmx-exporter-tcp",
							"kafka-node-exporter-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"kibana": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"kibana-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"kubernetes-api": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"kubernetes-api-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"ldap": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"ldap-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"ldaps": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"ldaps-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"logstash": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"logstash-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"memcached": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"memcached-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"minio": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"minio-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"mongodb": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"mongodb-27017-tcp",
							"mongodb-27018-tcp",
							"mongodb-27019-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"mssql": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"mssql-tcp",
							"mssql-udp",
							"mssql-analytics-tcp",
							"mssql-broker-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"mysql": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"mysql-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"nfs": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"nfs-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"nomad": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"nomad-http-tcp",
							"nomad-rpc-tcp",
							"nomad-serf-tcp",
							"nomad-serf-udp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"ntp": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"ntp-udp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"openvpn": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"openvpn-udp",
							"openvpn-tcp",
							"openvpn-https-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"oracle-db": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"oracle-db-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"postgresql": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"postgresql-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"prometheus": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"prometheus-http-tcp",
							"prometheus-pushgateway-http-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"puppet": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"puppet-tcp",
							"puppetdb-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"rabbitmq": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"rabbitmq-4369-tcp",
							"rabbitmq-5671-tcp",
							"rabbitmq-5672-tcp",
							"rabbitmq-15672-tcp",
							"rabbitmq-25672-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"rdp": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"rdp-tcp",
							"rdp-udp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"redis": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"redis-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"redshift": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"redshift-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"solr": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"solr-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"splunk": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"splunk-indexer-tcp",
							"splunk-clients-tcp",
							"splunk-splunkd-tcp",
							"splunk-hec-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"squid": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"squid-proxy-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"ssh": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"ssh-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"storm": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"storm-nimbus-tcp",
							"storm-ui-tcp",
							"storm-supervisor-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"web": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"http-80-tcp",
							"http-8080-tcp",
							"https-443-tcp",
							"web-jmx-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"winrm": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"winrm-http-tcp",
							"winrm-https-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"zipkin": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"zipkin-admin-tcp",
							"zipkin-admin-query-tcp",
							"zipkin-admin-web-tcp",
							"zipkin-query-tcp",
							"zipkin-web-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
					"zookeeper": {
						"egress_rules": [
							"all-all",
						],
						"ingress_rules": [
							"zookeeper-2181-tcp",
							"zookeeper-2888-tcp",
							"zookeeper-3888-tcp",
							"zookeeper-jmx-tcp",
						],
						"ingress_with_self": [
							"all-all",
						],
					},
				},
				"description": "Map of groups of security group rules to use to generate modules (see update_groups.sh)",
			},
			"computed_egress_rules": {
				"default":     [],
				"description": "List of computed egress rules to create by name",
			},
			"computed_egress_with_cidr_blocks": {
				"default":     [],
				"description": "List of computed egress rules to create where 'cidr_blocks' is used",
			},
			"computed_egress_with_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of computed egress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"computed_egress_with_self": {
				"default":     [],
				"description": "List of computed egress rules to create where 'self' is defined",
			},
			"computed_egress_with_source_security_group_id": {
				"default":     [],
				"description": "List of computed egress rules to create where 'source_security_group_id' is used",
			},
			"computed_ingress_rules": {
				"default":     [],
				"description": "List of computed ingress rules to create by name",
			},
			"computed_ingress_with_cidr_blocks": {
				"default":     [],
				"description": "List of computed ingress rules to create where 'cidr_blocks' is used",
			},
			"computed_ingress_with_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of computed ingress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"computed_ingress_with_self": {
				"default":     [],
				"description": "List of computed ingress rules to create where 'self' is defined",
			},
			"computed_ingress_with_source_security_group_id": {
				"default":     [],
				"description": "List of computed ingress rules to create where 'source_security_group_id' is used",
			},
			"create": {
				"default":     true,
				"description": "Whether to create security group and all rules",
			},
			"description": {
				"default":     "Security Group managed by Terraform",
				"description": "Description of security group",
			},
			"egress_cidr_blocks": {
				"default": [
					"0.0.0.0/0",
				],
				"description": "List of IPv4 CIDR ranges to use on all egress rules",
			},
			"egress_ipv6_cidr_blocks": {
				"default": [
					"::/0",
				],
				"description": "List of IPv6 CIDR ranges to use on all egress rules",
			},
			"egress_prefix_list_ids": {
				"default":     [],
				"description": "List of prefix list IDs (for allowing access to VPC endpoints) to use on all egress rules",
			},
			"egress_rules": {
				"default":     [],
				"description": "List of egress rules to create by name",
			},
			"egress_with_cidr_blocks": {
				"default":     [],
				"description": "List of egress rules to create where 'cidr_blocks' is used",
			},
			"egress_with_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of egress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"egress_with_self": {
				"default":     [],
				"description": "List of egress rules to create where 'self' is defined",
			},
			"egress_with_source_security_group_id": {
				"default":     [],
				"description": "List of egress rules to create where 'source_security_group_id' is used",
			},
			"ingress_cidr_blocks": {
				"default":     [],
				"description": "List of IPv4 CIDR ranges to use on all ingress rules",
			},
			"ingress_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of IPv6 CIDR ranges to use on all ingress rules",
			},
			"ingress_prefix_list_ids": {
				"default":     [],
				"description": "List of prefix list IDs (for allowing access to VPC endpoints) to use on all ingress rules",
			},
			"ingress_rules": {
				"default":     [],
				"description": "List of ingress rules to create by name",
			},
			"ingress_with_cidr_blocks": {
				"default":     [],
				"description": "List of ingress rules to create where 'cidr_blocks' is used",
			},
			"ingress_with_ipv6_cidr_blocks": {
				"default":     [],
				"description": "List of ingress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"ingress_with_self": {
				"default":     [],
				"description": "List of ingress rules to create where 'self' is defined",
			},
			"ingress_with_source_security_group_id": {
				"default":     [],
				"description": "List of ingress rules to create where 'source_security_group_id' is used",
			},
			"name": {
				"default":     null,
				"description": "Name of security group",
			},
			"number_of_computed_egress_rules": {
				"default":     0,
				"description": "Number of computed egress rules to create by name",
			},
			"number_of_computed_egress_with_cidr_blocks": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'cidr_blocks' is used",
			},
			"number_of_computed_egress_with_ipv6_cidr_blocks": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"number_of_computed_egress_with_self": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'self' is defined",
			},
			"number_of_computed_egress_with_source_security_group_id": {
				"default":     0,
				"description": "Number of computed egress rules to create where 'source_security_group_id' is used",
			},
			"number_of_computed_ingress_rules": {
				"default":     0,
				"description": "Number of computed ingress rules to create by name",
			},
			"number_of_computed_ingress_with_cidr_blocks": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'cidr_blocks' is used",
			},
			"number_of_computed_ingress_with_ipv6_cidr_blocks": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'ipv6_cidr_blocks' is used",
			},
			"number_of_computed_ingress_with_self": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'self' is defined",
			},
			"number_of_computed_ingress_with_source_security_group_id": {
				"default":     0,
				"description": "Number of computed ingress rules to create where 'source_security_group_id' is used",
			},
			"revoke_rules_on_delete": {
				"default":     false,
				"description": "Instruct Terraform to revoke all of the Security Groups attached ingress and egress rules before deleting the rule itself. Enable for EMR.",
			},
			"rules": {
				"default": {
					"_": [
						"",
						"",
						"",
					],
					"activemq-5671-tcp": [
						"5671",
						"5671",
						"tcp",
						"ActiveMQ AMQP",
					],
					"activemq-61614-tcp": [
						"61614",
						"61614",
						"tcp",
						"ActiveMQ STOMP",
					],
					"activemq-61617-tcp": [
						"61617",
						"61617",
						"tcp",
						"ActiveMQ OpenWire",
					],
					"activemq-61619-tcp": [
						"61619",
						"61619",
						"tcp",
						"ActiveMQ WebSocket",
					],
					"activemq-8883-tcp": [
						"8883",
						"8883",
						"tcp",
						"ActiveMQ MQTT",
					],
					"alertmanager-9093-tcp": [
						"9093",
						"9093",
						"tcp",
						"Alert Manager",
					],
					"alertmanager-9094-tcp": [
						"9094",
						"9094",
						"tcp",
						"Alert Manager Cluster",
					],
					"all-all": [
						"-1",
						"-1",
						"-1",
						"All protocols",
					],
					"all-icmp": [
						"-1",
						"-1",
						"icmp",
						"All IPV4 ICMP",
					],
					"all-ipv6-icmp": [
						"-1",
						"-1",
						"58",
						"All IPV6 ICMP",
					],
					"all-tcp": [
						"0",
						"65535",
						"tcp",
						"All TCP ports",
					],
					"all-udp": [
						"0",
						"65535",
						"udp",
						"All UDP ports",
					],
					"carbon-admin-tcp": [
						"2004",
						"2004",
						"tcp",
						"Carbon admin",
					],
					"carbon-gui-udp": [
						"8081",
						"8081",
						"tcp",
						"Carbon GUI",
					],
					"carbon-line-in-tcp": [
						"2003",
						"2003",
						"tcp",
						"Carbon line-in",
					],
					"carbon-line-in-udp": [
						"2003",
						"2003",
						"udp",
						"Carbon line-in",
					],
					"carbon-pickle-tcp": [
						"2013",
						"2013",
						"tcp",
						"Carbon pickle",
					],
					"carbon-pickle-udp": [
						"2013",
						"2013",
						"udp",
						"Carbon pickle",
					],
					"cassandra-clients-tcp": [
						"9042",
						"9042",
						"tcp",
						"Cassandra clients",
					],
					"cassandra-jmx-tcp": [
						"7199",
						"7199",
						"tcp",
						"JMX",
					],
					"cassandra-thrift-clients-tcp": [
						"9160",
						"9160",
						"tcp",
						"Cassandra Thrift clients",
					],
					"consul-cli-rpc-tcp": [
						"8400",
						"8400",
						"tcp",
						"Consul CLI RPC",
					],
					"consul-dns-tcp": [
						"8600",
						"8600",
						"tcp",
						"Consul DNS",
					],
					"consul-dns-udp": [
						"8600",
						"8600",
						"udp",
						"Consul DNS",
					],
					"consul-serf-lan-tcp": [
						"8301",
						"8301",
						"tcp",
						"Serf LAN",
					],
					"consul-serf-lan-udp": [
						"8301",
						"8301",
						"udp",
						"Serf LAN",
					],
					"consul-serf-wan-tcp": [
						"8302",
						"8302",
						"tcp",
						"Serf WAN",
					],
					"consul-serf-wan-udp": [
						"8302",
						"8302",
						"udp",
						"Serf WAN",
					],
					"consul-tcp": [
						"8300",
						"8300",
						"tcp",
						"Consul server",
					],
					"consul-webui-tcp": [
						"8500",
						"8500",
						"tcp",
						"Consul web UI",
					],
					"dns-tcp": [
						"53",
						"53",
						"tcp",
						"DNS",
					],
					"dns-udp": [
						"53",
						"53",
						"udp",
						"DNS",
					],
					"docker-swarm-mngmt-tcp": [
						"2377",
						"2377",
						"tcp",
						"Docker Swarm cluster management",
					],
					"docker-swarm-node-tcp": [
						"7946",
						"7946",
						"tcp",
						"Docker Swarm node",
					],
					"docker-swarm-node-udp": [
						"7946",
						"7946",
						"udp",
						"Docker Swarm node",
					],
					"docker-swarm-overlay-udp": [
						"4789",
						"4789",
						"udp",
						"Docker Swarm Overlay Network Traffic",
					],
					"elasticsearch-java-tcp": [
						"9300",
						"9300",
						"tcp",
						"Elasticsearch Java interface",
					],
					"elasticsearch-rest-tcp": [
						"9200",
						"9200",
						"tcp",
						"Elasticsearch REST interface",
					],
					"grafana-tcp": [
						"3000",
						"3000",
						"tcp",
						"Grafana Dashboard",
					],
					"graphite-2003-tcp": [
						"2003",
						"2003",
						"tcp",
						"Carbon receiver plain text",
					],
					"graphite-2004-tcp": [
						"2004",
						"2004",
						"tcp",
						"Carbon receiver pickle",
					],
					"graphite-2023-tcp": [
						"2023",
						"2023",
						"tcp",
						"Carbon aggregator plaintext",
					],
					"graphite-2024-tcp": [
						"2024",
						"2024",
						"tcp",
						"Carbon aggregator pickle",
					],
					"graphite-8080-tcp": [
						"8080",
						"8080",
						"tcp",
						"Graphite gunicorn port",
					],
					"graphite-8125-tcp": [
						"8125",
						"8125",
						"tcp",
						"Statsd TCP",
					],
					"graphite-8125-udp": [
						"8125",
						"8125",
						"udp",
						"Statsd UDP default",
					],
					"graphite-8126-tcp": [
						"8126",
						"8126",
						"tcp",
						"Statsd admin",
					],
					"graphite-webui": [
						"80",
						"80",
						"tcp",
						"Graphite admin interface",
					],
					"http-80-tcp": [
						"80",
						"80",
						"tcp",
						"HTTP",
					],
					"http-8080-tcp": [
						"8080",
						"8080",
						"tcp",
						"HTTP",
					],
					"https-443-tcp": [
						"443",
						"443",
						"tcp",
						"HTTPS",
					],
					"https-8443-tcp": [
						"8443",
						"8443",
						"tcp",
						"HTTPS",
					],
					"ipsec-4500-udp": [
						"4500",
						"4500",
						"udp",
						"IPSEC NAT-T",
					],
					"ipsec-500-udp": [
						"500",
						"500",
						"udp",
						"IPSEC ISAKMP",
					],
					"kafka-broker-tcp": [
						"9092",
						"9092",
						"tcp",
						"Kafka broker 0.8.2+",
					],
					"kafka-broker-tls-tcp": [
						"9094",
						"9094",
						"tcp",
						"Kafka TLS enabled broker 0.8.2+",
					],
					"kafka-jmx-exporter-tcp": [
						"11001",
						"11001",
						"tcp",
						"Kafka JMX Exporter",
					],
					"kafka-node-exporter-tcp": [
						"11002",
						"11002",
						"tcp",
						"Kafka Node Exporter",
					],
					"kibana-tcp": [
						"5601",
						"5601",
						"tcp",
						"Kibana Web Interface",
					],
					"kubernetes-api-tcp": [
						"6443",
						"6443",
						"tcp",
						"Kubernetes API Server",
					],
					"ldap-tcp": [
						"389",
						"389",
						"tcp",
						"LDAP",
					],
					"ldaps-tcp": [
						"636",
						"636",
						"tcp",
						"LDAPS",
					],
					"logstash-tcp": [
						"5044",
						"5044",
						"tcp",
						"Logstash",
					],
					"memcached-tcp": [
						"11211",
						"11211",
						"tcp",
						"Memcached",
					],
					"minio-tcp": [
						"9000",
						"9000",
						"tcp",
						"MinIO",
					],
					"mongodb-27017-tcp": [
						"27017",
						"27017",
						"tcp",
						"MongoDB",
					],
					"mongodb-27018-tcp": [
						"27018",
						"27018",
						"tcp",
						"MongoDB shard",
					],
					"mongodb-27019-tcp": [
						"27019",
						"27019",
						"tcp",
						"MongoDB config server",
					],
					"mssql-analytics-tcp": [
						"2383",
						"2383",
						"tcp",
						"MSSQL Analytics",
					],
					"mssql-broker-tcp": [
						"4022",
						"4022",
						"tcp",
						"MSSQL Broker",
					],
					"mssql-tcp": [
						"1433",
						"1433",
						"tcp",
						"MSSQL Server",
					],
					"mssql-udp": [
						"1434",
						"1434",
						"udp",
						"MSSQL Browser",
					],
					"mysql-tcp": [
						"3306",
						"3306",
						"tcp",
						"MySQL/Aurora",
					],
					"nfs-tcp": [
						"2049",
						"2049",
						"tcp",
						"NFS/EFS",
					],
					"nomad-http-tcp": [
						"4646",
						"4646",
						"tcp",
						"Nomad HTTP",
					],
					"nomad-rpc-tcp": [
						"4647",
						"4647",
						"tcp",
						"Nomad RPC",
					],
					"nomad-serf-tcp": [
						"4648",
						"4648",
						"tcp",
						"Serf",
					],
					"nomad-serf-udp": [
						"4648",
						"4648",
						"udp",
						"Serf",
					],
					"ntp-udp": [
						"123",
						"123",
						"udp",
						"NTP",
					],
					"openvpn-https-tcp": [
						"443",
						"443",
						"tcp",
						"OpenVPN",
					],
					"openvpn-tcp": [
						"943",
						"943",
						"tcp",
						"OpenVPN",
					],
					"openvpn-udp": [
						"1194",
						"1194",
						"udp",
						"OpenVPN",
					],
					"oracle-db-tcp": [
						"1521",
						"1521",
						"tcp",
						"Oracle",
					],
					"postgresql-tcp": [
						"5432",
						"5432",
						"tcp",
						"PostgreSQL",
					],
					"prometheus-http-tcp": [
						"9090",
						"9090",
						"tcp",
						"Prometheus",
					],
					"prometheus-pushgateway-http-tcp": [
						"9091",
						"9091",
						"tcp",
						"Prometheus Pushgateway",
					],
					"puppet-tcp": [
						"8140",
						"8140",
						"tcp",
						"Puppet",
					],
					"puppetdb-tcp": [
						"8081",
						"8081",
						"tcp",
						"PuppetDB",
					],
					"rabbitmq-15672-tcp": [
						"15672",
						"15672",
						"tcp",
						"RabbitMQ",
					],
					"rabbitmq-25672-tcp": [
						"25672",
						"25672",
						"tcp",
						"RabbitMQ",
					],
					"rabbitmq-4369-tcp": [
						"4369",
						"4369",
						"tcp",
						"RabbitMQ epmd",
					],
					"rabbitmq-5671-tcp": [
						"5671",
						"5671",
						"tcp",
						"RabbitMQ",
					],
					"rabbitmq-5672-tcp": [
						"5672",
						"5672",
						"tcp",
						"RabbitMQ",
					],
					"rdp-tcp": [
						"3389",
						"3389",
						"tcp",
						"Remote Desktop",
					],
					"rdp-udp": [
						"3389",
						"3389",
						"udp",
						"Remote Desktop",
					],
					"redis-tcp": [
						"6379",
						"6379",
						"tcp",
						"Redis",
					],
					"redshift-tcp": [
						"5439",
						"5439",
						"tcp",
						"Redshift",
					],
					"solr-tcp": [
						"8983",
						"8987",
						"tcp",
						"Solr",
					],
					"splunk-hec-tcp": [
						"8088",
						"8088",
						"tcp",
						"Splunk HEC",
					],
					"splunk-indexer-tcp": [
						"9997",
						"9997",
						"tcp",
						"Splunk indexer",
					],
					"splunk-splunkd-tcp": [
						"8089",
						"8089",
						"tcp",
						"Splunkd",
					],
					"splunk-web-tcp": [
						"8000",
						"8000",
						"tcp",
						"Splunk Web",
					],
					"squid-proxy-tcp": [
						"3128",
						"3128",
						"tcp",
						"Squid default proxy",
					],
					"ssh-tcp": [
						"22",
						"22",
						"tcp",
						"SSH",
					],
					"storm-nimbus-tcp": [
						"6627",
						"6627",
						"tcp",
						"Nimbus",
					],
					"storm-supervisor-tcp": [
						"6700",
						"6703",
						"tcp",
						"Supervisor",
					],
					"storm-ui-tcp": [
						"8080",
						"8080",
						"tcp",
						"Storm UI",
					],
					"web-jmx-tcp": [
						"1099",
						"1099",
						"tcp",
						"JMX",
					],
					"winrm-http-tcp": [
						"5985",
						"5985",
						"tcp",
						"WinRM HTTP",
					],
					"winrm-https-tcp": [
						"5986",
						"5986",
						"tcp",
						"WinRM HTTPS",
					],
					"zipkin-admin-query-tcp": [
						"9901",
						"9901",
						"tcp",
						"Zipkin Admin port query",
					],
					"zipkin-admin-tcp": [
						"9990",
						"9990",
						"tcp",
						"Zipkin Admin port collector",
					],
					"zipkin-admin-web-tcp": [
						"9991",
						"9991",
						"tcp",
						"Zipkin Admin port web",
					],
					"zipkin-query-tcp": [
						"9411",
						"9411",
						"tcp",
						"Zipkin query port",
					],
					"zipkin-web-tcp": [
						"8080",
						"8080",
						"tcp",
						"Zipkin web port",
					],
					"zookeeper-2181-tcp": [
						"2181",
						"2181",
						"tcp",
						"Zookeeper",
					],
					"zookeeper-2888-tcp": [
						"2888",
						"2888",
						"tcp",
						"Zookeeper",
					],
					"zookeeper-3888-tcp": [
						"3888",
						"3888",
						"tcp",
						"Zookeeper",
					],
					"zookeeper-jmx-tcp": [
						"7199",
						"7199",
						"tcp",
						"JMX",
					],
				},
				"description": "Map of known security group rules (define as 'name' = ['from port', 'to port', 'protocol', 'description'])",
			},
			"tags": {
				"default":     {},
				"description": "A mapping of tags to assign to security group",
			},
			"use_name_prefix": {
				"default":     true,
				"description": "Whether to use name_prefix or fixed name. Should be true to able to update security group name after initial creation",
			},
			"vpc_id": {
				"default":     null,
				"description": "ID of the VPC where to create security group",
			},
		},
	},

	"module.vpc": {
		"data": {
			"aws_iam_policy_document": {
				"flow_log_cloudwatch_assume_role": {
					"config": {
						"statement": [
							{
								"actions": [
									"sts:AssumeRole",
								],
								"effect": "Allow",
								"principals": [
									{
										"identifiers": [
											"vpc-flow-logs.amazonaws.com",
										],
										"type": "Service",
									},
								],
							},
						],
					},
					"provisioners": null,
					"references": {
						"statement": [
							{
								"actions": [],
								"effect":  [],
								"principals": [
									{
										"identifiers": [],
										"type":        [],
									},
								],
							},
						],
					},
				},
				"vpc_flow_log_cloudwatch": {
					"config": {
						"statement": [
							{
								"actions": [
									"logs:CreateLogGroup",
									"logs:CreateLogStream",
									"logs:PutLogEvents",
									"logs:DescribeLogGroups",
									"logs:DescribeLogStreams",
								],
								"effect": "Allow",
								"resources": [
									"*",
								],
								"sid": "AWSVPCFlowLogsPushToCloudWatch",
							},
						],
					},
					"provisioners": null,
					"references": {
						"statement": [
							{
								"actions":   [],
								"effect":    [],
								"resources": [],
								"sid":       [],
							},
						],
					},
				},
			},
			"aws_vpc_endpoint_service": {
				"access_analyzer": {
					"config": {
						"service": "access-analyzer",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"acm_pca": {
					"config": {
						"service": "acm-pca",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"apigw": {
					"config": {
						"service": "execute-api",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"appmesh_envoy_management": {
					"config": {
						"service": "appmesh-envoy-management",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"appstream_api": {
					"config": {
						"service": "appstream.api",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"appstream_streaming": {
					"config": {
						"service": "appstream.streaming",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"athena": {
					"config": {
						"service": "athena",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"auto_scaling_plans": {
					"config": {
						"service": "autoscaling-plans",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"cloud_directory": {
					"config": {
						"service": "clouddirectory",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"cloudformation": {
					"config": {
						"service": "cloudformation",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"cloudtrail": {
					"config": {
						"service": "cloudtrail",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"codeartifact_api": {
					"config": {
						"service": "codeartifact.api",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"codeartifact_repositories": {
					"config": {
						"service": "codeartifact.repositories",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"codebuild": {
					"config": {
						"service": "codebuild",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"codecommit": {
					"config": {
						"service": "codecommit",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"codedeploy": {
					"config": {
						"service": "codedeploy",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"codedeploy_commands_secure": {
					"config": {
						"service": "codedeploy-commands-secure",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"codepipeline": {
					"config": {
						"service": "codepipeline",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"config": {
					"config": {
						"service": "config",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"datasync": {
					"config": {
						"service": "datasync",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"dynamodb": {
					"config": {
						"service": "dynamodb",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"ebs": {
					"config": {
						"service": "ebs",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"ec2": {
					"config": {
						"service": "ec2",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"ec2_autoscaling": {
					"config": {
						"service": "autoscaling",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"ec2messages": {
					"config": {
						"service": "ec2messages",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"ecr_api": {
					"config": {
						"service": "ecr.api",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"ecr_dkr": {
					"config": {
						"service": "ecr.dkr",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"ecs": {
					"config": {
						"service": "ecs",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"ecs_agent": {
					"config": {
						"service": "ecs-agent",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"ecs_telemetry": {
					"config": {
						"service": "ecs-telemetry",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"efs": {
					"config": {
						"service": "elasticfilesystem",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"elastic_inference_runtime": {
					"config": {
						"service": "elastic-inference.runtime",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"elasticbeanstalk": {
					"config": {
						"service": "elasticbeanstalk",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"elasticbeanstalk_health": {
					"config": {
						"service": "elasticbeanstalk-health",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"elasticloadbalancing": {
					"config": {
						"service": "elasticloadbalancing",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"emr": {
					"config": {
						"service": "elasticmapreduce",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"events": {
					"config": {
						"service": "events",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"git_codecommit": {
					"config": {
						"service": "git-codecommit",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"glue": {
					"config": {
						"service": "glue",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"kinesis_firehose": {
					"config": {
						"service": "kinesis-firehose",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"kinesis_streams": {
					"config": {
						"service": "kinesis-streams",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"kms": {
					"config": {
						"service": "kms",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"lambda": {
					"config": {
						"service": "lambda",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"logs": {
					"config": {
						"service": "logs",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"monitoring": {
					"config": {
						"service": "monitoring",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"qldb_session": {
					"config": {
						"service": "qldb.session",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"rds": {
					"config": {
						"service": "rds",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"rekognition": {
					"config": {
						"service": "rekognition",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"s3": {
					"config": {
						"service": "s3",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"sagemaker_api": {
					"config": {
						"service": "sagemaker.api",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"sagemaker_notebook": {
					"config":       {},
					"provisioners": null,
					"references": {
						"service_name": [
							"var.sagemaker_notebook_endpoint_region",
						],
					},
				},
				"sagemaker_runtime": {
					"config": {
						"service": "sagemaker.runtime",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"secretsmanager": {
					"config": {
						"service": "secretsmanager",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"servicecatalog": {
					"config": {
						"service": "servicecatalog",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"ses": {
					"config": {
						"service": "email-smtp",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"sms": {
					"config": {
						"service": "sms",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"sns": {
					"config": {
						"service": "sns",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"sqs": {
					"config": {
						"service": "sqs",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"ssm": {
					"config": {
						"service": "ssm",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"ssmmessages": {
					"config": {
						"service": "ssmmessages",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"states": {
					"config": {
						"service": "states",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"storagegateway": {
					"config": {
						"service": "storagegateway",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"sts": {
					"config": {
						"service": "sts",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"textract": {
					"config": {
						"service": "textract",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"transfer": {
					"config": {
						"service": "transfer",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"transferserver": {
					"config": {
						"service": "transfer.server",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
				"workspaces": {
					"config": {
						"service": "workspaces",
					},
					"provisioners": null,
					"references": {
						"service": [],
					},
				},
			},
		},
		"modules": {},
		"outputs": {
			"azs": {
				"depends_on":  [],
				"description": "A list of availability zones specified as argument to this module",
				"references": [
					"var.azs",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"cgw_arns": {
				"depends_on":  [],
				"description": "List of ARNs of Customer Gateway",
				"references": [
					"aws_customer_gateway.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"cgw_ids": {
				"depends_on":  [],
				"description": "List of IDs of Customer Gateway",
				"references": [
					"aws_customer_gateway.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"database_internet_gateway_route_id": {
				"depends_on":  [],
				"description": "ID of the database internet gateway route.",
				"references": [
					"aws_route.database_internet_gateway",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"database_ipv6_egress_route_id": {
				"depends_on":  [],
				"description": "ID of the database IPv6 egress route.",
				"references": [
					"aws_route.database_ipv6_egress",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"database_nat_gateway_route_ids": {
				"depends_on":  [],
				"description": "List of IDs of the database nat gateway route.",
				"references": [
					"aws_route.database_nat_gateway",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"database_network_acl_arn": {
				"depends_on":  [],
				"description": "ARN of the database network ACL",
				"references": [
					"aws_network_acl.database",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"database_network_acl_id": {
				"depends_on":  [],
				"description": "ID of the database network ACL",
				"references": [
					"aws_network_acl.database",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"database_route_table_association_ids": {
				"depends_on":  [],
				"description": "List of IDs of the database route table association",
				"references": [
					"aws_route_table_association.database",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"database_route_table_ids": {
				"depends_on":  [],
				"description": "List of IDs of database route tables",
				"references": [
					"aws_route_table.database",
					"aws_route_table.database",
					"aws_route_table.private",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"database_subnet_arns": {
				"depends_on":  [],
				"description": "List of ARNs of database subnets",
				"references": [
					"aws_subnet.database",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"database_subnet_group": {
				"depends_on":  [],
				"description": "ID of database subnet group",
				"references": [
					"aws_db_subnet_group.database",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"database_subnets": {
				"depends_on":  [],
				"description": "List of IDs of database subnets",
				"references": [
					"aws_subnet.database",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"database_subnets_cidr_blocks": {
				"depends_on":  [],
				"description": "List of cidr_blocks of database subnets",
				"references": [
					"aws_subnet.database",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"database_subnets_ipv6_cidr_blocks": {
				"depends_on":  [],
				"description": "List of IPv6 cidr_blocks of database subnets in an IPv6 enabled VPC",
				"references": [
					"aws_subnet.database",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"default_network_acl_id": {
				"depends_on":  [],
				"description": "The ID of the default network ACL",
				"references": [
					"aws_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"default_route_table_id": {
				"depends_on":  [],
				"description": "The ID of the default route table",
				"references": [
					"aws_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"default_security_group_id": {
				"depends_on":  [],
				"description": "The ID of the security group created by default on VPC creation",
				"references": [
					"aws_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"default_vpc_arn": {
				"depends_on":  [],
				"description": "The ARN of the VPC",
				"references": [
					"aws_default_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"default_vpc_cidr_block": {
				"depends_on":  [],
				"description": "The CIDR block of the VPC",
				"references": [
					"aws_default_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"default_vpc_default_network_acl_id": {
				"depends_on":  [],
				"description": "The ID of the default network ACL",
				"references": [
					"aws_default_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"default_vpc_default_route_table_id": {
				"depends_on":  [],
				"description": "The ID of the default route table",
				"references": [
					"aws_default_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"default_vpc_default_security_group_id": {
				"depends_on":  [],
				"description": "The ID of the security group created by default on VPC creation",
				"references": [
					"aws_default_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"default_vpc_enable_dns_hostnames": {
				"depends_on":  [],
				"description": "Whether or not the VPC has DNS hostname support",
				"references": [
					"aws_default_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"default_vpc_enable_dns_support": {
				"depends_on":  [],
				"description": "Whether or not the VPC has DNS support",
				"references": [
					"aws_default_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"default_vpc_id": {
				"depends_on":  [],
				"description": "The ID of the VPC",
				"references": [
					"aws_default_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"default_vpc_instance_tenancy": {
				"depends_on":  [],
				"description": "Tenancy of instances spin up within VPC",
				"references": [
					"aws_default_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"default_vpc_main_route_table_id": {
				"depends_on":  [],
				"description": "The ID of the main route table associated with this VPC",
				"references": [
					"aws_default_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"egress_only_internet_gateway_id": {
				"depends_on":  [],
				"description": "The ID of the egress only Internet Gateway",
				"references": [
					"aws_egress_only_internet_gateway.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"elasticache_network_acl_arn": {
				"depends_on":  [],
				"description": "ARN of the elasticache network ACL",
				"references": [
					"aws_network_acl.elasticache",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"elasticache_network_acl_id": {
				"depends_on":  [],
				"description": "ID of the elasticache network ACL",
				"references": [
					"aws_network_acl.elasticache",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"elasticache_route_table_association_ids": {
				"depends_on":  [],
				"description": "List of IDs of the elasticache route table association",
				"references": [
					"aws_route_table_association.elasticache",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"elasticache_route_table_ids": {
				"depends_on":  [],
				"description": "List of IDs of elasticache route tables",
				"references": [
					"aws_route_table.elasticache",
					"aws_route_table.elasticache",
					"aws_route_table.private",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"elasticache_subnet_arns": {
				"depends_on":  [],
				"description": "List of ARNs of elasticache subnets",
				"references": [
					"aws_subnet.elasticache",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"elasticache_subnet_group": {
				"depends_on":  [],
				"description": "ID of elasticache subnet group",
				"references": [
					"aws_elasticache_subnet_group.elasticache",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"elasticache_subnet_group_name": {
				"depends_on":  [],
				"description": "Name of elasticache subnet group",
				"references": [
					"aws_elasticache_subnet_group.elasticache",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"elasticache_subnets": {
				"depends_on":  [],
				"description": "List of IDs of elasticache subnets",
				"references": [
					"aws_subnet.elasticache",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"elasticache_subnets_cidr_blocks": {
				"depends_on":  [],
				"description": "List of cidr_blocks of elasticache subnets",
				"references": [
					"aws_subnet.elasticache",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"elasticache_subnets_ipv6_cidr_blocks": {
				"depends_on":  [],
				"description": "List of IPv6 cidr_blocks of elasticache subnets in an IPv6 enabled VPC",
				"references": [
					"aws_subnet.elasticache",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"igw_arn": {
				"depends_on":  [],
				"description": "The ARN of the Internet Gateway",
				"references": [
					"aws_internet_gateway.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"igw_id": {
				"depends_on":  [],
				"description": "The ID of the Internet Gateway",
				"references": [
					"aws_internet_gateway.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"intra_network_acl_arn": {
				"depends_on":  [],
				"description": "ARN of the intra network ACL",
				"references": [
					"aws_network_acl.intra",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"intra_network_acl_id": {
				"depends_on":  [],
				"description": "ID of the intra network ACL",
				"references": [
					"aws_network_acl.intra",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"intra_route_table_association_ids": {
				"depends_on":  [],
				"description": "List of IDs of the intra route table association",
				"references": [
					"aws_route_table_association.intra",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"intra_route_table_ids": {
				"depends_on":  [],
				"description": "List of IDs of intra route tables",
				"references": [
					"aws_route_table.intra",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"intra_subnet_arns": {
				"depends_on":  [],
				"description": "List of ARNs of intra subnets",
				"references": [
					"aws_subnet.intra",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"intra_subnets": {
				"depends_on":  [],
				"description": "List of IDs of intra subnets",
				"references": [
					"aws_subnet.intra",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"intra_subnets_cidr_blocks": {
				"depends_on":  [],
				"description": "List of cidr_blocks of intra subnets",
				"references": [
					"aws_subnet.intra",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"intra_subnets_ipv6_cidr_blocks": {
				"depends_on":  [],
				"description": "List of IPv6 cidr_blocks of intra subnets in an IPv6 enabled VPC",
				"references": [
					"aws_subnet.intra",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"name": {
				"depends_on":  [],
				"description": "The name of the VPC specified as argument to this module",
				"references": [
					"var.name",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"nat_ids": {
				"depends_on":  [],
				"description": "List of allocation ID of Elastic IPs created for AWS NAT Gateway",
				"references": [
					"aws_eip.nat",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"nat_public_ips": {
				"depends_on":  [],
				"description": "List of public Elastic IPs created for AWS NAT Gateway",
				"references": [
					"var.reuse_nat_ips",
					"var.external_nat_ips",
					"aws_eip.nat",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"natgw_ids": {
				"depends_on":  [],
				"description": "List of NAT Gateway IDs",
				"references": [
					"aws_nat_gateway.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"private_ipv6_egress_route_ids": {
				"depends_on":  [],
				"description": "List of IDs of the ipv6 egress route.",
				"references": [
					"aws_route.private_ipv6_egress",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"private_nat_gateway_route_ids": {
				"depends_on":  [],
				"description": "List of IDs of the private nat gateway route.",
				"references": [
					"aws_route.private_nat_gateway",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"private_network_acl_arn": {
				"depends_on":  [],
				"description": "ARN of the private network ACL",
				"references": [
					"aws_network_acl.private",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"private_network_acl_id": {
				"depends_on":  [],
				"description": "ID of the private network ACL",
				"references": [
					"aws_network_acl.private",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"private_route_table_association_ids": {
				"depends_on":  [],
				"description": "List of IDs of the private route table association",
				"references": [
					"aws_route_table_association.private",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"private_route_table_ids": {
				"depends_on":  [],
				"description": "List of IDs of private route tables",
				"references": [
					"aws_route_table.private",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"private_subnet_arns": {
				"depends_on":  [],
				"description": "List of ARNs of private subnets",
				"references": [
					"aws_subnet.private",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"private_subnets": {
				"depends_on":  [],
				"description": "List of IDs of private subnets",
				"references": [
					"aws_subnet.private",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"private_subnets_cidr_blocks": {
				"depends_on":  [],
				"description": "List of cidr_blocks of private subnets",
				"references": [
					"aws_subnet.private",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"private_subnets_ipv6_cidr_blocks": {
				"depends_on":  [],
				"description": "List of IPv6 cidr_blocks of private subnets in an IPv6 enabled VPC",
				"references": [
					"aws_subnet.private",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"public_internet_gateway_ipv6_route_id": {
				"depends_on":  [],
				"description": "ID of the IPv6 internet gateway route.",
				"references": [
					"aws_route.public_internet_gateway_ipv6",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"public_internet_gateway_route_id": {
				"depends_on":  [],
				"description": "ID of the internet gateway route.",
				"references": [
					"aws_route.public_internet_gateway",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"public_network_acl_arn": {
				"depends_on":  [],
				"description": "ARN of the public network ACL",
				"references": [
					"aws_network_acl.public",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"public_network_acl_id": {
				"depends_on":  [],
				"description": "ID of the public network ACL",
				"references": [
					"aws_network_acl.public",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"public_route_table_association_ids": {
				"depends_on":  [],
				"description": "List of IDs of the public route table association",
				"references": [
					"aws_route_table_association.public",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"public_route_table_ids": {
				"depends_on":  [],
				"description": "List of IDs of public route tables",
				"references": [
					"aws_route_table.public",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"public_subnet_arns": {
				"depends_on":  [],
				"description": "List of ARNs of public subnets",
				"references": [
					"aws_subnet.public",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"public_subnets": {
				"depends_on":  [],
				"description": "List of IDs of public subnets",
				"references": [
					"aws_subnet.public",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"public_subnets_cidr_blocks": {
				"depends_on":  [],
				"description": "List of cidr_blocks of public subnets",
				"references": [
					"aws_subnet.public",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"public_subnets_ipv6_cidr_blocks": {
				"depends_on":  [],
				"description": "List of IPv6 cidr_blocks of public subnets in an IPv6 enabled VPC",
				"references": [
					"aws_subnet.public",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"redshift_network_acl_arn": {
				"depends_on":  [],
				"description": "ARN of the redshift network ACL",
				"references": [
					"aws_network_acl.redshift",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"redshift_network_acl_id": {
				"depends_on":  [],
				"description": "ID of the redshift network ACL",
				"references": [
					"aws_network_acl.redshift",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"redshift_public_route_table_association_ids": {
				"depends_on":  [],
				"description": "List of IDs of the public redshidt route table association",
				"references": [
					"aws_route_table_association.redshift_public",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"redshift_route_table_association_ids": {
				"depends_on":  [],
				"description": "List of IDs of the redshift route table association",
				"references": [
					"aws_route_table_association.redshift",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"redshift_route_table_ids": {
				"depends_on":  [],
				"description": "List of IDs of redshift route tables",
				"references": [
					"aws_route_table.redshift",
					"aws_route_table.redshift",
					"aws_route_table.private",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"redshift_subnet_arns": {
				"depends_on":  [],
				"description": "List of ARNs of redshift subnets",
				"references": [
					"aws_subnet.redshift",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"redshift_subnet_group": {
				"depends_on":  [],
				"description": "ID of redshift subnet group",
				"references": [
					"aws_redshift_subnet_group.redshift",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"redshift_subnets": {
				"depends_on":  [],
				"description": "List of IDs of redshift subnets",
				"references": [
					"aws_subnet.redshift",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"redshift_subnets_cidr_blocks": {
				"depends_on":  [],
				"description": "List of cidr_blocks of redshift subnets",
				"references": [
					"aws_subnet.redshift",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"redshift_subnets_ipv6_cidr_blocks": {
				"depends_on":  [],
				"description": "List of IPv6 cidr_blocks of redshift subnets in an IPv6 enabled VPC",
				"references": [
					"aws_subnet.redshift",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"this_customer_gateway": {
				"depends_on":  [],
				"description": "Map of Customer Gateway attributes",
				"references": [
					"aws_customer_gateway.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vgw_arn": {
				"depends_on":  [],
				"description": "The ARN of the VPN Gateway",
				"references": [
					"aws_vpn_gateway.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vgw_id": {
				"depends_on":  [],
				"description": "The ID of the VPN Gateway",
				"references": [
					"aws_vpn_gateway.this",
					"aws_vpn_gateway_attachment.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_arn": {
				"depends_on":  [],
				"description": "The ARN of the VPC",
				"references": [
					"aws_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_cidr_block": {
				"depends_on":  [],
				"description": "The CIDR block of the VPC",
				"references": [
					"aws_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_enable_dns_hostnames": {
				"depends_on":  [],
				"description": "Whether or not the VPC has DNS hostname support",
				"references": [
					"aws_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_enable_dns_support": {
				"depends_on":  [],
				"description": "Whether or not the VPC has DNS support",
				"references": [
					"aws_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_access_analyzer_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Access Analyzer.",
				"references": [
					"aws_vpc_endpoint.access_analyzer",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_access_analyzer_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Access Analyzer",
				"references": [
					"aws_vpc_endpoint.access_analyzer",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_access_analyzer_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Access Analyzer.",
				"references": [
					"aws_vpc_endpoint.access_analyzer",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_acm_pca_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for ACM PCA.",
				"references": [
					"aws_vpc_endpoint.acm_pca",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_acm_pca_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for ACM PCA",
				"references": [
					"aws_vpc_endpoint.acm_pca",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_acm_pca_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for ACM PCA.",
				"references": [
					"aws_vpc_endpoint.acm_pca",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_apigw_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for APIGW.",
				"references": [
					"aws_vpc_endpoint.apigw",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_apigw_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for APIGW",
				"references": [
					"aws_vpc_endpoint.apigw",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_apigw_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for APIGW.",
				"references": [
					"aws_vpc_endpoint.apigw",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_appmesh_envoy_management_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for AppMesh.",
				"references": [
					"aws_vpc_endpoint.appmesh_envoy_management",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_appmesh_envoy_management_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for AppMesh",
				"references": [
					"aws_vpc_endpoint.appmesh_envoy_management",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_appmesh_envoy_management_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for AppMesh.",
				"references": [
					"aws_vpc_endpoint.appmesh_envoy_management",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_appstream_api_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for AppStream API.",
				"references": [
					"aws_vpc_endpoint.appstream_api",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_appstream_api_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for AppStream API",
				"references": [
					"aws_vpc_endpoint.appstream_api",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_appstream_api_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for AppStream API.",
				"references": [
					"aws_vpc_endpoint.appstream_api",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_appstream_streaming_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for AppStream Streaming.",
				"references": [
					"aws_vpc_endpoint.appstream_streaming",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_appstream_streaming_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for AppStream Streaming",
				"references": [
					"aws_vpc_endpoint.appstream_streaming",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_appstream_streaming_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for AppStream Streaming.",
				"references": [
					"aws_vpc_endpoint.appstream_streaming",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_athena_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Athena.",
				"references": [
					"aws_vpc_endpoint.athena",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_athena_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Athena",
				"references": [
					"aws_vpc_endpoint.athena",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_athena_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Athena.",
				"references": [
					"aws_vpc_endpoint.athena",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_auto_scaling_plans_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Auto Scaling Plans.",
				"references": [
					"aws_vpc_endpoint.auto_scaling_plans",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_auto_scaling_plans_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Auto Scaling Plans",
				"references": [
					"aws_vpc_endpoint.auto_scaling_plans",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_auto_scaling_plans_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Auto Scaling Plans.",
				"references": [
					"aws_vpc_endpoint.auto_scaling_plans",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_cloud_directory_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Cloud Directory.",
				"references": [
					"aws_vpc_endpoint.cloud_directory",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_cloud_directory_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Cloud Directory",
				"references": [
					"aws_vpc_endpoint.cloud_directory",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_cloud_directory_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Cloud Directory.",
				"references": [
					"aws_vpc_endpoint.cloud_directory",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_cloudformation_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Cloudformation.",
				"references": [
					"aws_vpc_endpoint.cloudformation",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_cloudformation_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Cloudformation",
				"references": [
					"aws_vpc_endpoint.cloudformation",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_cloudformation_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Cloudformation.",
				"references": [
					"aws_vpc_endpoint.cloudformation",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_cloudtrail_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for CloudTrail.",
				"references": [
					"aws_vpc_endpoint.cloudtrail",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_cloudtrail_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for CloudTrail",
				"references": [
					"aws_vpc_endpoint.cloudtrail",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_cloudtrail_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for CloudTrail.",
				"references": [
					"aws_vpc_endpoint.cloudtrail",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_codeartifact_api_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Codeartifact API.",
				"references": [
					"aws_vpc_endpoint.codeartifact_api",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_codeartifact_api_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Codeartifact API",
				"references": [
					"aws_vpc_endpoint.codeartifact_api",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_codeartifact_api_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Codeartifact API.",
				"references": [
					"aws_vpc_endpoint.codeartifact_api",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_codeartifact_repositories_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Codeartifact repositories.",
				"references": [
					"aws_vpc_endpoint.codeartifact_repositories",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_codeartifact_repositories_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Codeartifact repositories",
				"references": [
					"aws_vpc_endpoint.codeartifact_repositories",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_codeartifact_repositories_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Codeartifact repositories.",
				"references": [
					"aws_vpc_endpoint.codeartifact_repositories",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_codebuild_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for codebuild.",
				"references": [
					"aws_vpc_endpoint.codebuild",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_codebuild_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for codebuild",
				"references": [
					"aws_vpc_endpoint.codebuild",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_codebuild_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for codebuild.",
				"references": [
					"aws_vpc_endpoint.codebuild",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_codecommit_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for codecommit.",
				"references": [
					"aws_vpc_endpoint.codecommit",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_codecommit_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for codecommit",
				"references": [
					"aws_vpc_endpoint.codecommit",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_codecommit_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for codecommit.",
				"references": [
					"aws_vpc_endpoint.codecommit",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_codepipeline_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for CodePipeline.",
				"references": [
					"aws_vpc_endpoint.codepipeline",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_codepipeline_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for CodePipeline",
				"references": [
					"aws_vpc_endpoint.codepipeline",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_codepipeline_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for CodePipeline.",
				"references": [
					"aws_vpc_endpoint.codepipeline",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_config_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for config.",
				"references": [
					"aws_vpc_endpoint.config",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_config_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for config",
				"references": [
					"aws_vpc_endpoint.config",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_config_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for config.",
				"references": [
					"aws_vpc_endpoint.config",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_datasync_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for DataSync.",
				"references": [
					"aws_vpc_endpoint.datasync",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_datasync_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for DataSync",
				"references": [
					"aws_vpc_endpoint.datasync",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_datasync_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for DataSync.",
				"references": [
					"aws_vpc_endpoint.datasync",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_dynamodb_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for DynamoDB",
				"references": [
					"aws_vpc_endpoint.dynamodb",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_dynamodb_pl_id": {
				"depends_on":  [],
				"description": "The prefix list for the DynamoDB VPC endpoint.",
				"references": [
					"aws_vpc_endpoint.dynamodb",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ebs_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for EBS.",
				"references": [
					"aws_vpc_endpoint.ebs",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ebs_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for EBS",
				"references": [
					"aws_vpc_endpoint.ebs",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ebs_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for EBS.",
				"references": [
					"aws_vpc_endpoint.ebs",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ec2_autoscaling_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for EC2 Autoscaling.",
				"references": [
					"aws_vpc_endpoint.ec2_autoscaling",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ec2_autoscaling_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for EC2 Autoscaling",
				"references": [
					"aws_vpc_endpoint.ec2_autoscaling",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ec2_autoscaling_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for EC2 Autoscaling",
				"references": [
					"aws_vpc_endpoint.ec2_autoscaling",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ec2_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for EC2.",
				"references": [
					"aws_vpc_endpoint.ec2",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ec2_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for EC2",
				"references": [
					"aws_vpc_endpoint.ec2",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ec2_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for EC2",
				"references": [
					"aws_vpc_endpoint.ec2",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ec2messages_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for EC2MESSAGES.",
				"references": [
					"aws_vpc_endpoint.ec2messages",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ec2messages_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for EC2MESSAGES",
				"references": [
					"aws_vpc_endpoint.ec2messages",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ec2messages_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for EC2MESSAGES",
				"references": [
					"aws_vpc_endpoint.ec2messages",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ecr_api_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for ECR API.",
				"references": [
					"aws_vpc_endpoint.ecr_api",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ecr_api_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for ECR API",
				"references": [
					"aws_vpc_endpoint.ecr_api",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ecr_api_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for ECR API.",
				"references": [
					"aws_vpc_endpoint.ecr_api",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ecr_dkr_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for ECR DKR.",
				"references": [
					"aws_vpc_endpoint.ecr_dkr",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ecr_dkr_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for ECR DKR",
				"references": [
					"aws_vpc_endpoint.ecr_dkr",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ecr_dkr_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for ECR DKR.",
				"references": [
					"aws_vpc_endpoint.ecr_dkr",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ecs_agent_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for ECS Agent.",
				"references": [
					"aws_vpc_endpoint.ecs_agent",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ecs_agent_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for ECS Agent",
				"references": [
					"aws_vpc_endpoint.ecs_agent",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ecs_agent_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for ECS Agent.",
				"references": [
					"aws_vpc_endpoint.ecs_agent",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ecs_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for ECS.",
				"references": [
					"aws_vpc_endpoint.ecs",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ecs_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for ECS",
				"references": [
					"aws_vpc_endpoint.ecs",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ecs_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for ECS.",
				"references": [
					"aws_vpc_endpoint.ecs",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ecs_telemetry_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for ECS Telemetry.",
				"references": [
					"aws_vpc_endpoint.ecs_telemetry",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ecs_telemetry_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for ECS Telemetry",
				"references": [
					"aws_vpc_endpoint.ecs_telemetry",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ecs_telemetry_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for ECS Telemetry.",
				"references": [
					"aws_vpc_endpoint.ecs_telemetry",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_efs_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for EFS.",
				"references": [
					"aws_vpc_endpoint.efs",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_efs_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for EFS",
				"references": [
					"aws_vpc_endpoint.efs",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_efs_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for EFS.",
				"references": [
					"aws_vpc_endpoint.efs",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_elastic_inference_runtime_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Elastic Inference Runtime.",
				"references": [
					"aws_vpc_endpoint.elastic_inference_runtime",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_elastic_inference_runtime_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Elastic Inference Runtime",
				"references": [
					"aws_vpc_endpoint.elastic_inference_runtime",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_elastic_inference_runtime_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Elastic Inference Runtime.",
				"references": [
					"aws_vpc_endpoint.elastic_inference_runtime",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_elasticbeanstalk_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Elastic Beanstalk.",
				"references": [
					"aws_vpc_endpoint.elasticbeanstalk",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_elasticbeanstalk_health_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Elastic Beanstalk Health.",
				"references": [
					"aws_vpc_endpoint.elasticbeanstalk_health",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_elasticbeanstalk_health_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Elastic Beanstalk Health",
				"references": [
					"aws_vpc_endpoint.elasticbeanstalk_health",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_elasticbeanstalk_health_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Elastic Beanstalk Health.",
				"references": [
					"aws_vpc_endpoint.elasticbeanstalk_health",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_elasticbeanstalk_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Elastic Beanstalk",
				"references": [
					"aws_vpc_endpoint.elasticbeanstalk",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_elasticbeanstalk_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Elastic Beanstalk.",
				"references": [
					"aws_vpc_endpoint.elasticbeanstalk",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_elasticloadbalancing_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Elastic Load Balancing.",
				"references": [
					"aws_vpc_endpoint.elasticloadbalancing",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_elasticloadbalancing_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Elastic Load Balancing",
				"references": [
					"aws_vpc_endpoint.elasticloadbalancing",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_elasticloadbalancing_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Elastic Load Balancing.",
				"references": [
					"aws_vpc_endpoint.elasticloadbalancing",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_elasticmapreduce_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for EMR.",
				"references": [
					"aws_vpc_endpoint.emr",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_elasticmapreduce_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for EMR",
				"references": [
					"aws_vpc_endpoint.emr",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_elasticmapreduce_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for EMR.",
				"references": [
					"aws_vpc_endpoint.emr",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_events_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for CloudWatch Events.",
				"references": [
					"aws_vpc_endpoint.events",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_events_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for CloudWatch Events",
				"references": [
					"aws_vpc_endpoint.events",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_events_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for CloudWatch Events.",
				"references": [
					"aws_vpc_endpoint.events",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_git_codecommit_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for git_codecommit.",
				"references": [
					"aws_vpc_endpoint.git_codecommit",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_git_codecommit_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for git_codecommit",
				"references": [
					"aws_vpc_endpoint.git_codecommit",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_git_codecommit_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for git_codecommit.",
				"references": [
					"aws_vpc_endpoint.git_codecommit",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_glue_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Glue.",
				"references": [
					"aws_vpc_endpoint.glue",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_glue_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Glue",
				"references": [
					"aws_vpc_endpoint.glue",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_glue_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Glue.",
				"references": [
					"aws_vpc_endpoint.glue",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_kinesis_firehose_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Kinesis Firehose.",
				"references": [
					"aws_vpc_endpoint.kinesis_firehose",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_kinesis_firehose_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Kinesis Firehose",
				"references": [
					"aws_vpc_endpoint.kinesis_firehose",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_kinesis_firehose_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Kinesis Firehose.",
				"references": [
					"aws_vpc_endpoint.kinesis_firehose",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_kinesis_streams_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Kinesis Streams.",
				"references": [
					"aws_vpc_endpoint.kinesis_streams",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_kinesis_streams_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Kinesis Streams",
				"references": [
					"aws_vpc_endpoint.kinesis_streams",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_kinesis_streams_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Kinesis Streams.",
				"references": [
					"aws_vpc_endpoint.kinesis_streams",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_kms_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for KMS.",
				"references": [
					"aws_vpc_endpoint.kms",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_kms_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for KMS",
				"references": [
					"aws_vpc_endpoint.kms",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_kms_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for KMS.",
				"references": [
					"aws_vpc_endpoint.kms",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_lambda_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Lambda.",
				"references": [
					"aws_vpc_endpoint.lambda",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_lambda_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Lambda",
				"references": [
					"aws_vpc_endpoint.lambda",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_lambda_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Lambda.",
				"references": [
					"aws_vpc_endpoint.lambda",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_logs_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for CloudWatch Logs.",
				"references": [
					"aws_vpc_endpoint.logs",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_logs_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for CloudWatch Logs",
				"references": [
					"aws_vpc_endpoint.logs",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_logs_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for CloudWatch Logs.",
				"references": [
					"aws_vpc_endpoint.logs",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_monitoring_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for CloudWatch Monitoring.",
				"references": [
					"aws_vpc_endpoint.monitoring",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_monitoring_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for CloudWatch Monitoring",
				"references": [
					"aws_vpc_endpoint.monitoring",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_monitoring_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for CloudWatch Monitoring.",
				"references": [
					"aws_vpc_endpoint.monitoring",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_qldb_session_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for QLDB Session.",
				"references": [
					"aws_vpc_endpoint.qldb_session",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_qldb_session_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for QLDB Session",
				"references": [
					"aws_vpc_endpoint.qldb_session",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_qldb_session_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for QLDB Session.",
				"references": [
					"aws_vpc_endpoint.qldb_session",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_rekognition_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Rekognition.",
				"references": [
					"aws_vpc_endpoint.rekognition",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_rekognition_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Rekognition",
				"references": [
					"aws_vpc_endpoint.rekognition",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_rekognition_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Rekognition.",
				"references": [
					"aws_vpc_endpoint.rekognition",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_s3_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for S3",
				"references": [
					"aws_vpc_endpoint.s3",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_s3_pl_id": {
				"depends_on":  [],
				"description": "The prefix list for the S3 VPC endpoint.",
				"references": [
					"aws_vpc_endpoint.s3",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sagemaker_api_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for SageMaker API.",
				"references": [
					"aws_vpc_endpoint.sagemaker_api",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sagemaker_api_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for SageMaker API",
				"references": [
					"aws_vpc_endpoint.sagemaker_api",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sagemaker_api_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for SageMaker API.",
				"references": [
					"aws_vpc_endpoint.sagemaker_api",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sagemaker_runtime_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for SageMaker Runtime.",
				"references": [
					"aws_vpc_endpoint.sagemaker_runtime",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sagemaker_runtime_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for SageMaker Runtime",
				"references": [
					"aws_vpc_endpoint.sagemaker_runtime",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sagemaker_runtime_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for SageMaker Runtime.",
				"references": [
					"aws_vpc_endpoint.sagemaker_runtime",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_secretsmanager_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for secretsmanager.",
				"references": [
					"aws_vpc_endpoint.secretsmanager",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_secretsmanager_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for secretsmanager",
				"references": [
					"aws_vpc_endpoint.secretsmanager",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_secretsmanager_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for secretsmanager.",
				"references": [
					"aws_vpc_endpoint.secretsmanager",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_servicecatalog_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Service Catalog.",
				"references": [
					"aws_vpc_endpoint.servicecatalog",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_servicecatalog_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Service Catalog",
				"references": [
					"aws_vpc_endpoint.servicecatalog",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_servicecatalog_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Service Catalog.",
				"references": [
					"aws_vpc_endpoint.servicecatalog",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ses_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for SES.",
				"references": [
					"aws_vpc_endpoint.ses",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ses_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for SES",
				"references": [
					"aws_vpc_endpoint.ses",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ses_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for SES.",
				"references": [
					"aws_vpc_endpoint.ses",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sms_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for SMS.",
				"references": [
					"aws_vpc_endpoint.sms",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sms_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for SMS",
				"references": [
					"aws_vpc_endpoint.sms",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sms_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for SMS.",
				"references": [
					"aws_vpc_endpoint.sms",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sns_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for SNS.",
				"references": [
					"aws_vpc_endpoint.sns",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sns_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for SNS",
				"references": [
					"aws_vpc_endpoint.sns",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sns_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for SNS.",
				"references": [
					"aws_vpc_endpoint.sns",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sqs_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for SQS.",
				"references": [
					"aws_vpc_endpoint.sqs",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sqs_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for SQS",
				"references": [
					"aws_vpc_endpoint.sqs",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sqs_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for SQS.",
				"references": [
					"aws_vpc_endpoint.sqs",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ssm_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for SSM.",
				"references": [
					"aws_vpc_endpoint.ssm",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ssm_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for SSM",
				"references": [
					"aws_vpc_endpoint.ssm",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ssm_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for SSM.",
				"references": [
					"aws_vpc_endpoint.ssm",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ssmmessages_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for SSMMESSAGES.",
				"references": [
					"aws_vpc_endpoint.ssmmessages",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ssmmessages_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for SSMMESSAGES",
				"references": [
					"aws_vpc_endpoint.ssmmessages",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_ssmmessages_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for SSMMESSAGES.",
				"references": [
					"aws_vpc_endpoint.ssmmessages",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_states_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Step Function.",
				"references": [
					"aws_vpc_endpoint.states",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_states_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Step Function",
				"references": [
					"aws_vpc_endpoint.states",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_states_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Step Function.",
				"references": [
					"aws_vpc_endpoint.states",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_storagegateway_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Storage Gateway.",
				"references": [
					"aws_vpc_endpoint.storagegateway",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_storagegateway_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Storage Gateway",
				"references": [
					"aws_vpc_endpoint.storagegateway",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_storagegateway_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Storage Gateway.",
				"references": [
					"aws_vpc_endpoint.storagegateway",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sts_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for STS.",
				"references": [
					"aws_vpc_endpoint.sts",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sts_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for STS",
				"references": [
					"aws_vpc_endpoint.sts",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_sts_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for STS.",
				"references": [
					"aws_vpc_endpoint.sts",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_textract_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Textract.",
				"references": [
					"aws_vpc_endpoint.textract",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_textract_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Textract",
				"references": [
					"aws_vpc_endpoint.textract",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_textract_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Textract.",
				"references": [
					"aws_vpc_endpoint.textract",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_transfer_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Transfer.",
				"references": [
					"aws_vpc_endpoint.transfer",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_transfer_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Transfer",
				"references": [
					"aws_vpc_endpoint.transfer",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_transfer_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Transfer.",
				"references": [
					"aws_vpc_endpoint.transfer",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_transferserver_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for transferserver.",
				"references": [
					"aws_vpc_endpoint.transferserver",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_transferserver_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for transferserver",
				"references": [
					"aws_vpc_endpoint.transferserver",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_transferserver_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for transferserver",
				"references": [
					"aws_vpc_endpoint.transferserver",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_workspaces_dns_entry": {
				"depends_on":  [],
				"description": "The DNS entries for the VPC Endpoint for Workspaces.",
				"references": [
					"aws_vpc_endpoint.workspaces",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_workspaces_id": {
				"depends_on":  [],
				"description": "The ID of VPC endpoint for Workspaces",
				"references": [
					"aws_vpc_endpoint.workspaces",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_endpoint_workspaces_network_interface_ids": {
				"depends_on":  [],
				"description": "One or more network interfaces for the VPC Endpoint for Workspaces.",
				"references": [
					"aws_vpc_endpoint.workspaces",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_flow_log_cloudwatch_iam_role_arn": {
				"depends_on":  [],
				"description": "The ARN of the IAM role used when pushing logs to Cloudwatch log group",
				"references": [
					"local.flow_log_iam_role_arn",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_flow_log_destination_arn": {
				"depends_on":  [],
				"description": "The ARN of the destination for VPC Flow Logs",
				"references": [
					"local.flow_log_destination_arn",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_flow_log_destination_type": {
				"depends_on":  [],
				"description": "The type of the destination for VPC Flow Logs",
				"references": [
					"var.flow_log_destination_type",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_flow_log_id": {
				"depends_on":  [],
				"description": "The ID of the Flow Log resource",
				"references": [
					"aws_flow_log.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_id": {
				"depends_on":  [],
				"description": "The ID of the VPC",
				"references": [
					"aws_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_instance_tenancy": {
				"depends_on":  [],
				"description": "Tenancy of instances spin up within VPC",
				"references": [
					"aws_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_ipv6_association_id": {
				"depends_on":  [],
				"description": "The association ID for the IPv6 CIDR block",
				"references": [
					"aws_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_ipv6_cidr_block": {
				"depends_on":  [],
				"description": "The IPv6 CIDR block",
				"references": [
					"aws_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_main_route_table_id": {
				"depends_on":  [],
				"description": "The ID of the main route table associated with this VPC",
				"references": [
					"aws_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_owner_id": {
				"depends_on":  [],
				"description": "The ID of the AWS account that owns the VPC",
				"references": [
					"aws_vpc.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"vpc_secondary_cidr_blocks": {
				"depends_on":  [],
				"description": "List of secondary CIDR blocks of the VPC",
				"references": [
					"aws_vpc_ipv4_cidr_block_association.this",
				],
				"sensitive": false,
				"value":     undefined,
			},
		},
		"providers": {},
		"resources": {
			"aws_cloudwatch_log_group": {
				"flow_log": {
					"config":       {},
					"provisioners": null,
					"references": {
						"kms_key_id": [
							"var.flow_log_cloudwatch_log_group_kms_key_id",
						],
						"name": [
							"var.flow_log_cloudwatch_log_group_name_prefix",
							"local.vpc_id",
						],
						"retention_in_days": [
							"var.flow_log_cloudwatch_log_group_retention_in_days",
						],
						"tags": [
							"var.tags",
							"var.vpc_flow_log_tags",
						],
					},
				},
			},
			"aws_customer_gateway": {
				"this": {
					"config": {
						"type": "ipsec.1",
					},
					"provisioners": null,
					"references": {
						"bgp_asn": [
							"each.value[\"bgp_asn\"]",
							"each.value",
						],
						"ip_address": [
							"each.value[\"ip_address\"]",
							"each.value",
						],
						"tags": [
							"var.name",
							"each.key",
							"var.tags",
							"var.customer_gateway_tags",
						],
						"type": [],
					},
				},
			},
			"aws_db_subnet_group": {
				"database": {
					"config":       {},
					"provisioners": null,
					"references": {
						"description": [
							"var.name",
						],
						"name": [
							"var.name",
						],
						"subnet_ids": [
							"aws_subnet.database",
						],
						"tags": [
							"var.name",
							"var.tags",
							"var.database_subnet_group_tags",
						],
					},
				},
			},
			"aws_default_network_acl": {
				"this": {
					"config":       {},
					"provisioners": null,
					"references": {
						"default_network_acl_id": [
							"aws_vpc.this",
						],
						"subnet_ids": [
							"aws_subnet.public",
							"aws_subnet.private",
							"aws_subnet.intra",
							"aws_subnet.database",
							"aws_subnet.redshift",
							"aws_subnet.elasticache",
							"aws_network_acl.public",
							"aws_network_acl.private",
							"aws_network_acl.intra",
							"aws_network_acl.database",
							"aws_network_acl.redshift",
							"aws_network_acl.elasticache",
						],
						"tags": [
							"var.default_network_acl_name",
							"var.tags",
							"var.default_network_acl_tags",
						],
					},
				},
			},
			"aws_default_security_group": {
				"this": {
					"config":       {},
					"provisioners": null,
					"references": {
						"tags": [
							"var.default_security_group_name",
							"var.tags",
							"var.default_security_group_tags",
						],
						"vpc_id": [
							"aws_vpc.this[0].id",
							"aws_vpc.this[0]",
							"aws_vpc.this",
						],
					},
				},
			},
			"aws_default_vpc": {
				"this": {
					"config":       {},
					"provisioners": null,
					"references": {
						"enable_classiclink": [
							"var.default_vpc_enable_classiclink",
						],
						"enable_dns_hostnames": [
							"var.default_vpc_enable_dns_hostnames",
						],
						"enable_dns_support": [
							"var.default_vpc_enable_dns_support",
						],
						"tags": [
							"var.default_vpc_name",
							"var.tags",
							"var.default_vpc_tags",
						],
					},
				},
			},
			"aws_egress_only_internet_gateway": {
				"this": {
					"config":       {},
					"provisioners": null,
					"references": {
						"tags": [
							"var.name",
							"var.tags",
							"var.igw_tags",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
			},
			"aws_eip": {
				"nat": {
					"config": {
						"vpc": true,
					},
					"provisioners": null,
					"references": {
						"tags": [
							"var.name",
							"var.azs",
							"var.single_nat_gateway",
							"count.index",
							"var.tags",
							"var.nat_eip_tags",
						],
						"vpc": [],
					},
				},
			},
			"aws_elasticache_subnet_group": {
				"elasticache": {
					"config":       {},
					"provisioners": null,
					"references": {
						"description": [
							"var.name",
						],
						"name": [
							"var.name",
						],
						"subnet_ids": [
							"aws_subnet.elasticache",
						],
					},
				},
			},
			"aws_flow_log": {
				"this": {
					"config":       {},
					"provisioners": null,
					"references": {
						"iam_role_arn": [
							"local.flow_log_iam_role_arn",
						],
						"log_destination": [
							"local.flow_log_destination_arn",
						],
						"log_destination_type": [
							"var.flow_log_destination_type",
						],
						"log_format": [
							"var.flow_log_log_format",
						],
						"max_aggregation_interval": [
							"var.flow_log_max_aggregation_interval",
						],
						"tags": [
							"var.tags",
							"var.vpc_flow_log_tags",
						],
						"traffic_type": [
							"var.flow_log_traffic_type",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
			},
			"aws_iam_policy": {
				"vpc_flow_log_cloudwatch": {
					"config": {
						"name_prefix": "vpc-flow-log-to-cloudwatch-",
					},
					"provisioners": null,
					"references": {
						"name_prefix": [],
						"policy": [
							"data.aws_iam_policy_document.vpc_flow_log_cloudwatch[0].json",
							"data.aws_iam_policy_document.vpc_flow_log_cloudwatch[0]",
							"data.aws_iam_policy_document.vpc_flow_log_cloudwatch",
						],
					},
				},
			},
			"aws_iam_role": {
				"vpc_flow_log_cloudwatch": {
					"config": {
						"name_prefix": "vpc-flow-log-role-",
					},
					"provisioners": null,
					"references": {
						"assume_role_policy": [
							"data.aws_iam_policy_document.flow_log_cloudwatch_assume_role[0].json",
							"data.aws_iam_policy_document.flow_log_cloudwatch_assume_role[0]",
							"data.aws_iam_policy_document.flow_log_cloudwatch_assume_role",
						],
						"name_prefix": [],
						"tags": [
							"var.tags",
							"var.vpc_flow_log_tags",
						],
					},
				},
			},
			"aws_iam_role_policy_attachment": {
				"vpc_flow_log_cloudwatch": {
					"config":       {},
					"provisioners": null,
					"references": {
						"policy_arn": [
							"aws_iam_policy.vpc_flow_log_cloudwatch[0].arn",
							"aws_iam_policy.vpc_flow_log_cloudwatch[0]",
							"aws_iam_policy.vpc_flow_log_cloudwatch",
						],
						"role": [
							"aws_iam_role.vpc_flow_log_cloudwatch[0].name",
							"aws_iam_role.vpc_flow_log_cloudwatch[0]",
							"aws_iam_role.vpc_flow_log_cloudwatch",
						],
					},
				},
			},
			"aws_internet_gateway": {
				"this": {
					"config":       {},
					"provisioners": null,
					"references": {
						"tags": [
							"var.name",
							"var.tags",
							"var.igw_tags",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
			},
			"aws_nat_gateway": {
				"this": {
					"config":       {},
					"provisioners": null,
					"references": {
						"allocation_id": [
							"local.nat_gateway_ips",
							"var.single_nat_gateway",
							"count.index",
						],
						"subnet_id": [
							"aws_subnet.public",
							"var.single_nat_gateway",
							"count.index",
						],
						"tags": [
							"var.name",
							"var.azs",
							"var.single_nat_gateway",
							"count.index",
							"var.tags",
							"var.nat_gateway_tags",
						],
					},
				},
			},
			"aws_network_acl": {
				"database": {
					"config":       {},
					"provisioners": null,
					"references": {
						"subnet_ids": [
							"aws_subnet.database",
						],
						"tags": [
							"var.database_subnet_suffix",
							"var.name",
							"var.tags",
							"var.database_acl_tags",
						],
						"vpc_id": [
							"aws_vpc.this",
						],
					},
				},
				"elasticache": {
					"config":       {},
					"provisioners": null,
					"references": {
						"subnet_ids": [
							"aws_subnet.elasticache",
						],
						"tags": [
							"var.elasticache_subnet_suffix",
							"var.name",
							"var.tags",
							"var.elasticache_acl_tags",
						],
						"vpc_id": [
							"aws_vpc.this",
						],
					},
				},
				"intra": {
					"config":       {},
					"provisioners": null,
					"references": {
						"subnet_ids": [
							"aws_subnet.intra",
						],
						"tags": [
							"var.intra_subnet_suffix",
							"var.name",
							"var.tags",
							"var.intra_acl_tags",
						],
						"vpc_id": [
							"aws_vpc.this",
						],
					},
				},
				"private": {
					"config":       {},
					"provisioners": null,
					"references": {
						"subnet_ids": [
							"aws_subnet.private",
						],
						"tags": [
							"var.private_subnet_suffix",
							"var.name",
							"var.tags",
							"var.private_acl_tags",
						],
						"vpc_id": [
							"aws_vpc.this",
						],
					},
				},
				"public": {
					"config":       {},
					"provisioners": null,
					"references": {
						"subnet_ids": [
							"aws_subnet.public",
						],
						"tags": [
							"var.public_subnet_suffix",
							"var.name",
							"var.tags",
							"var.public_acl_tags",
						],
						"vpc_id": [
							"aws_vpc.this",
						],
					},
				},
				"redshift": {
					"config":       {},
					"provisioners": null,
					"references": {
						"subnet_ids": [
							"aws_subnet.redshift",
						],
						"tags": [
							"var.redshift_subnet_suffix",
							"var.name",
							"var.tags",
							"var.redshift_acl_tags",
						],
						"vpc_id": [
							"aws_vpc.this",
						],
					},
				},
			},
			"aws_network_acl_rule": {
				"database_inbound": {
					"config": {
						"egress": false,
					},
					"provisioners": null,
					"references": {
						"cidr_block": [
							"var.database_inbound_acl_rules",
							"count.index",
						],
						"egress": [],
						"from_port": [
							"var.database_inbound_acl_rules",
							"count.index",
						],
						"icmp_code": [
							"var.database_inbound_acl_rules",
							"count.index",
						],
						"icmp_type": [
							"var.database_inbound_acl_rules",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.database_inbound_acl_rules",
							"count.index",
						],
						"network_acl_id": [
							"aws_network_acl.database[0].id",
							"aws_network_acl.database[0]",
							"aws_network_acl.database",
						],
						"protocol": [
							"var.database_inbound_acl_rules",
							"count.index",
						],
						"rule_action": [
							"var.database_inbound_acl_rules",
							"count.index",
						],
						"rule_number": [
							"var.database_inbound_acl_rules",
							"count.index",
						],
						"to_port": [
							"var.database_inbound_acl_rules",
							"count.index",
						],
					},
				},
				"database_outbound": {
					"config": {
						"egress": true,
					},
					"provisioners": null,
					"references": {
						"cidr_block": [
							"var.database_outbound_acl_rules",
							"count.index",
						],
						"egress": [],
						"from_port": [
							"var.database_outbound_acl_rules",
							"count.index",
						],
						"icmp_code": [
							"var.database_outbound_acl_rules",
							"count.index",
						],
						"icmp_type": [
							"var.database_outbound_acl_rules",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.database_outbound_acl_rules",
							"count.index",
						],
						"network_acl_id": [
							"aws_network_acl.database[0].id",
							"aws_network_acl.database[0]",
							"aws_network_acl.database",
						],
						"protocol": [
							"var.database_outbound_acl_rules",
							"count.index",
						],
						"rule_action": [
							"var.database_outbound_acl_rules",
							"count.index",
						],
						"rule_number": [
							"var.database_outbound_acl_rules",
							"count.index",
						],
						"to_port": [
							"var.database_outbound_acl_rules",
							"count.index",
						],
					},
				},
				"elasticache_inbound": {
					"config": {
						"egress": false,
					},
					"provisioners": null,
					"references": {
						"cidr_block": [
							"var.elasticache_inbound_acl_rules",
							"count.index",
						],
						"egress": [],
						"from_port": [
							"var.elasticache_inbound_acl_rules",
							"count.index",
						],
						"icmp_code": [
							"var.elasticache_inbound_acl_rules",
							"count.index",
						],
						"icmp_type": [
							"var.elasticache_inbound_acl_rules",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.elasticache_inbound_acl_rules",
							"count.index",
						],
						"network_acl_id": [
							"aws_network_acl.elasticache[0].id",
							"aws_network_acl.elasticache[0]",
							"aws_network_acl.elasticache",
						],
						"protocol": [
							"var.elasticache_inbound_acl_rules",
							"count.index",
						],
						"rule_action": [
							"var.elasticache_inbound_acl_rules",
							"count.index",
						],
						"rule_number": [
							"var.elasticache_inbound_acl_rules",
							"count.index",
						],
						"to_port": [
							"var.elasticache_inbound_acl_rules",
							"count.index",
						],
					},
				},
				"elasticache_outbound": {
					"config": {
						"egress": true,
					},
					"provisioners": null,
					"references": {
						"cidr_block": [
							"var.elasticache_outbound_acl_rules",
							"count.index",
						],
						"egress": [],
						"from_port": [
							"var.elasticache_outbound_acl_rules",
							"count.index",
						],
						"icmp_code": [
							"var.elasticache_outbound_acl_rules",
							"count.index",
						],
						"icmp_type": [
							"var.elasticache_outbound_acl_rules",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.elasticache_outbound_acl_rules",
							"count.index",
						],
						"network_acl_id": [
							"aws_network_acl.elasticache[0].id",
							"aws_network_acl.elasticache[0]",
							"aws_network_acl.elasticache",
						],
						"protocol": [
							"var.elasticache_outbound_acl_rules",
							"count.index",
						],
						"rule_action": [
							"var.elasticache_outbound_acl_rules",
							"count.index",
						],
						"rule_number": [
							"var.elasticache_outbound_acl_rules",
							"count.index",
						],
						"to_port": [
							"var.elasticache_outbound_acl_rules",
							"count.index",
						],
					},
				},
				"intra_inbound": {
					"config": {
						"egress": false,
					},
					"provisioners": null,
					"references": {
						"cidr_block": [
							"var.intra_inbound_acl_rules",
							"count.index",
						],
						"egress": [],
						"from_port": [
							"var.intra_inbound_acl_rules",
							"count.index",
						],
						"icmp_code": [
							"var.intra_inbound_acl_rules",
							"count.index",
						],
						"icmp_type": [
							"var.intra_inbound_acl_rules",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.intra_inbound_acl_rules",
							"count.index",
						],
						"network_acl_id": [
							"aws_network_acl.intra[0].id",
							"aws_network_acl.intra[0]",
							"aws_network_acl.intra",
						],
						"protocol": [
							"var.intra_inbound_acl_rules",
							"count.index",
						],
						"rule_action": [
							"var.intra_inbound_acl_rules",
							"count.index",
						],
						"rule_number": [
							"var.intra_inbound_acl_rules",
							"count.index",
						],
						"to_port": [
							"var.intra_inbound_acl_rules",
							"count.index",
						],
					},
				},
				"intra_outbound": {
					"config": {
						"egress": true,
					},
					"provisioners": null,
					"references": {
						"cidr_block": [
							"var.intra_outbound_acl_rules",
							"count.index",
						],
						"egress": [],
						"from_port": [
							"var.intra_outbound_acl_rules",
							"count.index",
						],
						"icmp_code": [
							"var.intra_outbound_acl_rules",
							"count.index",
						],
						"icmp_type": [
							"var.intra_outbound_acl_rules",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.intra_outbound_acl_rules",
							"count.index",
						],
						"network_acl_id": [
							"aws_network_acl.intra[0].id",
							"aws_network_acl.intra[0]",
							"aws_network_acl.intra",
						],
						"protocol": [
							"var.intra_outbound_acl_rules",
							"count.index",
						],
						"rule_action": [
							"var.intra_outbound_acl_rules",
							"count.index",
						],
						"rule_number": [
							"var.intra_outbound_acl_rules",
							"count.index",
						],
						"to_port": [
							"var.intra_outbound_acl_rules",
							"count.index",
						],
					},
				},
				"private_inbound": {
					"config": {
						"egress": false,
					},
					"provisioners": null,
					"references": {
						"cidr_block": [
							"var.private_inbound_acl_rules",
							"count.index",
						],
						"egress": [],
						"from_port": [
							"var.private_inbound_acl_rules",
							"count.index",
						],
						"icmp_code": [
							"var.private_inbound_acl_rules",
							"count.index",
						],
						"icmp_type": [
							"var.private_inbound_acl_rules",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.private_inbound_acl_rules",
							"count.index",
						],
						"network_acl_id": [
							"aws_network_acl.private[0].id",
							"aws_network_acl.private[0]",
							"aws_network_acl.private",
						],
						"protocol": [
							"var.private_inbound_acl_rules",
							"count.index",
						],
						"rule_action": [
							"var.private_inbound_acl_rules",
							"count.index",
						],
						"rule_number": [
							"var.private_inbound_acl_rules",
							"count.index",
						],
						"to_port": [
							"var.private_inbound_acl_rules",
							"count.index",
						],
					},
				},
				"private_outbound": {
					"config": {
						"egress": true,
					},
					"provisioners": null,
					"references": {
						"cidr_block": [
							"var.private_outbound_acl_rules",
							"count.index",
						],
						"egress": [],
						"from_port": [
							"var.private_outbound_acl_rules",
							"count.index",
						],
						"icmp_code": [
							"var.private_outbound_acl_rules",
							"count.index",
						],
						"icmp_type": [
							"var.private_outbound_acl_rules",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.private_outbound_acl_rules",
							"count.index",
						],
						"network_acl_id": [
							"aws_network_acl.private[0].id",
							"aws_network_acl.private[0]",
							"aws_network_acl.private",
						],
						"protocol": [
							"var.private_outbound_acl_rules",
							"count.index",
						],
						"rule_action": [
							"var.private_outbound_acl_rules",
							"count.index",
						],
						"rule_number": [
							"var.private_outbound_acl_rules",
							"count.index",
						],
						"to_port": [
							"var.private_outbound_acl_rules",
							"count.index",
						],
					},
				},
				"public_inbound": {
					"config": {
						"egress": false,
					},
					"provisioners": null,
					"references": {
						"cidr_block": [
							"var.public_inbound_acl_rules",
							"count.index",
						],
						"egress": [],
						"from_port": [
							"var.public_inbound_acl_rules",
							"count.index",
						],
						"icmp_code": [
							"var.public_inbound_acl_rules",
							"count.index",
						],
						"icmp_type": [
							"var.public_inbound_acl_rules",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.public_inbound_acl_rules",
							"count.index",
						],
						"network_acl_id": [
							"aws_network_acl.public[0].id",
							"aws_network_acl.public[0]",
							"aws_network_acl.public",
						],
						"protocol": [
							"var.public_inbound_acl_rules",
							"count.index",
						],
						"rule_action": [
							"var.public_inbound_acl_rules",
							"count.index",
						],
						"rule_number": [
							"var.public_inbound_acl_rules",
							"count.index",
						],
						"to_port": [
							"var.public_inbound_acl_rules",
							"count.index",
						],
					},
				},
				"public_outbound": {
					"config": {
						"egress": true,
					},
					"provisioners": null,
					"references": {
						"cidr_block": [
							"var.public_outbound_acl_rules",
							"count.index",
						],
						"egress": [],
						"from_port": [
							"var.public_outbound_acl_rules",
							"count.index",
						],
						"icmp_code": [
							"var.public_outbound_acl_rules",
							"count.index",
						],
						"icmp_type": [
							"var.public_outbound_acl_rules",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.public_outbound_acl_rules",
							"count.index",
						],
						"network_acl_id": [
							"aws_network_acl.public[0].id",
							"aws_network_acl.public[0]",
							"aws_network_acl.public",
						],
						"protocol": [
							"var.public_outbound_acl_rules",
							"count.index",
						],
						"rule_action": [
							"var.public_outbound_acl_rules",
							"count.index",
						],
						"rule_number": [
							"var.public_outbound_acl_rules",
							"count.index",
						],
						"to_port": [
							"var.public_outbound_acl_rules",
							"count.index",
						],
					},
				},
				"redshift_inbound": {
					"config": {
						"egress": false,
					},
					"provisioners": null,
					"references": {
						"cidr_block": [
							"var.redshift_inbound_acl_rules",
							"count.index",
						],
						"egress": [],
						"from_port": [
							"var.redshift_inbound_acl_rules",
							"count.index",
						],
						"icmp_code": [
							"var.redshift_inbound_acl_rules",
							"count.index",
						],
						"icmp_type": [
							"var.redshift_inbound_acl_rules",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.redshift_inbound_acl_rules",
							"count.index",
						],
						"network_acl_id": [
							"aws_network_acl.redshift[0].id",
							"aws_network_acl.redshift[0]",
							"aws_network_acl.redshift",
						],
						"protocol": [
							"var.redshift_inbound_acl_rules",
							"count.index",
						],
						"rule_action": [
							"var.redshift_inbound_acl_rules",
							"count.index",
						],
						"rule_number": [
							"var.redshift_inbound_acl_rules",
							"count.index",
						],
						"to_port": [
							"var.redshift_inbound_acl_rules",
							"count.index",
						],
					},
				},
				"redshift_outbound": {
					"config": {
						"egress": true,
					},
					"provisioners": null,
					"references": {
						"cidr_block": [
							"var.redshift_outbound_acl_rules",
							"count.index",
						],
						"egress": [],
						"from_port": [
							"var.redshift_outbound_acl_rules",
							"count.index",
						],
						"icmp_code": [
							"var.redshift_outbound_acl_rules",
							"count.index",
						],
						"icmp_type": [
							"var.redshift_outbound_acl_rules",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.redshift_outbound_acl_rules",
							"count.index",
						],
						"network_acl_id": [
							"aws_network_acl.redshift[0].id",
							"aws_network_acl.redshift[0]",
							"aws_network_acl.redshift",
						],
						"protocol": [
							"var.redshift_outbound_acl_rules",
							"count.index",
						],
						"rule_action": [
							"var.redshift_outbound_acl_rules",
							"count.index",
						],
						"rule_number": [
							"var.redshift_outbound_acl_rules",
							"count.index",
						],
						"to_port": [
							"var.redshift_outbound_acl_rules",
							"count.index",
						],
					},
				},
			},
			"aws_redshift_subnet_group": {
				"redshift": {
					"config":       {},
					"provisioners": null,
					"references": {
						"description": [
							"var.name",
						],
						"name": [
							"var.name",
						],
						"subnet_ids": [
							"aws_subnet.redshift",
						],
						"tags": [
							"var.name",
							"var.tags",
							"var.redshift_subnet_group_tags",
						],
					},
				},
			},
			"aws_route": {
				"database_internet_gateway": {
					"config": {
						"destination_cidr_block": "0.0.0.0/0",
						"timeouts":               null,
					},
					"provisioners": null,
					"references": {
						"destination_cidr_block": [],
						"gateway_id": [
							"aws_internet_gateway.this[0].id",
							"aws_internet_gateway.this[0]",
							"aws_internet_gateway.this",
						],
						"route_table_id": [
							"aws_route_table.database[0].id",
							"aws_route_table.database[0]",
							"aws_route_table.database",
						],
						"timeouts": [],
					},
				},
				"database_ipv6_egress": {
					"config": {
						"destination_ipv6_cidr_block": "::/0",
						"timeouts":                    null,
					},
					"provisioners": null,
					"references": {
						"destination_ipv6_cidr_block": [],
						"egress_only_gateway_id": [
							"aws_egress_only_internet_gateway.this[0].id",
							"aws_egress_only_internet_gateway.this[0]",
							"aws_egress_only_internet_gateway.this",
						],
						"route_table_id": [
							"aws_route_table.database[0].id",
							"aws_route_table.database[0]",
							"aws_route_table.database",
						],
						"timeouts": [],
					},
				},
				"database_nat_gateway": {
					"config": {
						"destination_cidr_block": "0.0.0.0/0",
						"timeouts":               null,
					},
					"provisioners": null,
					"references": {
						"destination_cidr_block": [],
						"nat_gateway_id": [
							"aws_nat_gateway.this",
							"count.index",
						],
						"route_table_id": [
							"aws_route_table.database",
							"count.index",
						],
						"timeouts": [],
					},
				},
				"private_ipv6_egress": {
					"config": {
						"destination_ipv6_cidr_block": "::/0",
					},
					"provisioners": null,
					"references": {
						"destination_ipv6_cidr_block": [],
						"egress_only_gateway_id": [
							"aws_egress_only_internet_gateway.this",
						],
						"route_table_id": [
							"aws_route_table.private",
							"count.index",
						],
					},
				},
				"private_nat_gateway": {
					"config": {
						"destination_cidr_block": "0.0.0.0/0",
						"timeouts":               null,
					},
					"provisioners": null,
					"references": {
						"destination_cidr_block": [],
						"nat_gateway_id": [
							"aws_nat_gateway.this",
							"count.index",
						],
						"route_table_id": [
							"aws_route_table.private",
							"count.index",
						],
						"timeouts": [],
					},
				},
				"public_internet_gateway": {
					"config": {
						"destination_cidr_block": "0.0.0.0/0",
						"timeouts":               null,
					},
					"provisioners": null,
					"references": {
						"destination_cidr_block": [],
						"gateway_id": [
							"aws_internet_gateway.this[0].id",
							"aws_internet_gateway.this[0]",
							"aws_internet_gateway.this",
						],
						"route_table_id": [
							"aws_route_table.public[0].id",
							"aws_route_table.public[0]",
							"aws_route_table.public",
						],
						"timeouts": [],
					},
				},
				"public_internet_gateway_ipv6": {
					"config": {
						"destination_ipv6_cidr_block": "::/0",
					},
					"provisioners": null,
					"references": {
						"destination_ipv6_cidr_block": [],
						"gateway_id": [
							"aws_internet_gateway.this[0].id",
							"aws_internet_gateway.this[0]",
							"aws_internet_gateway.this",
						],
						"route_table_id": [
							"aws_route_table.public[0].id",
							"aws_route_table.public[0]",
							"aws_route_table.public",
						],
					},
				},
			},
			"aws_route_table": {
				"database": {
					"config":       {},
					"provisioners": null,
					"references": {
						"tags": [
							"var.name",
							"var.database_subnet_suffix",
							"var.tags",
							"var.database_route_table_tags",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"elasticache": {
					"config":       {},
					"provisioners": null,
					"references": {
						"tags": [
							"var.name",
							"var.elasticache_subnet_suffix",
							"var.tags",
							"var.elasticache_route_table_tags",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"intra": {
					"config":       {},
					"provisioners": null,
					"references": {
						"tags": [
							"var.name",
							"var.intra_subnet_suffix",
							"var.tags",
							"var.intra_route_table_tags",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"private": {
					"config":       {},
					"provisioners": null,
					"references": {
						"tags": [
							"var.single_nat_gateway",
							"var.name",
							"var.private_subnet_suffix",
							"var.private_subnet_suffix",
							"var.name",
							"var.azs",
							"count.index",
							"var.tags",
							"var.private_route_table_tags",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"public": {
					"config":       {},
					"provisioners": null,
					"references": {
						"tags": [
							"var.public_subnet_suffix",
							"var.name",
							"var.tags",
							"var.public_route_table_tags",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"redshift": {
					"config":       {},
					"provisioners": null,
					"references": {
						"tags": [
							"var.name",
							"var.redshift_subnet_suffix",
							"var.tags",
							"var.redshift_route_table_tags",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
			},
			"aws_route_table_association": {
				"database": {
					"config":       {},
					"provisioners": null,
					"references": {
						"route_table_id": [
							"aws_route_table.database",
							"aws_route_table.private",
							"var.single_nat_gateway",
							"var.create_database_subnet_route_table",
							"count.index",
						],
						"subnet_id": [
							"aws_subnet.database",
							"count.index",
						],
					},
				},
				"elasticache": {
					"config":       {},
					"provisioners": null,
					"references": {
						"route_table_id": [
							"aws_route_table.elasticache",
							"aws_route_table.private",
							"var.single_nat_gateway",
							"var.create_elasticache_subnet_route_table",
							"count.index",
						],
						"subnet_id": [
							"aws_subnet.elasticache",
							"count.index",
						],
					},
				},
				"intra": {
					"config":       {},
					"provisioners": null,
					"references": {
						"route_table_id": [
							"aws_route_table.intra",
						],
						"subnet_id": [
							"aws_subnet.intra",
							"count.index",
						],
					},
				},
				"private": {
					"config":       {},
					"provisioners": null,
					"references": {
						"route_table_id": [
							"aws_route_table.private",
							"var.single_nat_gateway",
							"count.index",
						],
						"subnet_id": [
							"aws_subnet.private",
							"count.index",
						],
					},
				},
				"public": {
					"config":       {},
					"provisioners": null,
					"references": {
						"route_table_id": [
							"aws_route_table.public[0].id",
							"aws_route_table.public[0]",
							"aws_route_table.public",
						],
						"subnet_id": [
							"aws_subnet.public",
							"count.index",
						],
					},
				},
				"redshift": {
					"config":       {},
					"provisioners": null,
					"references": {
						"route_table_id": [
							"aws_route_table.redshift",
							"aws_route_table.private",
							"var.single_nat_gateway",
							"var.create_redshift_subnet_route_table",
							"count.index",
						],
						"subnet_id": [
							"aws_subnet.redshift",
							"count.index",
						],
					},
				},
				"redshift_public": {
					"config":       {},
					"provisioners": null,
					"references": {
						"route_table_id": [
							"aws_route_table.redshift",
							"aws_route_table.public",
							"var.single_nat_gateway",
							"var.create_redshift_subnet_route_table",
							"count.index",
						],
						"subnet_id": [
							"aws_subnet.redshift",
							"count.index",
						],
					},
				},
			},
			"aws_subnet": {
				"database": {
					"config":       {},
					"provisioners": null,
					"references": {
						"assign_ipv6_address_on_creation": [
							"var.database_subnet_assign_ipv6_address_on_creation",
							"var.assign_ipv6_address_on_creation",
							"var.database_subnet_assign_ipv6_address_on_creation",
						],
						"availability_zone": [
							"var.azs",
							"count.index",
							"var.azs",
							"count.index",
						],
						"availability_zone_id": [
							"var.azs",
							"count.index",
							"var.azs",
							"count.index",
						],
						"cidr_block": [
							"var.database_subnets",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.enable_ipv6",
							"var.database_subnet_ipv6_prefixes",
							"aws_vpc.this[0].ipv6_cidr_block",
							"aws_vpc.this[0]",
							"aws_vpc.this",
							"var.database_subnet_ipv6_prefixes",
							"count.index",
						],
						"tags": [
							"var.database_subnet_suffix",
							"var.name",
							"var.azs",
							"count.index",
							"var.tags",
							"var.database_subnet_tags",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"elasticache": {
					"config":       {},
					"provisioners": null,
					"references": {
						"assign_ipv6_address_on_creation": [
							"var.elasticache_subnet_assign_ipv6_address_on_creation",
							"var.assign_ipv6_address_on_creation",
							"var.elasticache_subnet_assign_ipv6_address_on_creation",
						],
						"availability_zone": [
							"var.azs",
							"count.index",
							"var.azs",
							"count.index",
						],
						"availability_zone_id": [
							"var.azs",
							"count.index",
							"var.azs",
							"count.index",
						],
						"cidr_block": [
							"var.elasticache_subnets",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.enable_ipv6",
							"var.elasticache_subnet_ipv6_prefixes",
							"aws_vpc.this[0].ipv6_cidr_block",
							"aws_vpc.this[0]",
							"aws_vpc.this",
							"var.elasticache_subnet_ipv6_prefixes",
							"count.index",
						],
						"tags": [
							"var.elasticache_subnet_suffix",
							"var.name",
							"var.azs",
							"count.index",
							"var.tags",
							"var.elasticache_subnet_tags",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"intra": {
					"config":       {},
					"provisioners": null,
					"references": {
						"assign_ipv6_address_on_creation": [
							"var.intra_subnet_assign_ipv6_address_on_creation",
							"var.assign_ipv6_address_on_creation",
							"var.intra_subnet_assign_ipv6_address_on_creation",
						],
						"availability_zone": [
							"var.azs",
							"count.index",
							"var.azs",
							"count.index",
						],
						"availability_zone_id": [
							"var.azs",
							"count.index",
							"var.azs",
							"count.index",
						],
						"cidr_block": [
							"var.intra_subnets",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.enable_ipv6",
							"var.intra_subnet_ipv6_prefixes",
							"aws_vpc.this[0].ipv6_cidr_block",
							"aws_vpc.this[0]",
							"aws_vpc.this",
							"var.intra_subnet_ipv6_prefixes",
							"count.index",
						],
						"tags": [
							"var.intra_subnet_suffix",
							"var.name",
							"var.azs",
							"count.index",
							"var.tags",
							"var.intra_subnet_tags",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"private": {
					"config":       {},
					"provisioners": null,
					"references": {
						"assign_ipv6_address_on_creation": [
							"var.private_subnet_assign_ipv6_address_on_creation",
							"var.assign_ipv6_address_on_creation",
							"var.private_subnet_assign_ipv6_address_on_creation",
						],
						"availability_zone": [
							"var.azs",
							"count.index",
							"var.azs",
							"count.index",
						],
						"availability_zone_id": [
							"var.azs",
							"count.index",
							"var.azs",
							"count.index",
						],
						"cidr_block": [
							"var.private_subnets",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.enable_ipv6",
							"var.private_subnet_ipv6_prefixes",
							"aws_vpc.this[0].ipv6_cidr_block",
							"aws_vpc.this[0]",
							"aws_vpc.this",
							"var.private_subnet_ipv6_prefixes",
							"count.index",
						],
						"tags": [
							"var.private_subnet_suffix",
							"var.name",
							"var.azs",
							"count.index",
							"var.tags",
							"var.private_subnet_tags",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"public": {
					"config":       {},
					"provisioners": null,
					"references": {
						"assign_ipv6_address_on_creation": [
							"var.public_subnet_assign_ipv6_address_on_creation",
							"var.assign_ipv6_address_on_creation",
							"var.public_subnet_assign_ipv6_address_on_creation",
						],
						"availability_zone": [
							"var.azs",
							"count.index",
							"var.azs",
							"count.index",
						],
						"availability_zone_id": [
							"var.azs",
							"count.index",
							"var.azs",
							"count.index",
						],
						"cidr_block": [
							"var.public_subnets",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.enable_ipv6",
							"var.public_subnet_ipv6_prefixes",
							"aws_vpc.this[0].ipv6_cidr_block",
							"aws_vpc.this[0]",
							"aws_vpc.this",
							"var.public_subnet_ipv6_prefixes",
							"count.index",
						],
						"map_public_ip_on_launch": [
							"var.map_public_ip_on_launch",
						],
						"tags": [
							"var.public_subnet_suffix",
							"var.name",
							"var.azs",
							"count.index",
							"var.tags",
							"var.public_subnet_tags",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"redshift": {
					"config":       {},
					"provisioners": null,
					"references": {
						"assign_ipv6_address_on_creation": [
							"var.redshift_subnet_assign_ipv6_address_on_creation",
							"var.assign_ipv6_address_on_creation",
							"var.redshift_subnet_assign_ipv6_address_on_creation",
						],
						"availability_zone": [
							"var.azs",
							"count.index",
							"var.azs",
							"count.index",
						],
						"availability_zone_id": [
							"var.azs",
							"count.index",
							"var.azs",
							"count.index",
						],
						"cidr_block": [
							"var.redshift_subnets",
							"count.index",
						],
						"ipv6_cidr_block": [
							"var.enable_ipv6",
							"var.redshift_subnet_ipv6_prefixes",
							"aws_vpc.this[0].ipv6_cidr_block",
							"aws_vpc.this[0]",
							"aws_vpc.this",
							"var.redshift_subnet_ipv6_prefixes",
							"count.index",
						],
						"tags": [
							"var.redshift_subnet_suffix",
							"var.name",
							"var.azs",
							"count.index",
							"var.tags",
							"var.redshift_subnet_tags",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
			},
			"aws_vpc": {
				"this": {
					"config":       {},
					"provisioners": null,
					"references": {
						"assign_generated_ipv6_cidr_block": [
							"var.enable_ipv6",
						],
						"cidr_block": [
							"var.cidr",
						],
						"enable_classiclink": [
							"var.enable_classiclink",
						],
						"enable_classiclink_dns_support": [
							"var.enable_classiclink_dns_support",
						],
						"enable_dns_hostnames": [
							"var.enable_dns_hostnames",
						],
						"enable_dns_support": [
							"var.enable_dns_support",
						],
						"instance_tenancy": [
							"var.instance_tenancy",
						],
						"tags": [
							"var.name",
							"var.tags",
							"var.vpc_tags",
						],
					},
				},
			},
			"aws_vpc_dhcp_options": {
				"this": {
					"config":       {},
					"provisioners": null,
					"references": {
						"domain_name": [
							"var.dhcp_options_domain_name",
						],
						"domain_name_servers": [
							"var.dhcp_options_domain_name_servers",
						],
						"netbios_name_servers": [
							"var.dhcp_options_netbios_name_servers",
						],
						"netbios_node_type": [
							"var.dhcp_options_netbios_node_type",
						],
						"ntp_servers": [
							"var.dhcp_options_ntp_servers",
						],
						"tags": [
							"var.name",
							"var.tags",
							"var.dhcp_options_tags",
						],
					},
				},
			},
			"aws_vpc_dhcp_options_association": {
				"this": {
					"config":       {},
					"provisioners": null,
					"references": {
						"dhcp_options_id": [
							"aws_vpc_dhcp_options.this[0].id",
							"aws_vpc_dhcp_options.this[0]",
							"aws_vpc_dhcp_options.this",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
			},
			"aws_vpc_endpoint": {
				"access_analyzer": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.access_analyzer_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.access_analyzer_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.access_analyzer[0].service_name",
							"data.aws_vpc_endpoint_service.access_analyzer[0]",
							"data.aws_vpc_endpoint_service.access_analyzer",
						],
						"subnet_ids": [
							"var.access_analyzer_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"acm_pca": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.acm_pca_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.acm_pca_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.acm_pca[0].service_name",
							"data.aws_vpc_endpoint_service.acm_pca[0]",
							"data.aws_vpc_endpoint_service.acm_pca",
						],
						"subnet_ids": [
							"var.acm_pca_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"apigw": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.apigw_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.apigw_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.apigw[0].service_name",
							"data.aws_vpc_endpoint_service.apigw[0]",
							"data.aws_vpc_endpoint_service.apigw",
						],
						"subnet_ids": [
							"var.apigw_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"appmesh_envoy_management": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.appmesh_envoy_management_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.appmesh_envoy_management_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.appmesh_envoy_management[0].service_name",
							"data.aws_vpc_endpoint_service.appmesh_envoy_management[0]",
							"data.aws_vpc_endpoint_service.appmesh_envoy_management",
						],
						"subnet_ids": [
							"var.appmesh_envoy_management_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"appstream_api": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.appstream_api_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.appstream_api_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.appstream_api[0].service_name",
							"data.aws_vpc_endpoint_service.appstream_api[0]",
							"data.aws_vpc_endpoint_service.appstream_api",
						],
						"subnet_ids": [
							"var.appstream_api_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"appstream_streaming": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.appstream_streaming_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.appstream_streaming_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.appstream_streaming[0].service_name",
							"data.aws_vpc_endpoint_service.appstream_streaming[0]",
							"data.aws_vpc_endpoint_service.appstream_streaming",
						],
						"subnet_ids": [
							"var.appstream_streaming_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"athena": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.athena_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.athena_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.athena[0].service_name",
							"data.aws_vpc_endpoint_service.athena[0]",
							"data.aws_vpc_endpoint_service.athena",
						],
						"subnet_ids": [
							"var.athena_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"auto_scaling_plans": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.auto_scaling_plans_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.auto_scaling_plans_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.auto_scaling_plans[0].service_name",
							"data.aws_vpc_endpoint_service.auto_scaling_plans[0]",
							"data.aws_vpc_endpoint_service.auto_scaling_plans",
						],
						"subnet_ids": [
							"var.auto_scaling_plans_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"cloud_directory": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.cloud_directory_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.cloud_directory_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.cloud_directory[0].service_name",
							"data.aws_vpc_endpoint_service.cloud_directory[0]",
							"data.aws_vpc_endpoint_service.cloud_directory",
						],
						"subnet_ids": [
							"var.cloud_directory_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"cloudformation": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.cloudformation_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.cloudformation_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.cloudformation[0].service_name",
							"data.aws_vpc_endpoint_service.cloudformation[0]",
							"data.aws_vpc_endpoint_service.cloudformation",
						],
						"subnet_ids": [
							"var.cloudformation_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"cloudtrail": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.cloudtrail_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.cloudtrail_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.cloudtrail[0].service_name",
							"data.aws_vpc_endpoint_service.cloudtrail[0]",
							"data.aws_vpc_endpoint_service.cloudtrail",
						],
						"subnet_ids": [
							"var.cloudtrail_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"codeartifact_api": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.codeartifact_api_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.codeartifact_api_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.codeartifact_api[0].service_name",
							"data.aws_vpc_endpoint_service.codeartifact_api[0]",
							"data.aws_vpc_endpoint_service.codeartifact_api",
						],
						"subnet_ids": [
							"var.codeartifact_api_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"codeartifact_repositories": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.codeartifact_repositories_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.codeartifact_repositories_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.codeartifact_repositories[0].service_name",
							"data.aws_vpc_endpoint_service.codeartifact_repositories[0]",
							"data.aws_vpc_endpoint_service.codeartifact_repositories",
						],
						"subnet_ids": [
							"var.codeartifact_repositories_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"codebuild": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.codebuild_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.codebuild_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.codebuild[0].service_name",
							"data.aws_vpc_endpoint_service.codebuild[0]",
							"data.aws_vpc_endpoint_service.codebuild",
						],
						"subnet_ids": [
							"var.codebuild_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"codecommit": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.codecommit_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.codecommit_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.codecommit[0].service_name",
							"data.aws_vpc_endpoint_service.codecommit[0]",
							"data.aws_vpc_endpoint_service.codecommit",
						],
						"subnet_ids": [
							"var.codecommit_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"codedeploy": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.codedeploy_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.codedeploy_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.codedeploy[0].service_name",
							"data.aws_vpc_endpoint_service.codedeploy[0]",
							"data.aws_vpc_endpoint_service.codedeploy",
						],
						"subnet_ids": [
							"var.codedeploy_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"codedeploy_commands_secure": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.codedeploy_commands_secure_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.codedeploy_commands_secure_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.codedeploy_commands_secure[0].service_name",
							"data.aws_vpc_endpoint_service.codedeploy_commands_secure[0]",
							"data.aws_vpc_endpoint_service.codedeploy_commands_secure",
						],
						"subnet_ids": [
							"var.codedeploy_commands_secure_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"codepipeline": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.codepipeline_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.codepipeline_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.codepipeline[0].service_name",
							"data.aws_vpc_endpoint_service.codepipeline[0]",
							"data.aws_vpc_endpoint_service.codepipeline",
						],
						"subnet_ids": [
							"var.codepipeline_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"config": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.config_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.config_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.config[0].service_name",
							"data.aws_vpc_endpoint_service.config[0]",
							"data.aws_vpc_endpoint_service.config",
						],
						"subnet_ids": [
							"var.config_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"datasync": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.datasync_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.datasync_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.datasync[0].service_name",
							"data.aws_vpc_endpoint_service.datasync[0]",
							"data.aws_vpc_endpoint_service.datasync",
						],
						"subnet_ids": [
							"var.datasync_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"dynamodb": {
					"config":       {},
					"provisioners": null,
					"references": {
						"service_name": [
							"data.aws_vpc_endpoint_service.dynamodb[0].service_name",
							"data.aws_vpc_endpoint_service.dynamodb[0]",
							"data.aws_vpc_endpoint_service.dynamodb",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"ebs": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.ebs_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.ebs_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.ebs[0].service_name",
							"data.aws_vpc_endpoint_service.ebs[0]",
							"data.aws_vpc_endpoint_service.ebs",
						],
						"subnet_ids": [
							"var.ebs_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"ec2": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.ec2_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.ec2_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.ec2[0].service_name",
							"data.aws_vpc_endpoint_service.ec2[0]",
							"data.aws_vpc_endpoint_service.ec2",
						],
						"subnet_ids": [
							"var.ec2_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"ec2_autoscaling": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.ec2_autoscaling_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.ec2_autoscaling_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.ec2_autoscaling[0].service_name",
							"data.aws_vpc_endpoint_service.ec2_autoscaling[0]",
							"data.aws_vpc_endpoint_service.ec2_autoscaling",
						],
						"subnet_ids": [
							"var.ec2_autoscaling_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"ec2messages": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.ec2messages_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.ec2messages_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.ec2messages[0].service_name",
							"data.aws_vpc_endpoint_service.ec2messages[0]",
							"data.aws_vpc_endpoint_service.ec2messages",
						],
						"subnet_ids": [
							"var.ec2messages_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"ecr_api": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.ecr_api_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.ecr_api_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.ecr_api[0].service_name",
							"data.aws_vpc_endpoint_service.ecr_api[0]",
							"data.aws_vpc_endpoint_service.ecr_api",
						],
						"subnet_ids": [
							"var.ecr_api_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"ecr_dkr": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.ecr_dkr_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.ecr_dkr_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.ecr_dkr[0].service_name",
							"data.aws_vpc_endpoint_service.ecr_dkr[0]",
							"data.aws_vpc_endpoint_service.ecr_dkr",
						],
						"subnet_ids": [
							"var.ecr_dkr_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"ecs": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.ecs_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.ecs_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.ecs[0].service_name",
							"data.aws_vpc_endpoint_service.ecs[0]",
							"data.aws_vpc_endpoint_service.ecs",
						],
						"subnet_ids": [
							"var.ecs_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"ecs_agent": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.ecs_agent_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.ecs_agent_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.ecs_agent[0].service_name",
							"data.aws_vpc_endpoint_service.ecs_agent[0]",
							"data.aws_vpc_endpoint_service.ecs_agent",
						],
						"subnet_ids": [
							"var.ecs_agent_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"ecs_telemetry": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.ecs_telemetry_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.ecs_telemetry_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.ecs_telemetry[0].service_name",
							"data.aws_vpc_endpoint_service.ecs_telemetry[0]",
							"data.aws_vpc_endpoint_service.ecs_telemetry",
						],
						"subnet_ids": [
							"var.ecs_telemetry_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"efs": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.efs_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.efs_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.efs[0].service_name",
							"data.aws_vpc_endpoint_service.efs[0]",
							"data.aws_vpc_endpoint_service.efs",
						],
						"subnet_ids": [
							"var.efs_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"elastic_inference_runtime": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.elastic_inference_runtime_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.elastic_inference_runtime_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.elastic_inference_runtime[0].service_name",
							"data.aws_vpc_endpoint_service.elastic_inference_runtime[0]",
							"data.aws_vpc_endpoint_service.elastic_inference_runtime",
						],
						"subnet_ids": [
							"var.elastic_inference_runtime_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"elasticbeanstalk": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.elasticbeanstalk_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.elasticbeanstalk_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.elasticbeanstalk[0].service_name",
							"data.aws_vpc_endpoint_service.elasticbeanstalk[0]",
							"data.aws_vpc_endpoint_service.elasticbeanstalk",
						],
						"subnet_ids": [
							"var.elasticbeanstalk_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"elasticbeanstalk_health": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.elasticbeanstalk_health_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.elasticbeanstalk_health_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.elasticbeanstalk_health[0].service_name",
							"data.aws_vpc_endpoint_service.elasticbeanstalk_health[0]",
							"data.aws_vpc_endpoint_service.elasticbeanstalk_health",
						],
						"subnet_ids": [
							"var.elasticbeanstalk_health_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"elasticloadbalancing": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.elasticloadbalancing_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.elasticloadbalancing_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.elasticloadbalancing[0].service_name",
							"data.aws_vpc_endpoint_service.elasticloadbalancing[0]",
							"data.aws_vpc_endpoint_service.elasticloadbalancing",
						],
						"subnet_ids": [
							"var.elasticloadbalancing_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"emr": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.emr_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.emr_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.emr[0].service_name",
							"data.aws_vpc_endpoint_service.emr[0]",
							"data.aws_vpc_endpoint_service.emr",
						],
						"subnet_ids": [
							"var.emr_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"events": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.events_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.events_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.events[0].service_name",
							"data.aws_vpc_endpoint_service.events[0]",
							"data.aws_vpc_endpoint_service.events",
						],
						"subnet_ids": [
							"var.events_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"git_codecommit": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.git_codecommit_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.git_codecommit_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.git_codecommit[0].service_name",
							"data.aws_vpc_endpoint_service.git_codecommit[0]",
							"data.aws_vpc_endpoint_service.git_codecommit",
						],
						"subnet_ids": [
							"var.git_codecommit_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"glue": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.glue_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.glue_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.glue[0].service_name",
							"data.aws_vpc_endpoint_service.glue[0]",
							"data.aws_vpc_endpoint_service.glue",
						],
						"subnet_ids": [
							"var.glue_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"kinesis_firehose": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.kinesis_firehose_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.kinesis_firehose_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.kinesis_firehose[0].service_name",
							"data.aws_vpc_endpoint_service.kinesis_firehose[0]",
							"data.aws_vpc_endpoint_service.kinesis_firehose",
						],
						"subnet_ids": [
							"var.kinesis_firehose_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"kinesis_streams": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.kinesis_streams_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.kinesis_streams_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.kinesis_streams[0].service_name",
							"data.aws_vpc_endpoint_service.kinesis_streams[0]",
							"data.aws_vpc_endpoint_service.kinesis_streams",
						],
						"subnet_ids": [
							"var.kinesis_streams_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"kms": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.kms_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.kms_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.kms[0].service_name",
							"data.aws_vpc_endpoint_service.kms[0]",
							"data.aws_vpc_endpoint_service.kms",
						],
						"subnet_ids": [
							"var.kms_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"lambda": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.lambda_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.lambda_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.lambda[0].service_name",
							"data.aws_vpc_endpoint_service.lambda[0]",
							"data.aws_vpc_endpoint_service.lambda",
						],
						"subnet_ids": [
							"var.lambda_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"logs": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.logs_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.logs_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.logs[0].service_name",
							"data.aws_vpc_endpoint_service.logs[0]",
							"data.aws_vpc_endpoint_service.logs",
						],
						"subnet_ids": [
							"var.logs_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"monitoring": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.monitoring_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.monitoring_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.monitoring[0].service_name",
							"data.aws_vpc_endpoint_service.monitoring[0]",
							"data.aws_vpc_endpoint_service.monitoring",
						],
						"subnet_ids": [
							"var.monitoring_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"qldb_session": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.qldb_session_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.qldb_session_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.qldb_session[0].service_name",
							"data.aws_vpc_endpoint_service.qldb_session[0]",
							"data.aws_vpc_endpoint_service.qldb_session",
						],
						"subnet_ids": [
							"var.qldb_session_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"rds": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.rds_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.rds_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.rds[0].service_name",
							"data.aws_vpc_endpoint_service.rds[0]",
							"data.aws_vpc_endpoint_service.rds",
						],
						"subnet_ids": [
							"var.rds_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"rekognition": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.rekognition_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.rekognition_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.rekognition[0].service_name",
							"data.aws_vpc_endpoint_service.rekognition[0]",
							"data.aws_vpc_endpoint_service.rekognition",
						],
						"subnet_ids": [
							"var.rekognition_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"s3": {
					"config":       {},
					"provisioners": null,
					"references": {
						"service_name": [
							"data.aws_vpc_endpoint_service.s3[0].service_name",
							"data.aws_vpc_endpoint_service.s3[0]",
							"data.aws_vpc_endpoint_service.s3",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"sagemaker_api": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.sagemaker_api_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.sagemaker_api_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.sagemaker_api[0].service_name",
							"data.aws_vpc_endpoint_service.sagemaker_api[0]",
							"data.aws_vpc_endpoint_service.sagemaker_api",
						],
						"subnet_ids": [
							"var.sagemaker_api_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"sagemaker_notebook": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.sagemaker_notebook_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.sagemaker_notebook_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.sagemaker_notebook[0].service_name",
							"data.aws_vpc_endpoint_service.sagemaker_notebook[0]",
							"data.aws_vpc_endpoint_service.sagemaker_notebook",
						],
						"subnet_ids": [
							"var.sagemaker_notebook_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"sagemaker_runtime": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.sagemaker_runtime_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.sagemaker_runtime_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.sagemaker_runtime[0].service_name",
							"data.aws_vpc_endpoint_service.sagemaker_runtime[0]",
							"data.aws_vpc_endpoint_service.sagemaker_runtime",
						],
						"subnet_ids": [
							"var.sagemaker_runtime_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"secretsmanager": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.secretsmanager_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.secretsmanager_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.secretsmanager[0].service_name",
							"data.aws_vpc_endpoint_service.secretsmanager[0]",
							"data.aws_vpc_endpoint_service.secretsmanager",
						],
						"subnet_ids": [
							"var.secretsmanager_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"servicecatalog": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.servicecatalog_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.servicecatalog_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.servicecatalog[0].service_name",
							"data.aws_vpc_endpoint_service.servicecatalog[0]",
							"data.aws_vpc_endpoint_service.servicecatalog",
						],
						"subnet_ids": [
							"var.servicecatalog_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"ses": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.ses_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.ses_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.ses[0].service_name",
							"data.aws_vpc_endpoint_service.ses[0]",
							"data.aws_vpc_endpoint_service.ses",
						],
						"subnet_ids": [
							"var.ses_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"sms": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.sms_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.sms_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.sms[0].service_name",
							"data.aws_vpc_endpoint_service.sms[0]",
							"data.aws_vpc_endpoint_service.sms",
						],
						"subnet_ids": [
							"var.sms_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"sns": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.sns_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.sns_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.sns[0].service_name",
							"data.aws_vpc_endpoint_service.sns[0]",
							"data.aws_vpc_endpoint_service.sns",
						],
						"subnet_ids": [
							"var.sns_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"sqs": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.sqs_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.sqs_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.sqs[0].service_name",
							"data.aws_vpc_endpoint_service.sqs[0]",
							"data.aws_vpc_endpoint_service.sqs",
						],
						"subnet_ids": [
							"var.sqs_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"ssm": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.ssm_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.ssm_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.ssm[0].service_name",
							"data.aws_vpc_endpoint_service.ssm[0]",
							"data.aws_vpc_endpoint_service.ssm",
						],
						"subnet_ids": [
							"var.ssm_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"ssmmessages": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.ssmmessages_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.ssmmessages_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.ssmmessages[0].service_name",
							"data.aws_vpc_endpoint_service.ssmmessages[0]",
							"data.aws_vpc_endpoint_service.ssmmessages",
						],
						"subnet_ids": [
							"var.ssmmessages_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"states": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.states_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.states_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.states[0].service_name",
							"data.aws_vpc_endpoint_service.states[0]",
							"data.aws_vpc_endpoint_service.states",
						],
						"subnet_ids": [
							"var.states_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"storagegateway": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.storagegateway_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.storagegateway_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.storagegateway[0].service_name",
							"data.aws_vpc_endpoint_service.storagegateway[0]",
							"data.aws_vpc_endpoint_service.storagegateway",
						],
						"subnet_ids": [
							"var.storagegateway_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"sts": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.sts_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.sts_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.sts[0].service_name",
							"data.aws_vpc_endpoint_service.sts[0]",
							"data.aws_vpc_endpoint_service.sts",
						],
						"subnet_ids": [
							"var.sts_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"textract": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.textract_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.textract_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.textract[0].service_name",
							"data.aws_vpc_endpoint_service.textract[0]",
							"data.aws_vpc_endpoint_service.textract",
						],
						"subnet_ids": [
							"var.textract_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"transfer": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.transfer_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.transfer_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.transfer[0].service_name",
							"data.aws_vpc_endpoint_service.transfer[0]",
							"data.aws_vpc_endpoint_service.transfer",
						],
						"subnet_ids": [
							"var.transfer_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"transferserver": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.transferserver_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.transferserver_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.transferserver[0].service_name",
							"data.aws_vpc_endpoint_service.transferserver[0]",
							"data.aws_vpc_endpoint_service.transferserver",
						],
						"subnet_ids": [
							"var.transferserver_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
				"workspaces": {
					"config": {
						"vpc_endpoint_type": "Interface",
					},
					"provisioners": null,
					"references": {
						"private_dns_enabled": [
							"var.workspaces_endpoint_private_dns_enabled",
						],
						"security_group_ids": [
							"var.workspaces_endpoint_security_group_ids",
						],
						"service_name": [
							"data.aws_vpc_endpoint_service.workspaces[0].service_name",
							"data.aws_vpc_endpoint_service.workspaces[0]",
							"data.aws_vpc_endpoint_service.workspaces",
						],
						"subnet_ids": [
							"var.workspaces_endpoint_subnet_ids",
							"aws_subnet.private",
						],
						"tags": [
							"local.vpce_tags",
						],
						"vpc_endpoint_type": [],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
			},
			"aws_vpc_endpoint_route_table_association": {
				"intra_dynamodb": {
					"config":       {},
					"provisioners": null,
					"references": {
						"route_table_id": [
							"aws_route_table.intra",
						],
						"vpc_endpoint_id": [
							"aws_vpc_endpoint.dynamodb[0].id",
							"aws_vpc_endpoint.dynamodb[0]",
							"aws_vpc_endpoint.dynamodb",
						],
					},
				},
				"intra_s3": {
					"config":       {},
					"provisioners": null,
					"references": {
						"route_table_id": [
							"aws_route_table.intra",
						],
						"vpc_endpoint_id": [
							"aws_vpc_endpoint.s3[0].id",
							"aws_vpc_endpoint.s3[0]",
							"aws_vpc_endpoint.s3",
						],
					},
				},
				"private_dynamodb": {
					"config":       {},
					"provisioners": null,
					"references": {
						"route_table_id": [
							"aws_route_table.private",
							"count.index",
						],
						"vpc_endpoint_id": [
							"aws_vpc_endpoint.dynamodb[0].id",
							"aws_vpc_endpoint.dynamodb[0]",
							"aws_vpc_endpoint.dynamodb",
						],
					},
				},
				"private_s3": {
					"config":       {},
					"provisioners": null,
					"references": {
						"route_table_id": [
							"aws_route_table.private",
							"count.index",
						],
						"vpc_endpoint_id": [
							"aws_vpc_endpoint.s3[0].id",
							"aws_vpc_endpoint.s3[0]",
							"aws_vpc_endpoint.s3",
						],
					},
				},
				"public_dynamodb": {
					"config":       {},
					"provisioners": null,
					"references": {
						"route_table_id": [
							"aws_route_table.public[0].id",
							"aws_route_table.public[0]",
							"aws_route_table.public",
						],
						"vpc_endpoint_id": [
							"aws_vpc_endpoint.dynamodb[0].id",
							"aws_vpc_endpoint.dynamodb[0]",
							"aws_vpc_endpoint.dynamodb",
						],
					},
				},
				"public_s3": {
					"config":       {},
					"provisioners": null,
					"references": {
						"route_table_id": [
							"aws_route_table.public[0].id",
							"aws_route_table.public[0]",
							"aws_route_table.public",
						],
						"vpc_endpoint_id": [
							"aws_vpc_endpoint.s3[0].id",
							"aws_vpc_endpoint.s3[0]",
							"aws_vpc_endpoint.s3",
						],
					},
				},
			},
			"aws_vpc_ipv4_cidr_block_association": {
				"this": {
					"config":       {},
					"provisioners": null,
					"references": {
						"cidr_block": [
							"var.secondary_cidr_blocks",
							"count.index",
						],
						"vpc_id": [
							"aws_vpc.this[0].id",
							"aws_vpc.this[0]",
							"aws_vpc.this",
						],
					},
				},
			},
			"aws_vpn_gateway": {
				"this": {
					"config":       {},
					"provisioners": null,
					"references": {
						"amazon_side_asn": [
							"var.amazon_side_asn",
						],
						"availability_zone": [
							"var.vpn_gateway_az",
						],
						"tags": [
							"var.name",
							"var.tags",
							"var.vpn_gateway_tags",
						],
						"vpc_id": [
							"local.vpc_id",
						],
					},
				},
			},
			"aws_vpn_gateway_attachment": {
				"this": {
					"config":       {},
					"provisioners": null,
					"references": {
						"vpc_id": [
							"local.vpc_id",
						],
						"vpn_gateway_id": [
							"var.vpn_gateway_id",
						],
					},
				},
			},
			"aws_vpn_gateway_route_propagation": {
				"intra": {
					"config":       {},
					"provisioners": null,
					"references": {
						"route_table_id": [
							"aws_route_table.intra",
							"count.index",
						],
						"vpn_gateway_id": [
							"aws_vpn_gateway.this",
							"aws_vpn_gateway_attachment.this",
							"count.index",
						],
					},
				},
				"private": {
					"config":       {},
					"provisioners": null,
					"references": {
						"route_table_id": [
							"aws_route_table.private",
							"count.index",
						],
						"vpn_gateway_id": [
							"aws_vpn_gateway.this",
							"aws_vpn_gateway_attachment.this",
							"count.index",
						],
					},
				},
				"public": {
					"config":       {},
					"provisioners": null,
					"references": {
						"route_table_id": [
							"aws_route_table.public",
							"count.index",
						],
						"vpn_gateway_id": [
							"aws_vpn_gateway.this",
							"aws_vpn_gateway_attachment.this",
							"count.index",
						],
					},
				},
			},
		},
		"variables": {
			"access_analyzer_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Access Analyzer endpoint",
			},
			"access_analyzer_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Access Analyzer endpoint",
			},
			"access_analyzer_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Access Analyzer endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
			},
			"acm_pca_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for ACM PCA endpoint",
			},
			"acm_pca_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for ACM PCA endpoint",
			},
			"acm_pca_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for ACM PCA endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"amazon_side_asn": {
				"default":     "64512",
				"description": "The Autonomous System Number (ASN) for the Amazon side of the gateway. By default the virtual private gateway is created with the current default Amazon ASN.",
			},
			"apigw_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for API GW endpoint",
			},
			"apigw_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for API GW  endpoint",
			},
			"apigw_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for API GW endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"appmesh_envoy_management_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for AppMesh endpoint",
			},
			"appmesh_envoy_management_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for AppMesh endpoint",
			},
			"appmesh_envoy_management_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for AppMesh endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"appstream_api_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for AppStream API endpoint",
			},
			"appstream_api_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for AppStream API endpoint",
			},
			"appstream_api_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for AppStream API endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"appstream_streaming_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for AppStream Streaming endpoint",
			},
			"appstream_streaming_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for AppStream Streaming endpoint",
			},
			"appstream_streaming_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for AppStream Streaming endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"assign_ipv6_address_on_creation": {
				"default":     false,
				"description": "Assign IPv6 address on subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
			},
			"athena_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Athena endpoint",
			},
			"athena_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Athena endpoint",
			},
			"athena_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Athena endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"auto_scaling_plans_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Auto Scaling Plans endpoint",
			},
			"auto_scaling_plans_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Auto Scaling Plans endpoint",
			},
			"auto_scaling_plans_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Auto Scaling Plans endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
			},
			"azs": {
				"default":     [],
				"description": "A list of availability zones names or ids in the region",
			},
			"cidr": {
				"default":     "0.0.0.0/0",
				"description": "The CIDR block for the VPC. Default value is a valid CIDR, but not acceptable by AWS and should be overridden",
			},
			"cloud_directory_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Cloud Directory endpoint",
			},
			"cloud_directory_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Cloud Directory endpoint",
			},
			"cloud_directory_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Cloud Directory endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
			},
			"cloudformation_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Cloudformation endpoint",
			},
			"cloudformation_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Cloudformation endpoint",
			},
			"cloudformation_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Cloudformation endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"cloudtrail_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for CloudTrail endpoint",
			},
			"cloudtrail_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for CloudTrail endpoint",
			},
			"cloudtrail_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for CloudTrail endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"codeartifact_api_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Codeartifact API endpoint",
			},
			"codeartifact_api_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Codeartifact API endpoint",
			},
			"codeartifact_api_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Codeartifact API endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"codeartifact_repositories_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Codeartifact repositories endpoint",
			},
			"codeartifact_repositories_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Codeartifact repositories endpoint",
			},
			"codeartifact_repositories_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Codeartifact repositories endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"codebuild_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Codebuild endpoint",
			},
			"codebuild_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Codebuild endpoint",
			},
			"codebuild_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Codebuilt endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"codecommit_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Codecommit endpoint",
			},
			"codecommit_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Codecommit endpoint",
			},
			"codecommit_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Codecommit endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"codedeploy_commands_secure_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for CodeDeploy Commands Secure endpoint",
			},
			"codedeploy_commands_secure_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for CodeDeploy Commands Secure endpoint",
			},
			"codedeploy_commands_secure_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for CodeDeploy Commands Secure endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"codedeploy_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for CodeDeploy endpoint",
			},
			"codedeploy_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for CodeDeploy endpoint",
			},
			"codedeploy_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for CodeDeploy endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"codepipeline_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for CodePipeline endpoint",
			},
			"codepipeline_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for CodePipeline endpoint",
			},
			"codepipeline_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for CodePipeline endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"config_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for config endpoint",
			},
			"config_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for config endpoint",
			},
			"config_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for config endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"create_database_internet_gateway_route": {
				"default":     false,
				"description": "Controls if an internet gateway route for public database access should be created",
			},
			"create_database_nat_gateway_route": {
				"default":     false,
				"description": "Controls if a nat gateway route should be created to give internet access to the database subnets",
			},
			"create_database_subnet_group": {
				"default":     true,
				"description": "Controls if database subnet group should be created (n.b. database_subnets must also be set)",
			},
			"create_database_subnet_route_table": {
				"default":     false,
				"description": "Controls if separate route table for database should be created",
			},
			"create_egress_only_igw": {
				"default":     true,
				"description": "Controls if an Egress Only Internet Gateway is created and its related routes.",
			},
			"create_elasticache_subnet_group": {
				"default":     true,
				"description": "Controls if elasticache subnet group should be created",
			},
			"create_elasticache_subnet_route_table": {
				"default":     false,
				"description": "Controls if separate route table for elasticache should be created",
			},
			"create_flow_log_cloudwatch_iam_role": {
				"default":     false,
				"description": "Whether to create IAM role for VPC Flow Logs",
			},
			"create_flow_log_cloudwatch_log_group": {
				"default":     false,
				"description": "Whether to create CloudWatch log group for VPC Flow Logs",
			},
			"create_igw": {
				"default":     true,
				"description": "Controls if an Internet Gateway is created for public subnets and the related routes that connect them.",
			},
			"create_redshift_subnet_group": {
				"default":     true,
				"description": "Controls if redshift subnet group should be created",
			},
			"create_redshift_subnet_route_table": {
				"default":     false,
				"description": "Controls if separate route table for redshift should be created",
			},
			"create_vpc": {
				"default":     true,
				"description": "Controls if VPC should be created (it affects almost all resources)",
			},
			"customer_gateway_tags": {
				"default":     {},
				"description": "Additional tags for the Customer Gateway",
			},
			"customer_gateways": {
				"default":     {},
				"description": "Maps of Customer Gateway's attributes (BGP ASN and Gateway's Internet-routable external IP address)",
			},
			"database_acl_tags": {
				"default":     {},
				"description": "Additional tags for the database subnets network ACL",
			},
			"database_dedicated_network_acl": {
				"default":     false,
				"description": "Whether to use dedicated network ACL (not default) and custom rules for database subnets",
			},
			"database_inbound_acl_rules": {
				"default": [
					{
						"cidr_block":  "0.0.0.0/0",
						"from_port":   "0",
						"protocol":    "-1",
						"rule_action": "allow",
						"rule_number": "100",
						"to_port":     "0",
					},
				],
				"description": "Database subnets inbound network ACL rules",
			},
			"database_outbound_acl_rules": {
				"default": [
					{
						"cidr_block":  "0.0.0.0/0",
						"from_port":   "0",
						"protocol":    "-1",
						"rule_action": "allow",
						"rule_number": "100",
						"to_port":     "0",
					},
				],
				"description": "Database subnets outbound network ACL rules",
			},
			"database_route_table_tags": {
				"default":     {},
				"description": "Additional tags for the database route tables",
			},
			"database_subnet_assign_ipv6_address_on_creation": {
				"default":     null,
				"description": "Assign IPv6 address on database subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
			},
			"database_subnet_group_tags": {
				"default":     {},
				"description": "Additional tags for the database subnet group",
			},
			"database_subnet_ipv6_prefixes": {
				"default":     [],
				"description": "Assigns IPv6 database subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
			},
			"database_subnet_suffix": {
				"default":     "db",
				"description": "Suffix to append to database subnets name",
			},
			"database_subnet_tags": {
				"default":     {},
				"description": "Additional tags for the database subnets",
			},
			"database_subnets": {
				"default":     [],
				"description": "A list of database subnets",
			},
			"datasync_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Data Sync endpoint",
			},
			"datasync_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Data Sync endpoint",
			},
			"datasync_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Data Sync endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
			},
			"default_network_acl_egress": {
				"default": [
					{
						"action":     "allow",
						"cidr_block": "0.0.0.0/0",
						"from_port":  "0",
						"protocol":   "-1",
						"rule_no":    "100",
						"to_port":    "0",
					},
					{
						"action":          "allow",
						"from_port":       "0",
						"ipv6_cidr_block": "::/0",
						"protocol":        "-1",
						"rule_no":         "101",
						"to_port":         "0",
					},
				],
				"description": "List of maps of egress rules to set on the Default Network ACL",
			},
			"default_network_acl_ingress": {
				"default": [
					{
						"action":     "allow",
						"cidr_block": "0.0.0.0/0",
						"from_port":  "0",
						"protocol":   "-1",
						"rule_no":    "100",
						"to_port":    "0",
					},
					{
						"action":          "allow",
						"from_port":       "0",
						"ipv6_cidr_block": "::/0",
						"protocol":        "-1",
						"rule_no":         "101",
						"to_port":         "0",
					},
				],
				"description": "List of maps of ingress rules to set on the Default Network ACL",
			},
			"default_network_acl_name": {
				"default":     "",
				"description": "Name to be used on the Default Network ACL",
			},
			"default_network_acl_tags": {
				"default":     {},
				"description": "Additional tags for the Default Network ACL",
			},
			"default_security_group_egress": {
				"default":     null,
				"description": "List of maps of egress rules to set on the default security group",
			},
			"default_security_group_ingress": {
				"default":     null,
				"description": "List of maps of ingress rules to set on the default security group",
			},
			"default_security_group_name": {
				"default":     "default",
				"description": "Name to be used on the default security group",
			},
			"default_security_group_tags": {
				"default":     {},
				"description": "Additional tags for the default security group",
			},
			"default_vpc_enable_classiclink": {
				"default":     false,
				"description": "Should be true to enable ClassicLink in the Default VPC",
			},
			"default_vpc_enable_dns_hostnames": {
				"default":     false,
				"description": "Should be true to enable DNS hostnames in the Default VPC",
			},
			"default_vpc_enable_dns_support": {
				"default":     true,
				"description": "Should be true to enable DNS support in the Default VPC",
			},
			"default_vpc_name": {
				"default":     "",
				"description": "Name to be used on the Default VPC",
			},
			"default_vpc_tags": {
				"default":     {},
				"description": "Additional tags for the Default VPC",
			},
			"dhcp_options_domain_name": {
				"default":     "",
				"description": "Specifies DNS name for DHCP options set (requires enable_dhcp_options set to true)",
			},
			"dhcp_options_domain_name_servers": {
				"default": [
					"AmazonProvidedDNS",
				],
				"description": "Specify a list of DNS server addresses for DHCP options set, default to AWS provided (requires enable_dhcp_options set to true)",
			},
			"dhcp_options_netbios_name_servers": {
				"default":     [],
				"description": "Specify a list of netbios servers for DHCP options set (requires enable_dhcp_options set to true)",
			},
			"dhcp_options_netbios_node_type": {
				"default":     "",
				"description": "Specify netbios node_type for DHCP options set (requires enable_dhcp_options set to true)",
			},
			"dhcp_options_ntp_servers": {
				"default":     [],
				"description": "Specify a list of NTP servers for DHCP options set (requires enable_dhcp_options set to true)",
			},
			"dhcp_options_tags": {
				"default":     {},
				"description": "Additional tags for the DHCP option set (requires enable_dhcp_options set to true)",
			},
			"ebs_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for EBS endpoint",
			},
			"ebs_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for EBS endpoint",
			},
			"ebs_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for EBS endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
			},
			"ec2_autoscaling_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for EC2 Autoscaling endpoint",
			},
			"ec2_autoscaling_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for EC2 Autoscaling endpoint",
			},
			"ec2_autoscaling_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for EC2 Autoscaling endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"ec2_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for EC2 endpoint",
			},
			"ec2_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for EC2 endpoint",
			},
			"ec2_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for EC2 endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"ec2messages_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for EC2MESSAGES endpoint",
			},
			"ec2messages_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for EC2MESSAGES endpoint",
			},
			"ec2messages_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for EC2MESSAGES endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"ecr_api_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for ECR API endpoint",
			},
			"ecr_api_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for ECR API endpoint",
			},
			"ecr_api_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for ECR api endpoint. If omitted, private subnets will be used.",
			},
			"ecr_dkr_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for ECR DKR endpoint",
			},
			"ecr_dkr_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for ECR DKR endpoint",
			},
			"ecr_dkr_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for ECR dkr endpoint. If omitted, private subnets will be used.",
			},
			"ecs_agent_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for ECS Agent endpoint",
			},
			"ecs_agent_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for ECS Agent endpoint",
			},
			"ecs_agent_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for ECS Agent endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"ecs_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for ECS endpoint",
			},
			"ecs_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for ECS endpoint",
			},
			"ecs_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for ECS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"ecs_telemetry_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for ECS Telemetry endpoint",
			},
			"ecs_telemetry_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for ECS Telemetry endpoint",
			},
			"ecs_telemetry_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for ECS Telemetry endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"efs_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for EFS endpoint",
			},
			"efs_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for EFS endpoint",
			},
			"efs_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for EFS endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
			},
			"elastic_inference_runtime_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Elastic Inference Runtime endpoint",
			},
			"elastic_inference_runtime_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Elastic Inference Runtime endpoint",
			},
			"elastic_inference_runtime_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Elastic Inference Runtime endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
			},
			"elasticache_acl_tags": {
				"default":     {},
				"description": "Additional tags for the elasticache subnets network ACL",
			},
			"elasticache_dedicated_network_acl": {
				"default":     false,
				"description": "Whether to use dedicated network ACL (not default) and custom rules for elasticache subnets",
			},
			"elasticache_inbound_acl_rules": {
				"default": [
					{
						"cidr_block":  "0.0.0.0/0",
						"from_port":   "0",
						"protocol":    "-1",
						"rule_action": "allow",
						"rule_number": "100",
						"to_port":     "0",
					},
				],
				"description": "Elasticache subnets inbound network ACL rules",
			},
			"elasticache_outbound_acl_rules": {
				"default": [
					{
						"cidr_block":  "0.0.0.0/0",
						"from_port":   "0",
						"protocol":    "-1",
						"rule_action": "allow",
						"rule_number": "100",
						"to_port":     "0",
					},
				],
				"description": "Elasticache subnets outbound network ACL rules",
			},
			"elasticache_route_table_tags": {
				"default":     {},
				"description": "Additional tags for the elasticache route tables",
			},
			"elasticache_subnet_assign_ipv6_address_on_creation": {
				"default":     null,
				"description": "Assign IPv6 address on elasticache subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
			},
			"elasticache_subnet_ipv6_prefixes": {
				"default":     [],
				"description": "Assigns IPv6 elasticache subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
			},
			"elasticache_subnet_suffix": {
				"default":     "elasticache",
				"description": "Suffix to append to elasticache subnets name",
			},
			"elasticache_subnet_tags": {
				"default":     {},
				"description": "Additional tags for the elasticache subnets",
			},
			"elasticache_subnets": {
				"default":     [],
				"description": "A list of elasticache subnets",
			},
			"elasticbeanstalk_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Elastic Beanstalk endpoint",
			},
			"elasticbeanstalk_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Elastic Beanstalk endpoint",
			},
			"elasticbeanstalk_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Elastic Beanstalk endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"elasticbeanstalk_health_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Elastic Beanstalk Health endpoint",
			},
			"elasticbeanstalk_health_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Elastic Beanstalk Health endpoint",
			},
			"elasticbeanstalk_health_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Elastic Beanstalk Health endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"elasticloadbalancing_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Elastic Load Balancing endpoint",
			},
			"elasticloadbalancing_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Elastic Load Balancing endpoint",
			},
			"elasticloadbalancing_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Elastic Load Balancing endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"emr_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for EMR endpoint",
			},
			"emr_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for EMR endpoint",
			},
			"emr_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for EMR endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
			},
			"enable_access_analyzer_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an Access Analyzer endpoint to the VPC",
			},
			"enable_acm_pca_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an ACM PCA endpoint to the VPC",
			},
			"enable_apigw_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an api gateway endpoint to the VPC",
			},
			"enable_appmesh_envoy_management_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a AppMesh endpoint to the VPC",
			},
			"enable_appstream_api_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a AppStream API endpoint to the VPC",
			},
			"enable_appstream_streaming_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a AppStream Streaming endpoint to the VPC",
			},
			"enable_athena_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a Athena endpoint to the VPC",
			},
			"enable_auto_scaling_plans_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an Auto Scaling Plans endpoint to the VPC",
			},
			"enable_classiclink": {
				"default":     null,
				"description": "Should be true to enable ClassicLink for the VPC. Only valid in regions and accounts that support EC2 Classic.",
			},
			"enable_classiclink_dns_support": {
				"default":     null,
				"description": "Should be true to enable ClassicLink DNS Support for the VPC. Only valid in regions and accounts that support EC2 Classic.",
			},
			"enable_cloud_directory_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an Cloud Directory endpoint to the VPC",
			},
			"enable_cloudformation_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a Cloudformation endpoint to the VPC",
			},
			"enable_cloudtrail_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a CloudTrail endpoint to the VPC",
			},
			"enable_codeartifact_api_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an Codeartifact API endpoint to the VPC",
			},
			"enable_codeartifact_repositories_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an Codeartifact repositories endpoint to the VPC",
			},
			"enable_codebuild_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an Codebuild endpoint to the VPC",
			},
			"enable_codecommit_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an Codecommit endpoint to the VPC",
			},
			"enable_codedeploy_commands_secure_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an CodeDeploy Commands Secure endpoint to the VPC",
			},
			"enable_codedeploy_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an CodeDeploy endpoint to the VPC",
			},
			"enable_codepipeline_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a CodePipeline endpoint to the VPC",
			},
			"enable_config_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an config endpoint to the VPC",
			},
			"enable_datasync_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an Data Sync endpoint to the VPC",
			},
			"enable_dhcp_options": {
				"default":     false,
				"description": "Should be true if you want to specify a DHCP options set with a custom domain name, DNS servers, NTP servers, netbios servers, and/or netbios server type",
			},
			"enable_dns_hostnames": {
				"default":     false,
				"description": "Should be true to enable DNS hostnames in the VPC",
			},
			"enable_dns_support": {
				"default":     true,
				"description": "Should be true to enable DNS support in the VPC",
			},
			"enable_dynamodb_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a DynamoDB endpoint to the VPC",
			},
			"enable_ebs_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an EBS endpoint to the VPC",
			},
			"enable_ec2_autoscaling_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an EC2 Autoscaling endpoint to the VPC",
			},
			"enable_ec2_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an EC2 endpoint to the VPC",
			},
			"enable_ec2messages_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an EC2MESSAGES endpoint to the VPC",
			},
			"enable_ecr_api_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an ecr api endpoint to the VPC",
			},
			"enable_ecr_dkr_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an ecr dkr endpoint to the VPC",
			},
			"enable_ecs_agent_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a ECS Agent endpoint to the VPC",
			},
			"enable_ecs_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a ECS endpoint to the VPC",
			},
			"enable_ecs_telemetry_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a ECS Telemetry endpoint to the VPC",
			},
			"enable_efs_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an EFS endpoint to the VPC",
			},
			"enable_elastic_inference_runtime_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an Elastic Inference Runtime endpoint to the VPC",
			},
			"enable_elasticbeanstalk_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a Elastic Beanstalk endpoint to the VPC",
			},
			"enable_elasticbeanstalk_health_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a Elastic Beanstalk Health endpoint to the VPC",
			},
			"enable_elasticloadbalancing_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a Elastic Load Balancing endpoint to the VPC",
			},
			"enable_emr_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an EMR endpoint to the VPC",
			},
			"enable_events_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a CloudWatch Events endpoint to the VPC",
			},
			"enable_flow_log": {
				"default":     false,
				"description": "Whether or not to enable VPC Flow Logs",
			},
			"enable_git_codecommit_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an Git Codecommit endpoint to the VPC",
			},
			"enable_glue_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a Glue endpoint to the VPC",
			},
			"enable_ipv6": {
				"default":     false,
				"description": "Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.",
			},
			"enable_kinesis_firehose_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a Kinesis Firehose endpoint to the VPC",
			},
			"enable_kinesis_streams_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a Kinesis Streams endpoint to the VPC",
			},
			"enable_kms_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a KMS endpoint to the VPC",
			},
			"enable_lambda_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a Lambda endpoint to the VPC",
			},
			"enable_logs_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a CloudWatch Logs endpoint to the VPC",
			},
			"enable_monitoring_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a CloudWatch Monitoring endpoint to the VPC",
			},
			"enable_nat_gateway": {
				"default":     false,
				"description": "Should be true if you want to provision NAT Gateways for each of your private networks",
			},
			"enable_public_redshift": {
				"default":     false,
				"description": "Controls if redshift should have public routing table",
			},
			"enable_public_s3_endpoint": {
				"default":     true,
				"description": "Whether to enable S3 VPC Endpoint for public subnets",
			},
			"enable_qldb_session_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an QLDB Session endpoint to the VPC",
			},
			"enable_rds_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an RDS endpoint to the VPC",
			},
			"enable_rekognition_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a Rekognition endpoint to the VPC",
			},
			"enable_s3_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an S3 endpoint to the VPC",
			},
			"enable_sagemaker_api_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a SageMaker API endpoint to the VPC",
			},
			"enable_sagemaker_notebook_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a Sagemaker Notebook endpoint to the VPC",
			},
			"enable_sagemaker_runtime_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a SageMaker Runtime endpoint to the VPC",
			},
			"enable_secretsmanager_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an Secrets Manager endpoint to the VPC",
			},
			"enable_servicecatalog_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a Service Catalog endpoint to the VPC",
			},
			"enable_ses_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an SES endpoint to the VPC",
			},
			"enable_sms_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an SMS endpoint to the VPC",
			},
			"enable_sns_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a SNS endpoint to the VPC",
			},
			"enable_sqs_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an SQS endpoint to the VPC",
			},
			"enable_ssm_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an SSM endpoint to the VPC",
			},
			"enable_ssmmessages_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a SSMMESSAGES endpoint to the VPC",
			},
			"enable_states_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a Step Function endpoint to the VPC",
			},
			"enable_storagegateway_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a Storage Gateway endpoint to the VPC",
			},
			"enable_sts_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a STS endpoint to the VPC",
			},
			"enable_textract_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an Textract endpoint to the VPC",
			},
			"enable_transfer_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a Transfer endpoint to the VPC",
			},
			"enable_transferserver_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision a Transfer Server endpoint to the VPC",
			},
			"enable_vpn_gateway": {
				"default":     false,
				"description": "Should be true if you want to create a new VPN Gateway resource and attach it to the VPC",
			},
			"enable_workspaces_endpoint": {
				"default":     false,
				"description": "Should be true if you want to provision an Workspaces endpoint to the VPC",
			},
			"events_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for CloudWatch Events endpoint",
			},
			"events_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for CloudWatch Events endpoint",
			},
			"events_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for CloudWatch Events endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"external_nat_ip_ids": {
				"default":     [],
				"description": "List of EIP IDs to be assigned to the NAT Gateways (used in combination with reuse_nat_ips)",
			},
			"external_nat_ips": {
				"default":     [],
				"description": "List of EIPs to be used for `nat_public_ips` output (used in combination with reuse_nat_ips and external_nat_ip_ids)",
			},
			"flow_log_cloudwatch_iam_role_arn": {
				"default":     "",
				"description": "The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group. When flow_log_destination_arn is set to ARN of Cloudwatch Logs, this argument needs to be provided.",
			},
			"flow_log_cloudwatch_log_group_kms_key_id": {
				"default":     null,
				"description": "The ARN of the KMS Key to use when encrypting log data for VPC flow logs.",
			},
			"flow_log_cloudwatch_log_group_name_prefix": {
				"default":     "/aws/vpc-flow-log/",
				"description": "Specifies the name prefix of CloudWatch Log Group for VPC flow logs.",
			},
			"flow_log_cloudwatch_log_group_retention_in_days": {
				"default":     null,
				"description": "Specifies the number of days you want to retain log events in the specified log group for VPC flow logs.",
			},
			"flow_log_destination_arn": {
				"default":     "",
				"description": "The ARN of the CloudWatch log group or S3 bucket where VPC Flow Logs will be pushed. If this ARN is a S3 bucket the appropriate permissions need to be set on that bucket's policy. When create_flow_log_cloudwatch_log_group is set to false this argument must be provided.",
			},
			"flow_log_destination_type": {
				"default":     "cloud-watch-logs",
				"description": "Type of flow log destination. Can be s3 or cloud-watch-logs.",
			},
			"flow_log_log_format": {
				"default":     null,
				"description": "The fields to include in the flow log record, in the order in which they should appear.",
			},
			"flow_log_max_aggregation_interval": {
				"default":     600,
				"description": "The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. Valid Values: `60` seconds or `600` seconds.",
			},
			"flow_log_traffic_type": {
				"default":     "ALL",
				"description": "The type of traffic to capture. Valid values: ACCEPT, REJECT, ALL.",
			},
			"git_codecommit_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Git Codecommit endpoint",
			},
			"git_codecommit_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Git Codecommit endpoint",
			},
			"git_codecommit_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Git Codecommit endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"glue_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Glue endpoint",
			},
			"glue_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Glue endpoint",
			},
			"glue_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Glue endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"igw_tags": {
				"default":     {},
				"description": "Additional tags for the internet gateway",
			},
			"instance_tenancy": {
				"default":     "default",
				"description": "A tenancy option for instances launched into the VPC",
			},
			"intra_acl_tags": {
				"default":     {},
				"description": "Additional tags for the intra subnets network ACL",
			},
			"intra_dedicated_network_acl": {
				"default":     false,
				"description": "Whether to use dedicated network ACL (not default) and custom rules for intra subnets",
			},
			"intra_inbound_acl_rules": {
				"default": [
					{
						"cidr_block":  "0.0.0.0/0",
						"from_port":   "0",
						"protocol":    "-1",
						"rule_action": "allow",
						"rule_number": "100",
						"to_port":     "0",
					},
				],
				"description": "Intra subnets inbound network ACLs",
			},
			"intra_outbound_acl_rules": {
				"default": [
					{
						"cidr_block":  "0.0.0.0/0",
						"from_port":   "0",
						"protocol":    "-1",
						"rule_action": "allow",
						"rule_number": "100",
						"to_port":     "0",
					},
				],
				"description": "Intra subnets outbound network ACLs",
			},
			"intra_route_table_tags": {
				"default":     {},
				"description": "Additional tags for the intra route tables",
			},
			"intra_subnet_assign_ipv6_address_on_creation": {
				"default":     null,
				"description": "Assign IPv6 address on intra subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
			},
			"intra_subnet_ipv6_prefixes": {
				"default":     [],
				"description": "Assigns IPv6 intra subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
			},
			"intra_subnet_suffix": {
				"default":     "intra",
				"description": "Suffix to append to intra subnets name",
			},
			"intra_subnet_tags": {
				"default":     {},
				"description": "Additional tags for the intra subnets",
			},
			"intra_subnets": {
				"default":     [],
				"description": "A list of intra subnets",
			},
			"kinesis_firehose_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Kinesis Firehose endpoint",
			},
			"kinesis_firehose_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Kinesis Firehose endpoint",
			},
			"kinesis_firehose_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Kinesis Firehose endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"kinesis_streams_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Kinesis Streams endpoint",
			},
			"kinesis_streams_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Kinesis Streams endpoint",
			},
			"kinesis_streams_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Kinesis Streams endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"kms_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for KMS endpoint",
			},
			"kms_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for KMS endpoint",
			},
			"kms_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for KMS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"lambda_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Lambda endpoint",
			},
			"lambda_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Lambda endpoint",
			},
			"lambda_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Lambda endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"logs_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for CloudWatch Logs endpoint",
			},
			"logs_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for CloudWatch Logs endpoint",
			},
			"logs_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for CloudWatch Logs endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"manage_default_network_acl": {
				"default":     false,
				"description": "Should be true to adopt and manage Default Network ACL",
			},
			"manage_default_security_group": {
				"default":     false,
				"description": "Should be true to adopt and manage default security group",
			},
			"manage_default_vpc": {
				"default":     false,
				"description": "Should be true to adopt and manage Default VPC",
			},
			"map_public_ip_on_launch": {
				"default":     true,
				"description": "Should be false if you do not want to auto-assign public IP on launch",
			},
			"monitoring_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for CloudWatch Monitoring endpoint",
			},
			"monitoring_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for CloudWatch Monitoring endpoint",
			},
			"monitoring_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for CloudWatch Monitoring endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"name": {
				"default":     "",
				"description": "Name to be used on all the resources as identifier",
			},
			"nat_eip_tags": {
				"default":     {},
				"description": "Additional tags for the NAT EIP",
			},
			"nat_gateway_tags": {
				"default":     {},
				"description": "Additional tags for the NAT gateways",
			},
			"one_nat_gateway_per_az": {
				"default":     false,
				"description": "Should be true if you want only one NAT Gateway per availability zone. Requires `var.azs` to be set, and the number of `public_subnets` created to be greater than or equal to the number of availability zones specified in `var.azs`.",
			},
			"private_acl_tags": {
				"default":     {},
				"description": "Additional tags for the private subnets network ACL",
			},
			"private_dedicated_network_acl": {
				"default":     false,
				"description": "Whether to use dedicated network ACL (not default) and custom rules for private subnets",
			},
			"private_inbound_acl_rules": {
				"default": [
					{
						"cidr_block":  "0.0.0.0/0",
						"from_port":   "0",
						"protocol":    "-1",
						"rule_action": "allow",
						"rule_number": "100",
						"to_port":     "0",
					},
				],
				"description": "Private subnets inbound network ACLs",
			},
			"private_outbound_acl_rules": {
				"default": [
					{
						"cidr_block":  "0.0.0.0/0",
						"from_port":   "0",
						"protocol":    "-1",
						"rule_action": "allow",
						"rule_number": "100",
						"to_port":     "0",
					},
				],
				"description": "Private subnets outbound network ACLs",
			},
			"private_route_table_tags": {
				"default":     {},
				"description": "Additional tags for the private route tables",
			},
			"private_subnet_assign_ipv6_address_on_creation": {
				"default":     null,
				"description": "Assign IPv6 address on private subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
			},
			"private_subnet_ipv6_prefixes": {
				"default":     [],
				"description": "Assigns IPv6 private subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
			},
			"private_subnet_suffix": {
				"default":     "private",
				"description": "Suffix to append to private subnets name",
			},
			"private_subnet_tags": {
				"default":     {},
				"description": "Additional tags for the private subnets",
			},
			"private_subnets": {
				"default":     [],
				"description": "A list of private subnets inside the VPC",
			},
			"propagate_intra_route_tables_vgw": {
				"default":     false,
				"description": "Should be true if you want route table propagation",
			},
			"propagate_private_route_tables_vgw": {
				"default":     false,
				"description": "Should be true if you want route table propagation",
			},
			"propagate_public_route_tables_vgw": {
				"default":     false,
				"description": "Should be true if you want route table propagation",
			},
			"public_acl_tags": {
				"default":     {},
				"description": "Additional tags for the public subnets network ACL",
			},
			"public_dedicated_network_acl": {
				"default":     false,
				"description": "Whether to use dedicated network ACL (not default) and custom rules for public subnets",
			},
			"public_inbound_acl_rules": {
				"default": [
					{
						"cidr_block":  "0.0.0.0/0",
						"from_port":   "0",
						"protocol":    "-1",
						"rule_action": "allow",
						"rule_number": "100",
						"to_port":     "0",
					},
				],
				"description": "Public subnets inbound network ACLs",
			},
			"public_outbound_acl_rules": {
				"default": [
					{
						"cidr_block":  "0.0.0.0/0",
						"from_port":   "0",
						"protocol":    "-1",
						"rule_action": "allow",
						"rule_number": "100",
						"to_port":     "0",
					},
				],
				"description": "Public subnets outbound network ACLs",
			},
			"public_route_table_tags": {
				"default":     {},
				"description": "Additional tags for the public route tables",
			},
			"public_subnet_assign_ipv6_address_on_creation": {
				"default":     null,
				"description": "Assign IPv6 address on public subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
			},
			"public_subnet_ipv6_prefixes": {
				"default":     [],
				"description": "Assigns IPv6 public subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
			},
			"public_subnet_suffix": {
				"default":     "public",
				"description": "Suffix to append to public subnets name",
			},
			"public_subnet_tags": {
				"default":     {},
				"description": "Additional tags for the public subnets",
			},
			"public_subnets": {
				"default":     [],
				"description": "A list of public subnets inside the VPC",
			},
			"qldb_session_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for QLDB Session endpoint",
			},
			"qldb_session_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for QLDB Session endpoint",
			},
			"qldb_session_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for QLDB Session endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
			},
			"rds_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for RDS endpoint",
			},
			"rds_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for RDS endpoint",
			},
			"rds_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for RDS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"redshift_acl_tags": {
				"default":     {},
				"description": "Additional tags for the redshift subnets network ACL",
			},
			"redshift_dedicated_network_acl": {
				"default":     false,
				"description": "Whether to use dedicated network ACL (not default) and custom rules for redshift subnets",
			},
			"redshift_inbound_acl_rules": {
				"default": [
					{
						"cidr_block":  "0.0.0.0/0",
						"from_port":   "0",
						"protocol":    "-1",
						"rule_action": "allow",
						"rule_number": "100",
						"to_port":     "0",
					},
				],
				"description": "Redshift subnets inbound network ACL rules",
			},
			"redshift_outbound_acl_rules": {
				"default": [
					{
						"cidr_block":  "0.0.0.0/0",
						"from_port":   "0",
						"protocol":    "-1",
						"rule_action": "allow",
						"rule_number": "100",
						"to_port":     "0",
					},
				],
				"description": "Redshift subnets outbound network ACL rules",
			},
			"redshift_route_table_tags": {
				"default":     {},
				"description": "Additional tags for the redshift route tables",
			},
			"redshift_subnet_assign_ipv6_address_on_creation": {
				"default":     null,
				"description": "Assign IPv6 address on redshift subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
			},
			"redshift_subnet_group_tags": {
				"default":     {},
				"description": "Additional tags for the redshift subnet group",
			},
			"redshift_subnet_ipv6_prefixes": {
				"default":     [],
				"description": "Assigns IPv6 redshift subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
			},
			"redshift_subnet_suffix": {
				"default":     "redshift",
				"description": "Suffix to append to redshift subnets name",
			},
			"redshift_subnet_tags": {
				"default":     {},
				"description": "Additional tags for the redshift subnets",
			},
			"redshift_subnets": {
				"default":     [],
				"description": "A list of redshift subnets",
			},
			"rekognition_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Rekognition endpoint",
			},
			"rekognition_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Rekognition endpoint",
			},
			"rekognition_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Rekognition endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"reuse_nat_ips": {
				"default":     false,
				"description": "Should be true if you don't want EIPs to be created for your NAT Gateways and will instead pass them in via the 'external_nat_ip_ids' variable",
			},
			"sagemaker_api_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for SageMaker API endpoint",
			},
			"sagemaker_api_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for SageMaker API endpoint",
			},
			"sagemaker_api_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for SageMaker API endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"sagemaker_notebook_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Sagemaker Notebook endpoint",
			},
			"sagemaker_notebook_endpoint_region": {
				"default":     "",
				"description": "Region to use for Sagemaker Notebook endpoint",
			},
			"sagemaker_notebook_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Sagemaker Notebook endpoint",
			},
			"sagemaker_notebook_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Sagemaker Notebook endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"sagemaker_runtime_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for SageMaker Runtime endpoint",
			},
			"sagemaker_runtime_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for SageMaker Runtime endpoint",
			},
			"sagemaker_runtime_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for SageMaker Runtime endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"secondary_cidr_blocks": {
				"default":     [],
				"description": "List of secondary CIDR blocks to associate with the VPC to extend the IP Address pool",
			},
			"secretsmanager_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Secrets Manager endpoint",
			},
			"secretsmanager_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Secrets Manager endpoint",
			},
			"secretsmanager_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Secrets Manager endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"servicecatalog_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Service Catalog endpoint",
			},
			"servicecatalog_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Service Catalog endpoint",
			},
			"servicecatalog_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Service Catalog endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"ses_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for SES endpoint",
			},
			"ses_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for SES endpoint",
			},
			"ses_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for SES endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"single_nat_gateway": {
				"default":     false,
				"description": "Should be true if you want to provision a single shared NAT Gateway across all of your private networks",
			},
			"sms_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for SMS endpoint",
			},
			"sms_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for SMS endpoint",
			},
			"sms_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for SMS endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
			},
			"sns_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for SNS endpoint",
			},
			"sns_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for SNS endpoint",
			},
			"sns_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for SNS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"sqs_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for SQS endpoint",
			},
			"sqs_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for SQS endpoint",
			},
			"sqs_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for SQS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"ssm_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for SSM endpoint",
			},
			"ssm_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for SSM endpoint",
			},
			"ssm_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for SSM endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"ssmmessages_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for SSMMESSAGES endpoint",
			},
			"ssmmessages_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for SSMMESSAGES endpoint",
			},
			"ssmmessages_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for SSMMESSAGES endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"states_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Step Function endpoint",
			},
			"states_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Step Function endpoint",
			},
			"states_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Step Function endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"storagegateway_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Storage Gateway endpoint",
			},
			"storagegateway_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Storage Gateway endpoint",
			},
			"storagegateway_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Storage Gateway endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"sts_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for STS endpoint",
			},
			"sts_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for STS endpoint",
			},
			"sts_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for STS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"tags": {
				"default":     {},
				"description": "A map of tags to add to all resources",
			},
			"textract_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Textract endpoint",
			},
			"textract_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Textract endpoint",
			},
			"textract_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Textract endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"transfer_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Transfer endpoint",
			},
			"transfer_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Transfer endpoint",
			},
			"transfer_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Transfer endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"transferserver_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Transfer Server endpoint",
			},
			"transferserver_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Transfer Server endpoint",
			},
			"transferserver_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Transfer Server endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used.",
			},
			"vpc_endpoint_tags": {
				"default":     {},
				"description": "Additional tags for the VPC Endpoints",
			},
			"vpc_flow_log_tags": {
				"default":     {},
				"description": "Additional tags for the VPC Flow Logs",
			},
			"vpc_tags": {
				"default":     {},
				"description": "Additional tags for the VPC",
			},
			"vpn_gateway_az": {
				"default":     null,
				"description": "The Availability Zone for the VPN Gateway",
			},
			"vpn_gateway_id": {
				"default":     "",
				"description": "ID of VPN Gateway to attach to the VPC",
			},
			"vpn_gateway_tags": {
				"default":     {},
				"description": "Additional tags for the VPN gateway",
			},
			"workspaces_endpoint_private_dns_enabled": {
				"default":     false,
				"description": "Whether or not to associate a private hosted zone with the specified VPC for Workspaces endpoint",
			},
			"workspaces_endpoint_security_group_ids": {
				"default":     [],
				"description": "The ID of one or more security groups to associate with the network interface for Workspaces endpoint",
			},
			"workspaces_endpoint_subnet_ids": {
				"default":     [],
				"description": "The ID of one or more subnets in which to create a network interface for Workspaces endpoint. Only a single subnet within an AZ is supported. Ifomitted, private subnets will be used.",
			},
		},
	},
}

module_paths = [
	[],
	[
		"app_security_group",
	],
	[
		"app_security_group",
		"sg",
	],
	[
		"ec2_instances",
	],
	[
		"elb_http",
	],
	[
		"elb_http",
		"elb",
	],
	[
		"elb_http",
		"elb_attachment",
	],
	[
		"lb_security_group",
	],
	[
		"lb_security_group",
		"sg",
	],
	[
		"vpc",
	],
]

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
modules = _modules.root.modules
providers = _modules.root.providers
resources = _modules.root.resources
variables = _modules.root.variables
outputs = _modules.root.outputs
